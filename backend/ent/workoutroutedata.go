// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workout"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutdata"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutroutedata"
)

// WorkoutRouteData is the model entity for the WorkoutRouteData schema.
type WorkoutRouteData struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkoutRouteDataQuery when eager-loading is set.
	Edges                           WorkoutRouteDataEdges `json:"related"`
	workout_data_workout_route_data *uuid.UUID
	workout_route_data_workout      *uuid.UUID
	selectValues                    sql.SelectValues
}

// WorkoutRouteDataEdges holds the relations/edges for other nodes in the graph.
type WorkoutRouteDataEdges struct {
	// Workout holds the value of the workout edge.
	Workout *Workout `json:"workout,omitempty"`
	// WorkoutData holds the value of the workout_data edge.
	WorkoutData *WorkoutData `json:"workout_data,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WorkoutOrErr returns the Workout value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutRouteDataEdges) WorkoutOrErr() (*Workout, error) {
	if e.loadedTypes[0] {
		if e.Workout == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: workout.Label}
		}
		return e.Workout, nil
	}
	return nil, &NotLoadedError{edge: "workout"}
}

// WorkoutDataOrErr returns the WorkoutData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutRouteDataEdges) WorkoutDataOrErr() (*WorkoutData, error) {
	if e.loadedTypes[1] {
		if e.WorkoutData == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: workoutdata.Label}
		}
		return e.WorkoutData, nil
	}
	return nil, &NotLoadedError{edge: "workout_data"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkoutRouteData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workoutroutedata.FieldCreatedAt, workoutroutedata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case workoutroutedata.FieldID:
			values[i] = new(uuid.UUID)
		case workoutroutedata.ForeignKeys[0]: // workout_data_workout_route_data
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case workoutroutedata.ForeignKeys[1]: // workout_route_data_workout
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkoutRouteData fields.
func (wrd *WorkoutRouteData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workoutroutedata.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wrd.ID = *value
			}
		case workoutroutedata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wrd.CreatedAt = value.Time
			}
		case workoutroutedata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wrd.UpdatedAt = value.Time
			}
		case workoutroutedata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workout_data_workout_route_data", values[i])
			} else if value.Valid {
				wrd.workout_data_workout_route_data = new(uuid.UUID)
				*wrd.workout_data_workout_route_data = *value.S.(*uuid.UUID)
			}
		case workoutroutedata.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workout_route_data_workout", values[i])
			} else if value.Valid {
				wrd.workout_route_data_workout = new(uuid.UUID)
				*wrd.workout_route_data_workout = *value.S.(*uuid.UUID)
			}
		default:
			wrd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkoutRouteData.
// This includes values selected through modifiers, order, etc.
func (wrd *WorkoutRouteData) Value(name string) (ent.Value, error) {
	return wrd.selectValues.Get(name)
}

// QueryWorkout queries the "workout" edge of the WorkoutRouteData entity.
func (wrd *WorkoutRouteData) QueryWorkout() *WorkoutQuery {
	return NewWorkoutRouteDataClient(wrd.config).QueryWorkout(wrd)
}

// QueryWorkoutData queries the "workout_data" edge of the WorkoutRouteData entity.
func (wrd *WorkoutRouteData) QueryWorkoutData() *WorkoutDataQuery {
	return NewWorkoutRouteDataClient(wrd.config).QueryWorkoutData(wrd)
}

// Update returns a builder for updating this WorkoutRouteData.
// Note that you need to call WorkoutRouteData.Unwrap() before calling this method if this WorkoutRouteData
// was returned from a transaction, and the transaction was committed or rolled back.
func (wrd *WorkoutRouteData) Update() *WorkoutRouteDataUpdateOne {
	return NewWorkoutRouteDataClient(wrd.config).UpdateOne(wrd)
}

// Unwrap unwraps the WorkoutRouteData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wrd *WorkoutRouteData) Unwrap() *WorkoutRouteData {
	_tx, ok := wrd.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkoutRouteData is not a transactional entity")
	}
	wrd.config.driver = _tx.drv
	return wrd
}

// String implements the fmt.Stringer.
func (wrd *WorkoutRouteData) String() string {
	var builder strings.Builder
	builder.WriteString("WorkoutRouteData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wrd.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wrd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wrd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WorkoutRouteDataSlice is a parsable slice of WorkoutRouteData.
type WorkoutRouteDataSlice []*WorkoutRouteData
