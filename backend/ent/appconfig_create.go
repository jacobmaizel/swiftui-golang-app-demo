// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/appconfig"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
)

// AppConfigCreate is the builder for creating a AppConfig entity.
type AppConfigCreate struct {
	config
	mutation *AppConfigMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (acc *AppConfigCreate) SetCreatedAt(t time.Time) *AppConfigCreate {
	acc.mutation.SetCreatedAt(t)
	return acc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableCreatedAt(t *time.Time) *AppConfigCreate {
	if t != nil {
		acc.SetCreatedAt(*t)
	}
	return acc
}

// SetUpdatedAt sets the "updated_at" field.
func (acc *AppConfigCreate) SetUpdatedAt(t time.Time) *AppConfigCreate {
	acc.mutation.SetUpdatedAt(t)
	return acc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableUpdatedAt(t *time.Time) *AppConfigCreate {
	if t != nil {
		acc.SetUpdatedAt(*t)
	}
	return acc
}

// SetAutoSyncWorkouts sets the "auto_sync_workouts" field.
func (acc *AppConfigCreate) SetAutoSyncWorkouts(b bool) *AppConfigCreate {
	acc.mutation.SetAutoSyncWorkouts(b)
	return acc
}

// SetNillableAutoSyncWorkouts sets the "auto_sync_workouts" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableAutoSyncWorkouts(b *bool) *AppConfigCreate {
	if b != nil {
		acc.SetAutoSyncWorkouts(*b)
	}
	return acc
}

// SetID sets the "id" field.
func (acc *AppConfigCreate) SetID(u uuid.UUID) *AppConfigCreate {
	acc.mutation.SetID(u)
	return acc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableID(u *uuid.UUID) *AppConfigCreate {
	if u != nil {
		acc.SetID(*u)
	}
	return acc
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (acc *AppConfigCreate) SetProfileID(id uuid.UUID) *AppConfigCreate {
	acc.mutation.SetProfileID(id)
	return acc
}

// SetProfile sets the "profile" edge to the Profile entity.
func (acc *AppConfigCreate) SetProfile(p *Profile) *AppConfigCreate {
	return acc.SetProfileID(p.ID)
}

// Mutation returns the AppConfigMutation object of the builder.
func (acc *AppConfigCreate) Mutation() *AppConfigMutation {
	return acc.mutation
}

// Save creates the AppConfig in the database.
func (acc *AppConfigCreate) Save(ctx context.Context) (*AppConfig, error) {
	acc.defaults()
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AppConfigCreate) SaveX(ctx context.Context) *AppConfig {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AppConfigCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AppConfigCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AppConfigCreate) defaults() {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		v := appconfig.DefaultCreatedAt()
		acc.mutation.SetCreatedAt(v)
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		v := appconfig.DefaultUpdatedAt()
		acc.mutation.SetUpdatedAt(v)
	}
	if _, ok := acc.mutation.AutoSyncWorkouts(); !ok {
		v := appconfig.DefaultAutoSyncWorkouts
		acc.mutation.SetAutoSyncWorkouts(v)
	}
	if _, ok := acc.mutation.ID(); !ok {
		v := appconfig.DefaultID()
		acc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AppConfigCreate) check() error {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppConfig.created_at"`)}
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppConfig.updated_at"`)}
	}
	if _, ok := acc.mutation.AutoSyncWorkouts(); !ok {
		return &ValidationError{Name: "auto_sync_workouts", err: errors.New(`ent: missing required field "AppConfig.auto_sync_workouts"`)}
	}
	if _, ok := acc.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "profile", err: errors.New(`ent: missing required edge "AppConfig.profile"`)}
	}
	return nil
}

func (acc *AppConfigCreate) sqlSave(ctx context.Context) (*AppConfig, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *AppConfigCreate) createSpec() (*AppConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &AppConfig{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(appconfig.Table, sqlgraph.NewFieldSpec(appconfig.FieldID, field.TypeUUID))
	)
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.SetField(appconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := acc.mutation.UpdatedAt(); ok {
		_spec.SetField(appconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := acc.mutation.AutoSyncWorkouts(); ok {
		_spec.SetField(appconfig.FieldAutoSyncWorkouts, field.TypeBool, value)
		_node.AutoSyncWorkouts = value
	}
	if nodes := acc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   appconfig.ProfileTable,
			Columns: []string{appconfig.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppConfigCreateBulk is the builder for creating many AppConfig entities in bulk.
type AppConfigCreateBulk struct {
	config
	builders []*AppConfigCreate
}

// Save creates the AppConfig entities in the database.
func (accb *AppConfigCreateBulk) Save(ctx context.Context) ([]*AppConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AppConfig, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AppConfigCreateBulk) SaveX(ctx context.Context) []*AppConfig {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AppConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AppConfigCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}
