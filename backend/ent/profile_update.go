// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/action"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/appconfig"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competition"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competitionresult"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/fcmtoken"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/goal"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/invite"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/notification"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/notificationpreferences"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/predicate"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/squad"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/user"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workout"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutdata"
)

// ProfileUpdate is the builder for updating Profile entities.
type ProfileUpdate struct {
	config
	hooks     []Hook
	mutation  *ProfileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProfileUpdate builder.
func (pu *ProfileUpdate) Where(ps ...predicate.Profile) *ProfileUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProfileUpdate) SetUpdatedAt(t time.Time) *ProfileUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetPublic sets the "public" field.
func (pu *ProfileUpdate) SetPublic(b bool) *ProfileUpdate {
	pu.mutation.SetPublic(b)
	return pu
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillablePublic(b *bool) *ProfileUpdate {
	if b != nil {
		pu.SetPublic(*b)
	}
	return pu
}

// SetFirstName sets the "first_name" field.
func (pu *ProfileUpdate) SetFirstName(s string) *ProfileUpdate {
	pu.mutation.SetFirstName(s)
	return pu
}

// SetLastName sets the "last_name" field.
func (pu *ProfileUpdate) SetLastName(s string) *ProfileUpdate {
	pu.mutation.SetLastName(s)
	return pu
}

// SetPicture sets the "picture" field.
func (pu *ProfileUpdate) SetPicture(s string) *ProfileUpdate {
	pu.mutation.SetPicture(s)
	return pu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillablePicture(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetPicture(*s)
	}
	return pu
}

// ClearPicture clears the value of the "picture" field.
func (pu *ProfileUpdate) ClearPicture() *ProfileUpdate {
	pu.mutation.ClearPicture()
	return pu
}

// SetBirthday sets the "birthday" field.
func (pu *ProfileUpdate) SetBirthday(t time.Time) *ProfileUpdate {
	pu.mutation.SetBirthday(t)
	return pu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableBirthday(t *time.Time) *ProfileUpdate {
	if t != nil {
		pu.SetBirthday(*t)
	}
	return pu
}

// ClearBirthday clears the value of the "birthday" field.
func (pu *ProfileUpdate) ClearBirthday() *ProfileUpdate {
	pu.mutation.ClearBirthday()
	return pu
}

// SetOnboardingCompleted sets the "onboarding_completed" field.
func (pu *ProfileUpdate) SetOnboardingCompleted(b bool) *ProfileUpdate {
	pu.mutation.SetOnboardingCompleted(b)
	return pu
}

// SetNillableOnboardingCompleted sets the "onboarding_completed" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableOnboardingCompleted(b *bool) *ProfileUpdate {
	if b != nil {
		pu.SetOnboardingCompleted(*b)
	}
	return pu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *ProfileUpdate) SetUserID(id uuid.UUID) *ProfileUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *ProfileUpdate) SetUser(u *User) *ProfileUpdate {
	return pu.SetUserID(u.ID)
}

// AddFcmTokenIDs adds the "fcm_tokens" edge to the FcmToken entity by IDs.
func (pu *ProfileUpdate) AddFcmTokenIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.AddFcmTokenIDs(ids...)
	return pu
}

// AddFcmTokens adds the "fcm_tokens" edges to the FcmToken entity.
func (pu *ProfileUpdate) AddFcmTokens(f ...*FcmToken) *ProfileUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddFcmTokenIDs(ids...)
}

// SetNotificationPreferencesID sets the "notification_preferences" edge to the NotificationPreferences entity by ID.
func (pu *ProfileUpdate) SetNotificationPreferencesID(id uuid.UUID) *ProfileUpdate {
	pu.mutation.SetNotificationPreferencesID(id)
	return pu
}

// SetNillableNotificationPreferencesID sets the "notification_preferences" edge to the NotificationPreferences entity by ID if the given value is not nil.
func (pu *ProfileUpdate) SetNillableNotificationPreferencesID(id *uuid.UUID) *ProfileUpdate {
	if id != nil {
		pu = pu.SetNotificationPreferencesID(*id)
	}
	return pu
}

// SetNotificationPreferences sets the "notification_preferences" edge to the NotificationPreferences entity.
func (pu *ProfileUpdate) SetNotificationPreferences(n *NotificationPreferences) *ProfileUpdate {
	return pu.SetNotificationPreferencesID(n.ID)
}

// SetAppConfigID sets the "app_config" edge to the AppConfig entity by ID.
func (pu *ProfileUpdate) SetAppConfigID(id uuid.UUID) *ProfileUpdate {
	pu.mutation.SetAppConfigID(id)
	return pu
}

// SetNillableAppConfigID sets the "app_config" edge to the AppConfig entity by ID if the given value is not nil.
func (pu *ProfileUpdate) SetNillableAppConfigID(id *uuid.UUID) *ProfileUpdate {
	if id != nil {
		pu = pu.SetAppConfigID(*id)
	}
	return pu
}

// SetAppConfig sets the "app_config" edge to the AppConfig entity.
func (pu *ProfileUpdate) SetAppConfig(a *AppConfig) *ProfileUpdate {
	return pu.SetAppConfigID(a.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (pu *ProfileUpdate) AddNotificationIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.AddNotificationIDs(ids...)
	return pu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (pu *ProfileUpdate) AddNotifications(n ...*Notification) *ProfileUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.AddNotificationIDs(ids...)
}

// AddCompetitionIDs adds the "competitions" edge to the Competition entity by IDs.
func (pu *ProfileUpdate) AddCompetitionIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.AddCompetitionIDs(ids...)
	return pu
}

// AddCompetitions adds the "competitions" edges to the Competition entity.
func (pu *ProfileUpdate) AddCompetitions(c ...*Competition) *ProfileUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCompetitionIDs(ids...)
}

// AddActionIDs adds the "actions" edge to the Action entity by IDs.
func (pu *ProfileUpdate) AddActionIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.AddActionIDs(ids...)
	return pu
}

// AddActions adds the "actions" edges to the Action entity.
func (pu *ProfileUpdate) AddActions(a ...*Action) *ProfileUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddActionIDs(ids...)
}

// AddSquadIDs adds the "squad" edge to the Squad entity by IDs.
func (pu *ProfileUpdate) AddSquadIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.AddSquadIDs(ids...)
	return pu
}

// AddSquad adds the "squad" edges to the Squad entity.
func (pu *ProfileUpdate) AddSquad(s ...*Squad) *ProfileUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSquadIDs(ids...)
}

// AddSquadsOwnedIDs adds the "squads_owned" edge to the Squad entity by IDs.
func (pu *ProfileUpdate) AddSquadsOwnedIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.AddSquadsOwnedIDs(ids...)
	return pu
}

// AddSquadsOwned adds the "squads_owned" edges to the Squad entity.
func (pu *ProfileUpdate) AddSquadsOwned(s ...*Squad) *ProfileUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSquadsOwnedIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (pu *ProfileUpdate) AddInviteIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.AddInviteIDs(ids...)
	return pu
}

// AddInvites adds the "invites" edges to the Invite entity.
func (pu *ProfileUpdate) AddInvites(i ...*Invite) *ProfileUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.AddInviteIDs(ids...)
}

// AddInvitesSentIDs adds the "invites_sent" edge to the Invite entity by IDs.
func (pu *ProfileUpdate) AddInvitesSentIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.AddInvitesSentIDs(ids...)
	return pu
}

// AddInvitesSent adds the "invites_sent" edges to the Invite entity.
func (pu *ProfileUpdate) AddInvitesSent(i ...*Invite) *ProfileUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.AddInvitesSentIDs(ids...)
}

// AddWorkoutIDs adds the "workouts" edge to the Workout entity by IDs.
func (pu *ProfileUpdate) AddWorkoutIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.AddWorkoutIDs(ids...)
	return pu
}

// AddWorkouts adds the "workouts" edges to the Workout entity.
func (pu *ProfileUpdate) AddWorkouts(w ...*Workout) *ProfileUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return pu.AddWorkoutIDs(ids...)
}

// AddGoalIDs adds the "goals" edge to the Goal entity by IDs.
func (pu *ProfileUpdate) AddGoalIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.AddGoalIDs(ids...)
	return pu
}

// AddGoals adds the "goals" edges to the Goal entity.
func (pu *ProfileUpdate) AddGoals(g ...*Goal) *ProfileUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pu.AddGoalIDs(ids...)
}

// AddWorkoutDatumIDs adds the "workout_data" edge to the WorkoutData entity by IDs.
func (pu *ProfileUpdate) AddWorkoutDatumIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.AddWorkoutDatumIDs(ids...)
	return pu
}

// AddWorkoutData adds the "workout_data" edges to the WorkoutData entity.
func (pu *ProfileUpdate) AddWorkoutData(w ...*WorkoutData) *ProfileUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return pu.AddWorkoutDatumIDs(ids...)
}

// AddCompetitionResultIDs adds the "competition_results" edge to the CompetitionResult entity by IDs.
func (pu *ProfileUpdate) AddCompetitionResultIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.AddCompetitionResultIDs(ids...)
	return pu
}

// AddCompetitionResults adds the "competition_results" edges to the CompetitionResult entity.
func (pu *ProfileUpdate) AddCompetitionResults(c ...*CompetitionResult) *ProfileUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCompetitionResultIDs(ids...)
}

// Mutation returns the ProfileMutation object of the builder.
func (pu *ProfileUpdate) Mutation() *ProfileMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *ProfileUpdate) ClearUser() *ProfileUpdate {
	pu.mutation.ClearUser()
	return pu
}

// ClearFcmTokens clears all "fcm_tokens" edges to the FcmToken entity.
func (pu *ProfileUpdate) ClearFcmTokens() *ProfileUpdate {
	pu.mutation.ClearFcmTokens()
	return pu
}

// RemoveFcmTokenIDs removes the "fcm_tokens" edge to FcmToken entities by IDs.
func (pu *ProfileUpdate) RemoveFcmTokenIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.RemoveFcmTokenIDs(ids...)
	return pu
}

// RemoveFcmTokens removes "fcm_tokens" edges to FcmToken entities.
func (pu *ProfileUpdate) RemoveFcmTokens(f ...*FcmToken) *ProfileUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveFcmTokenIDs(ids...)
}

// ClearNotificationPreferences clears the "notification_preferences" edge to the NotificationPreferences entity.
func (pu *ProfileUpdate) ClearNotificationPreferences() *ProfileUpdate {
	pu.mutation.ClearNotificationPreferences()
	return pu
}

// ClearAppConfig clears the "app_config" edge to the AppConfig entity.
func (pu *ProfileUpdate) ClearAppConfig() *ProfileUpdate {
	pu.mutation.ClearAppConfig()
	return pu
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (pu *ProfileUpdate) ClearNotifications() *ProfileUpdate {
	pu.mutation.ClearNotifications()
	return pu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (pu *ProfileUpdate) RemoveNotificationIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.RemoveNotificationIDs(ids...)
	return pu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (pu *ProfileUpdate) RemoveNotifications(n ...*Notification) *ProfileUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.RemoveNotificationIDs(ids...)
}

// ClearCompetitions clears all "competitions" edges to the Competition entity.
func (pu *ProfileUpdate) ClearCompetitions() *ProfileUpdate {
	pu.mutation.ClearCompetitions()
	return pu
}

// RemoveCompetitionIDs removes the "competitions" edge to Competition entities by IDs.
func (pu *ProfileUpdate) RemoveCompetitionIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.RemoveCompetitionIDs(ids...)
	return pu
}

// RemoveCompetitions removes "competitions" edges to Competition entities.
func (pu *ProfileUpdate) RemoveCompetitions(c ...*Competition) *ProfileUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCompetitionIDs(ids...)
}

// ClearActions clears all "actions" edges to the Action entity.
func (pu *ProfileUpdate) ClearActions() *ProfileUpdate {
	pu.mutation.ClearActions()
	return pu
}

// RemoveActionIDs removes the "actions" edge to Action entities by IDs.
func (pu *ProfileUpdate) RemoveActionIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.RemoveActionIDs(ids...)
	return pu
}

// RemoveActions removes "actions" edges to Action entities.
func (pu *ProfileUpdate) RemoveActions(a ...*Action) *ProfileUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveActionIDs(ids...)
}

// ClearSquad clears all "squad" edges to the Squad entity.
func (pu *ProfileUpdate) ClearSquad() *ProfileUpdate {
	pu.mutation.ClearSquad()
	return pu
}

// RemoveSquadIDs removes the "squad" edge to Squad entities by IDs.
func (pu *ProfileUpdate) RemoveSquadIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.RemoveSquadIDs(ids...)
	return pu
}

// RemoveSquad removes "squad" edges to Squad entities.
func (pu *ProfileUpdate) RemoveSquad(s ...*Squad) *ProfileUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSquadIDs(ids...)
}

// ClearSquadsOwned clears all "squads_owned" edges to the Squad entity.
func (pu *ProfileUpdate) ClearSquadsOwned() *ProfileUpdate {
	pu.mutation.ClearSquadsOwned()
	return pu
}

// RemoveSquadsOwnedIDs removes the "squads_owned" edge to Squad entities by IDs.
func (pu *ProfileUpdate) RemoveSquadsOwnedIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.RemoveSquadsOwnedIDs(ids...)
	return pu
}

// RemoveSquadsOwned removes "squads_owned" edges to Squad entities.
func (pu *ProfileUpdate) RemoveSquadsOwned(s ...*Squad) *ProfileUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSquadsOwnedIDs(ids...)
}

// ClearInvites clears all "invites" edges to the Invite entity.
func (pu *ProfileUpdate) ClearInvites() *ProfileUpdate {
	pu.mutation.ClearInvites()
	return pu
}

// RemoveInviteIDs removes the "invites" edge to Invite entities by IDs.
func (pu *ProfileUpdate) RemoveInviteIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.RemoveInviteIDs(ids...)
	return pu
}

// RemoveInvites removes "invites" edges to Invite entities.
func (pu *ProfileUpdate) RemoveInvites(i ...*Invite) *ProfileUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.RemoveInviteIDs(ids...)
}

// ClearInvitesSent clears all "invites_sent" edges to the Invite entity.
func (pu *ProfileUpdate) ClearInvitesSent() *ProfileUpdate {
	pu.mutation.ClearInvitesSent()
	return pu
}

// RemoveInvitesSentIDs removes the "invites_sent" edge to Invite entities by IDs.
func (pu *ProfileUpdate) RemoveInvitesSentIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.RemoveInvitesSentIDs(ids...)
	return pu
}

// RemoveInvitesSent removes "invites_sent" edges to Invite entities.
func (pu *ProfileUpdate) RemoveInvitesSent(i ...*Invite) *ProfileUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.RemoveInvitesSentIDs(ids...)
}

// ClearWorkouts clears all "workouts" edges to the Workout entity.
func (pu *ProfileUpdate) ClearWorkouts() *ProfileUpdate {
	pu.mutation.ClearWorkouts()
	return pu
}

// RemoveWorkoutIDs removes the "workouts" edge to Workout entities by IDs.
func (pu *ProfileUpdate) RemoveWorkoutIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.RemoveWorkoutIDs(ids...)
	return pu
}

// RemoveWorkouts removes "workouts" edges to Workout entities.
func (pu *ProfileUpdate) RemoveWorkouts(w ...*Workout) *ProfileUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return pu.RemoveWorkoutIDs(ids...)
}

// ClearGoals clears all "goals" edges to the Goal entity.
func (pu *ProfileUpdate) ClearGoals() *ProfileUpdate {
	pu.mutation.ClearGoals()
	return pu
}

// RemoveGoalIDs removes the "goals" edge to Goal entities by IDs.
func (pu *ProfileUpdate) RemoveGoalIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.RemoveGoalIDs(ids...)
	return pu
}

// RemoveGoals removes "goals" edges to Goal entities.
func (pu *ProfileUpdate) RemoveGoals(g ...*Goal) *ProfileUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pu.RemoveGoalIDs(ids...)
}

// ClearWorkoutData clears all "workout_data" edges to the WorkoutData entity.
func (pu *ProfileUpdate) ClearWorkoutData() *ProfileUpdate {
	pu.mutation.ClearWorkoutData()
	return pu
}

// RemoveWorkoutDatumIDs removes the "workout_data" edge to WorkoutData entities by IDs.
func (pu *ProfileUpdate) RemoveWorkoutDatumIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.RemoveWorkoutDatumIDs(ids...)
	return pu
}

// RemoveWorkoutData removes "workout_data" edges to WorkoutData entities.
func (pu *ProfileUpdate) RemoveWorkoutData(w ...*WorkoutData) *ProfileUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return pu.RemoveWorkoutDatumIDs(ids...)
}

// ClearCompetitionResults clears all "competition_results" edges to the CompetitionResult entity.
func (pu *ProfileUpdate) ClearCompetitionResults() *ProfileUpdate {
	pu.mutation.ClearCompetitionResults()
	return pu
}

// RemoveCompetitionResultIDs removes the "competition_results" edge to CompetitionResult entities by IDs.
func (pu *ProfileUpdate) RemoveCompetitionResultIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.RemoveCompetitionResultIDs(ids...)
	return pu
}

// RemoveCompetitionResults removes "competition_results" edges to CompetitionResult entities.
func (pu *ProfileUpdate) RemoveCompetitionResults(c ...*CompetitionResult) *ProfileUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCompetitionResultIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProfileUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProfileUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProfileUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProfileUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if profile.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized profile.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := profile.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProfileUpdate) check() error {
	if _, ok := pu.mutation.UserID(); pu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Profile.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *ProfileUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProfileUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *ProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Public(); ok {
		_spec.SetField(profile.FieldPublic, field.TypeBool, value)
	}
	if value, ok := pu.mutation.FirstName(); ok {
		_spec.SetField(profile.FieldFirstName, field.TypeString, value)
	}
	if value, ok := pu.mutation.LastName(); ok {
		_spec.SetField(profile.FieldLastName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Picture(); ok {
		_spec.SetField(profile.FieldPicture, field.TypeString, value)
	}
	if pu.mutation.PictureCleared() {
		_spec.ClearField(profile.FieldPicture, field.TypeString)
	}
	if value, ok := pu.mutation.Birthday(); ok {
		_spec.SetField(profile.FieldBirthday, field.TypeTime, value)
	}
	if pu.mutation.BirthdayCleared() {
		_spec.ClearField(profile.FieldBirthday, field.TypeTime)
	}
	if value, ok := pu.mutation.OnboardingCompleted(); ok {
		_spec.SetField(profile.FieldOnboardingCompleted, field.TypeBool, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FcmTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.FcmTokensTable,
			Columns: []string{profile.FcmTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fcmtoken.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFcmTokensIDs(); len(nodes) > 0 && !pu.mutation.FcmTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.FcmTokensTable,
			Columns: []string{profile.FcmTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fcmtoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FcmTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.FcmTokensTable,
			Columns: []string{profile.FcmTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fcmtoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NotificationPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   profile.NotificationPreferencesTable,
			Columns: []string{profile.NotificationPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationpreferences.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NotificationPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   profile.NotificationPreferencesTable,
			Columns: []string{profile.NotificationPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationpreferences.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AppConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.AppConfigTable,
			Columns: []string{profile.AppConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appconfig.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AppConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.AppConfigTable,
			Columns: []string{profile.AppConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationsTable,
			Columns: []string{profile.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !pu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationsTable,
			Columns: []string{profile.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationsTable,
			Columns: []string{profile.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CompetitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.CompetitionsTable,
			Columns: profile.CompetitionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCompetitionsIDs(); len(nodes) > 0 && !pu.mutation.CompetitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.CompetitionsTable,
			Columns: profile.CompetitionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CompetitionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.CompetitionsTable,
			Columns: profile.CompetitionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.ActionsTable,
			Columns: []string{profile.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(action.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedActionsIDs(); len(nodes) > 0 && !pu.mutation.ActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.ActionsTable,
			Columns: []string{profile.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(action.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.ActionsTable,
			Columns: []string{profile.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(action.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.SquadTable,
			Columns: profile.SquadPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSquadIDs(); len(nodes) > 0 && !pu.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.SquadTable,
			Columns: profile.SquadPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.SquadTable,
			Columns: profile.SquadPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SquadsOwnedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.SquadsOwnedTable,
			Columns: []string{profile.SquadsOwnedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSquadsOwnedIDs(); len(nodes) > 0 && !pu.mutation.SquadsOwnedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.SquadsOwnedTable,
			Columns: []string{profile.SquadsOwnedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SquadsOwnedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.SquadsOwnedTable,
			Columns: []string{profile.SquadsOwnedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.InvitesTable,
			Columns: []string{profile.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !pu.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.InvitesTable,
			Columns: []string{profile.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.InvitesTable,
			Columns: []string{profile.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.InvitesSentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.InvitesSentTable,
			Columns: []string{profile.InvitesSentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedInvitesSentIDs(); len(nodes) > 0 && !pu.mutation.InvitesSentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.InvitesSentTable,
			Columns: []string{profile.InvitesSentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.InvitesSentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.InvitesSentTable,
			Columns: []string{profile.InvitesSentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.WorkoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.WorkoutsTable,
			Columns: []string{profile.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedWorkoutsIDs(); len(nodes) > 0 && !pu.mutation.WorkoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.WorkoutsTable,
			Columns: []string{profile.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.WorkoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.WorkoutsTable,
			Columns: []string{profile.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.GoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.GoalsTable,
			Columns: []string{profile.GoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedGoalsIDs(); len(nodes) > 0 && !pu.mutation.GoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.GoalsTable,
			Columns: []string{profile.GoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.GoalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.GoalsTable,
			Columns: []string{profile.GoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.WorkoutDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.WorkoutDataTable,
			Columns: []string{profile.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedWorkoutDataIDs(); len(nodes) > 0 && !pu.mutation.WorkoutDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.WorkoutDataTable,
			Columns: []string{profile.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.WorkoutDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.WorkoutDataTable,
			Columns: []string{profile.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CompetitionResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.CompetitionResultsTable,
			Columns: []string{profile.CompetitionResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCompetitionResultsIDs(); len(nodes) > 0 && !pu.mutation.CompetitionResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.CompetitionResultsTable,
			Columns: []string{profile.CompetitionResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CompetitionResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.CompetitionResultsTable,
			Columns: []string{profile.CompetitionResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProfileUpdateOne is the builder for updating a single Profile entity.
type ProfileUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProfileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProfileUpdateOne) SetUpdatedAt(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetPublic sets the "public" field.
func (puo *ProfileUpdateOne) SetPublic(b bool) *ProfileUpdateOne {
	puo.mutation.SetPublic(b)
	return puo
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillablePublic(b *bool) *ProfileUpdateOne {
	if b != nil {
		puo.SetPublic(*b)
	}
	return puo
}

// SetFirstName sets the "first_name" field.
func (puo *ProfileUpdateOne) SetFirstName(s string) *ProfileUpdateOne {
	puo.mutation.SetFirstName(s)
	return puo
}

// SetLastName sets the "last_name" field.
func (puo *ProfileUpdateOne) SetLastName(s string) *ProfileUpdateOne {
	puo.mutation.SetLastName(s)
	return puo
}

// SetPicture sets the "picture" field.
func (puo *ProfileUpdateOne) SetPicture(s string) *ProfileUpdateOne {
	puo.mutation.SetPicture(s)
	return puo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillablePicture(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetPicture(*s)
	}
	return puo
}

// ClearPicture clears the value of the "picture" field.
func (puo *ProfileUpdateOne) ClearPicture() *ProfileUpdateOne {
	puo.mutation.ClearPicture()
	return puo
}

// SetBirthday sets the "birthday" field.
func (puo *ProfileUpdateOne) SetBirthday(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetBirthday(t)
	return puo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableBirthday(t *time.Time) *ProfileUpdateOne {
	if t != nil {
		puo.SetBirthday(*t)
	}
	return puo
}

// ClearBirthday clears the value of the "birthday" field.
func (puo *ProfileUpdateOne) ClearBirthday() *ProfileUpdateOne {
	puo.mutation.ClearBirthday()
	return puo
}

// SetOnboardingCompleted sets the "onboarding_completed" field.
func (puo *ProfileUpdateOne) SetOnboardingCompleted(b bool) *ProfileUpdateOne {
	puo.mutation.SetOnboardingCompleted(b)
	return puo
}

// SetNillableOnboardingCompleted sets the "onboarding_completed" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableOnboardingCompleted(b *bool) *ProfileUpdateOne {
	if b != nil {
		puo.SetOnboardingCompleted(*b)
	}
	return puo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *ProfileUpdateOne) SetUserID(id uuid.UUID) *ProfileUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *ProfileUpdateOne) SetUser(u *User) *ProfileUpdateOne {
	return puo.SetUserID(u.ID)
}

// AddFcmTokenIDs adds the "fcm_tokens" edge to the FcmToken entity by IDs.
func (puo *ProfileUpdateOne) AddFcmTokenIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.AddFcmTokenIDs(ids...)
	return puo
}

// AddFcmTokens adds the "fcm_tokens" edges to the FcmToken entity.
func (puo *ProfileUpdateOne) AddFcmTokens(f ...*FcmToken) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddFcmTokenIDs(ids...)
}

// SetNotificationPreferencesID sets the "notification_preferences" edge to the NotificationPreferences entity by ID.
func (puo *ProfileUpdateOne) SetNotificationPreferencesID(id uuid.UUID) *ProfileUpdateOne {
	puo.mutation.SetNotificationPreferencesID(id)
	return puo
}

// SetNillableNotificationPreferencesID sets the "notification_preferences" edge to the NotificationPreferences entity by ID if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableNotificationPreferencesID(id *uuid.UUID) *ProfileUpdateOne {
	if id != nil {
		puo = puo.SetNotificationPreferencesID(*id)
	}
	return puo
}

// SetNotificationPreferences sets the "notification_preferences" edge to the NotificationPreferences entity.
func (puo *ProfileUpdateOne) SetNotificationPreferences(n *NotificationPreferences) *ProfileUpdateOne {
	return puo.SetNotificationPreferencesID(n.ID)
}

// SetAppConfigID sets the "app_config" edge to the AppConfig entity by ID.
func (puo *ProfileUpdateOne) SetAppConfigID(id uuid.UUID) *ProfileUpdateOne {
	puo.mutation.SetAppConfigID(id)
	return puo
}

// SetNillableAppConfigID sets the "app_config" edge to the AppConfig entity by ID if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableAppConfigID(id *uuid.UUID) *ProfileUpdateOne {
	if id != nil {
		puo = puo.SetAppConfigID(*id)
	}
	return puo
}

// SetAppConfig sets the "app_config" edge to the AppConfig entity.
func (puo *ProfileUpdateOne) SetAppConfig(a *AppConfig) *ProfileUpdateOne {
	return puo.SetAppConfigID(a.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (puo *ProfileUpdateOne) AddNotificationIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.AddNotificationIDs(ids...)
	return puo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (puo *ProfileUpdateOne) AddNotifications(n ...*Notification) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.AddNotificationIDs(ids...)
}

// AddCompetitionIDs adds the "competitions" edge to the Competition entity by IDs.
func (puo *ProfileUpdateOne) AddCompetitionIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.AddCompetitionIDs(ids...)
	return puo
}

// AddCompetitions adds the "competitions" edges to the Competition entity.
func (puo *ProfileUpdateOne) AddCompetitions(c ...*Competition) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCompetitionIDs(ids...)
}

// AddActionIDs adds the "actions" edge to the Action entity by IDs.
func (puo *ProfileUpdateOne) AddActionIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.AddActionIDs(ids...)
	return puo
}

// AddActions adds the "actions" edges to the Action entity.
func (puo *ProfileUpdateOne) AddActions(a ...*Action) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddActionIDs(ids...)
}

// AddSquadIDs adds the "squad" edge to the Squad entity by IDs.
func (puo *ProfileUpdateOne) AddSquadIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.AddSquadIDs(ids...)
	return puo
}

// AddSquad adds the "squad" edges to the Squad entity.
func (puo *ProfileUpdateOne) AddSquad(s ...*Squad) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSquadIDs(ids...)
}

// AddSquadsOwnedIDs adds the "squads_owned" edge to the Squad entity by IDs.
func (puo *ProfileUpdateOne) AddSquadsOwnedIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.AddSquadsOwnedIDs(ids...)
	return puo
}

// AddSquadsOwned adds the "squads_owned" edges to the Squad entity.
func (puo *ProfileUpdateOne) AddSquadsOwned(s ...*Squad) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSquadsOwnedIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (puo *ProfileUpdateOne) AddInviteIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.AddInviteIDs(ids...)
	return puo
}

// AddInvites adds the "invites" edges to the Invite entity.
func (puo *ProfileUpdateOne) AddInvites(i ...*Invite) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.AddInviteIDs(ids...)
}

// AddInvitesSentIDs adds the "invites_sent" edge to the Invite entity by IDs.
func (puo *ProfileUpdateOne) AddInvitesSentIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.AddInvitesSentIDs(ids...)
	return puo
}

// AddInvitesSent adds the "invites_sent" edges to the Invite entity.
func (puo *ProfileUpdateOne) AddInvitesSent(i ...*Invite) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.AddInvitesSentIDs(ids...)
}

// AddWorkoutIDs adds the "workouts" edge to the Workout entity by IDs.
func (puo *ProfileUpdateOne) AddWorkoutIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.AddWorkoutIDs(ids...)
	return puo
}

// AddWorkouts adds the "workouts" edges to the Workout entity.
func (puo *ProfileUpdateOne) AddWorkouts(w ...*Workout) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return puo.AddWorkoutIDs(ids...)
}

// AddGoalIDs adds the "goals" edge to the Goal entity by IDs.
func (puo *ProfileUpdateOne) AddGoalIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.AddGoalIDs(ids...)
	return puo
}

// AddGoals adds the "goals" edges to the Goal entity.
func (puo *ProfileUpdateOne) AddGoals(g ...*Goal) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return puo.AddGoalIDs(ids...)
}

// AddWorkoutDatumIDs adds the "workout_data" edge to the WorkoutData entity by IDs.
func (puo *ProfileUpdateOne) AddWorkoutDatumIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.AddWorkoutDatumIDs(ids...)
	return puo
}

// AddWorkoutData adds the "workout_data" edges to the WorkoutData entity.
func (puo *ProfileUpdateOne) AddWorkoutData(w ...*WorkoutData) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return puo.AddWorkoutDatumIDs(ids...)
}

// AddCompetitionResultIDs adds the "competition_results" edge to the CompetitionResult entity by IDs.
func (puo *ProfileUpdateOne) AddCompetitionResultIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.AddCompetitionResultIDs(ids...)
	return puo
}

// AddCompetitionResults adds the "competition_results" edges to the CompetitionResult entity.
func (puo *ProfileUpdateOne) AddCompetitionResults(c ...*CompetitionResult) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCompetitionResultIDs(ids...)
}

// Mutation returns the ProfileMutation object of the builder.
func (puo *ProfileUpdateOne) Mutation() *ProfileMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *ProfileUpdateOne) ClearUser() *ProfileUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// ClearFcmTokens clears all "fcm_tokens" edges to the FcmToken entity.
func (puo *ProfileUpdateOne) ClearFcmTokens() *ProfileUpdateOne {
	puo.mutation.ClearFcmTokens()
	return puo
}

// RemoveFcmTokenIDs removes the "fcm_tokens" edge to FcmToken entities by IDs.
func (puo *ProfileUpdateOne) RemoveFcmTokenIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.RemoveFcmTokenIDs(ids...)
	return puo
}

// RemoveFcmTokens removes "fcm_tokens" edges to FcmToken entities.
func (puo *ProfileUpdateOne) RemoveFcmTokens(f ...*FcmToken) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveFcmTokenIDs(ids...)
}

// ClearNotificationPreferences clears the "notification_preferences" edge to the NotificationPreferences entity.
func (puo *ProfileUpdateOne) ClearNotificationPreferences() *ProfileUpdateOne {
	puo.mutation.ClearNotificationPreferences()
	return puo
}

// ClearAppConfig clears the "app_config" edge to the AppConfig entity.
func (puo *ProfileUpdateOne) ClearAppConfig() *ProfileUpdateOne {
	puo.mutation.ClearAppConfig()
	return puo
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (puo *ProfileUpdateOne) ClearNotifications() *ProfileUpdateOne {
	puo.mutation.ClearNotifications()
	return puo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (puo *ProfileUpdateOne) RemoveNotificationIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.RemoveNotificationIDs(ids...)
	return puo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (puo *ProfileUpdateOne) RemoveNotifications(n ...*Notification) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.RemoveNotificationIDs(ids...)
}

// ClearCompetitions clears all "competitions" edges to the Competition entity.
func (puo *ProfileUpdateOne) ClearCompetitions() *ProfileUpdateOne {
	puo.mutation.ClearCompetitions()
	return puo
}

// RemoveCompetitionIDs removes the "competitions" edge to Competition entities by IDs.
func (puo *ProfileUpdateOne) RemoveCompetitionIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.RemoveCompetitionIDs(ids...)
	return puo
}

// RemoveCompetitions removes "competitions" edges to Competition entities.
func (puo *ProfileUpdateOne) RemoveCompetitions(c ...*Competition) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCompetitionIDs(ids...)
}

// ClearActions clears all "actions" edges to the Action entity.
func (puo *ProfileUpdateOne) ClearActions() *ProfileUpdateOne {
	puo.mutation.ClearActions()
	return puo
}

// RemoveActionIDs removes the "actions" edge to Action entities by IDs.
func (puo *ProfileUpdateOne) RemoveActionIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.RemoveActionIDs(ids...)
	return puo
}

// RemoveActions removes "actions" edges to Action entities.
func (puo *ProfileUpdateOne) RemoveActions(a ...*Action) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveActionIDs(ids...)
}

// ClearSquad clears all "squad" edges to the Squad entity.
func (puo *ProfileUpdateOne) ClearSquad() *ProfileUpdateOne {
	puo.mutation.ClearSquad()
	return puo
}

// RemoveSquadIDs removes the "squad" edge to Squad entities by IDs.
func (puo *ProfileUpdateOne) RemoveSquadIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.RemoveSquadIDs(ids...)
	return puo
}

// RemoveSquad removes "squad" edges to Squad entities.
func (puo *ProfileUpdateOne) RemoveSquad(s ...*Squad) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSquadIDs(ids...)
}

// ClearSquadsOwned clears all "squads_owned" edges to the Squad entity.
func (puo *ProfileUpdateOne) ClearSquadsOwned() *ProfileUpdateOne {
	puo.mutation.ClearSquadsOwned()
	return puo
}

// RemoveSquadsOwnedIDs removes the "squads_owned" edge to Squad entities by IDs.
func (puo *ProfileUpdateOne) RemoveSquadsOwnedIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.RemoveSquadsOwnedIDs(ids...)
	return puo
}

// RemoveSquadsOwned removes "squads_owned" edges to Squad entities.
func (puo *ProfileUpdateOne) RemoveSquadsOwned(s ...*Squad) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSquadsOwnedIDs(ids...)
}

// ClearInvites clears all "invites" edges to the Invite entity.
func (puo *ProfileUpdateOne) ClearInvites() *ProfileUpdateOne {
	puo.mutation.ClearInvites()
	return puo
}

// RemoveInviteIDs removes the "invites" edge to Invite entities by IDs.
func (puo *ProfileUpdateOne) RemoveInviteIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.RemoveInviteIDs(ids...)
	return puo
}

// RemoveInvites removes "invites" edges to Invite entities.
func (puo *ProfileUpdateOne) RemoveInvites(i ...*Invite) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.RemoveInviteIDs(ids...)
}

// ClearInvitesSent clears all "invites_sent" edges to the Invite entity.
func (puo *ProfileUpdateOne) ClearInvitesSent() *ProfileUpdateOne {
	puo.mutation.ClearInvitesSent()
	return puo
}

// RemoveInvitesSentIDs removes the "invites_sent" edge to Invite entities by IDs.
func (puo *ProfileUpdateOne) RemoveInvitesSentIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.RemoveInvitesSentIDs(ids...)
	return puo
}

// RemoveInvitesSent removes "invites_sent" edges to Invite entities.
func (puo *ProfileUpdateOne) RemoveInvitesSent(i ...*Invite) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.RemoveInvitesSentIDs(ids...)
}

// ClearWorkouts clears all "workouts" edges to the Workout entity.
func (puo *ProfileUpdateOne) ClearWorkouts() *ProfileUpdateOne {
	puo.mutation.ClearWorkouts()
	return puo
}

// RemoveWorkoutIDs removes the "workouts" edge to Workout entities by IDs.
func (puo *ProfileUpdateOne) RemoveWorkoutIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.RemoveWorkoutIDs(ids...)
	return puo
}

// RemoveWorkouts removes "workouts" edges to Workout entities.
func (puo *ProfileUpdateOne) RemoveWorkouts(w ...*Workout) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return puo.RemoveWorkoutIDs(ids...)
}

// ClearGoals clears all "goals" edges to the Goal entity.
func (puo *ProfileUpdateOne) ClearGoals() *ProfileUpdateOne {
	puo.mutation.ClearGoals()
	return puo
}

// RemoveGoalIDs removes the "goals" edge to Goal entities by IDs.
func (puo *ProfileUpdateOne) RemoveGoalIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.RemoveGoalIDs(ids...)
	return puo
}

// RemoveGoals removes "goals" edges to Goal entities.
func (puo *ProfileUpdateOne) RemoveGoals(g ...*Goal) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return puo.RemoveGoalIDs(ids...)
}

// ClearWorkoutData clears all "workout_data" edges to the WorkoutData entity.
func (puo *ProfileUpdateOne) ClearWorkoutData() *ProfileUpdateOne {
	puo.mutation.ClearWorkoutData()
	return puo
}

// RemoveWorkoutDatumIDs removes the "workout_data" edge to WorkoutData entities by IDs.
func (puo *ProfileUpdateOne) RemoveWorkoutDatumIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.RemoveWorkoutDatumIDs(ids...)
	return puo
}

// RemoveWorkoutData removes "workout_data" edges to WorkoutData entities.
func (puo *ProfileUpdateOne) RemoveWorkoutData(w ...*WorkoutData) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return puo.RemoveWorkoutDatumIDs(ids...)
}

// ClearCompetitionResults clears all "competition_results" edges to the CompetitionResult entity.
func (puo *ProfileUpdateOne) ClearCompetitionResults() *ProfileUpdateOne {
	puo.mutation.ClearCompetitionResults()
	return puo
}

// RemoveCompetitionResultIDs removes the "competition_results" edge to CompetitionResult entities by IDs.
func (puo *ProfileUpdateOne) RemoveCompetitionResultIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.RemoveCompetitionResultIDs(ids...)
	return puo
}

// RemoveCompetitionResults removes "competition_results" edges to CompetitionResult entities.
func (puo *ProfileUpdateOne) RemoveCompetitionResults(c ...*CompetitionResult) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCompetitionResultIDs(ids...)
}

// Where appends a list predicates to the ProfileUpdate builder.
func (puo *ProfileUpdateOne) Where(ps ...predicate.Profile) *ProfileUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProfileUpdateOne) Select(field string, fields ...string) *ProfileUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Profile entity.
func (puo *ProfileUpdateOne) Save(ctx context.Context) (*Profile, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProfileUpdateOne) SaveX(ctx context.Context) *Profile {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProfileUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProfileUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if profile.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized profile.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := profile.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProfileUpdateOne) check() error {
	if _, ok := puo.mutation.UserID(); puo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Profile.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *ProfileUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProfileUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *ProfileUpdateOne) sqlSave(ctx context.Context) (_node *Profile, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Profile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profile.FieldID)
		for _, f := range fields {
			if !profile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Public(); ok {
		_spec.SetField(profile.FieldPublic, field.TypeBool, value)
	}
	if value, ok := puo.mutation.FirstName(); ok {
		_spec.SetField(profile.FieldFirstName, field.TypeString, value)
	}
	if value, ok := puo.mutation.LastName(); ok {
		_spec.SetField(profile.FieldLastName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Picture(); ok {
		_spec.SetField(profile.FieldPicture, field.TypeString, value)
	}
	if puo.mutation.PictureCleared() {
		_spec.ClearField(profile.FieldPicture, field.TypeString)
	}
	if value, ok := puo.mutation.Birthday(); ok {
		_spec.SetField(profile.FieldBirthday, field.TypeTime, value)
	}
	if puo.mutation.BirthdayCleared() {
		_spec.ClearField(profile.FieldBirthday, field.TypeTime)
	}
	if value, ok := puo.mutation.OnboardingCompleted(); ok {
		_spec.SetField(profile.FieldOnboardingCompleted, field.TypeBool, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FcmTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.FcmTokensTable,
			Columns: []string{profile.FcmTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fcmtoken.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFcmTokensIDs(); len(nodes) > 0 && !puo.mutation.FcmTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.FcmTokensTable,
			Columns: []string{profile.FcmTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fcmtoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FcmTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.FcmTokensTable,
			Columns: []string{profile.FcmTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fcmtoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NotificationPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   profile.NotificationPreferencesTable,
			Columns: []string{profile.NotificationPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationpreferences.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NotificationPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   profile.NotificationPreferencesTable,
			Columns: []string{profile.NotificationPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationpreferences.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AppConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.AppConfigTable,
			Columns: []string{profile.AppConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appconfig.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AppConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.AppConfigTable,
			Columns: []string{profile.AppConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationsTable,
			Columns: []string{profile.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !puo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationsTable,
			Columns: []string{profile.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationsTable,
			Columns: []string{profile.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CompetitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.CompetitionsTable,
			Columns: profile.CompetitionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCompetitionsIDs(); len(nodes) > 0 && !puo.mutation.CompetitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.CompetitionsTable,
			Columns: profile.CompetitionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CompetitionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.CompetitionsTable,
			Columns: profile.CompetitionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.ActionsTable,
			Columns: []string{profile.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(action.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedActionsIDs(); len(nodes) > 0 && !puo.mutation.ActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.ActionsTable,
			Columns: []string{profile.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(action.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.ActionsTable,
			Columns: []string{profile.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(action.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.SquadTable,
			Columns: profile.SquadPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSquadIDs(); len(nodes) > 0 && !puo.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.SquadTable,
			Columns: profile.SquadPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.SquadTable,
			Columns: profile.SquadPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SquadsOwnedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.SquadsOwnedTable,
			Columns: []string{profile.SquadsOwnedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSquadsOwnedIDs(); len(nodes) > 0 && !puo.mutation.SquadsOwnedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.SquadsOwnedTable,
			Columns: []string{profile.SquadsOwnedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SquadsOwnedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.SquadsOwnedTable,
			Columns: []string{profile.SquadsOwnedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.InvitesTable,
			Columns: []string{profile.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !puo.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.InvitesTable,
			Columns: []string{profile.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.InvitesTable,
			Columns: []string{profile.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.InvitesSentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.InvitesSentTable,
			Columns: []string{profile.InvitesSentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedInvitesSentIDs(); len(nodes) > 0 && !puo.mutation.InvitesSentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.InvitesSentTable,
			Columns: []string{profile.InvitesSentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.InvitesSentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.InvitesSentTable,
			Columns: []string{profile.InvitesSentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.WorkoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.WorkoutsTable,
			Columns: []string{profile.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedWorkoutsIDs(); len(nodes) > 0 && !puo.mutation.WorkoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.WorkoutsTable,
			Columns: []string{profile.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.WorkoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.WorkoutsTable,
			Columns: []string{profile.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.GoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.GoalsTable,
			Columns: []string{profile.GoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedGoalsIDs(); len(nodes) > 0 && !puo.mutation.GoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.GoalsTable,
			Columns: []string{profile.GoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.GoalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.GoalsTable,
			Columns: []string{profile.GoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.WorkoutDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.WorkoutDataTable,
			Columns: []string{profile.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedWorkoutDataIDs(); len(nodes) > 0 && !puo.mutation.WorkoutDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.WorkoutDataTable,
			Columns: []string{profile.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.WorkoutDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.WorkoutDataTable,
			Columns: []string{profile.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CompetitionResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.CompetitionResultsTable,
			Columns: []string{profile.CompetitionResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCompetitionResultsIDs(); len(nodes) > 0 && !puo.mutation.CompetitionResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.CompetitionResultsTable,
			Columns: []string{profile.CompetitionResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CompetitionResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.CompetitionResultsTable,
			Columns: []string{profile.CompetitionResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Profile{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
