// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competition"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competitionresult"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/predicate"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workout"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutdata"
)

// CompetitionUpdate is the builder for updating Competition entities.
type CompetitionUpdate struct {
	config
	hooks     []Hook
	mutation  *CompetitionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CompetitionUpdate builder.
func (cu *CompetitionUpdate) Where(ps ...predicate.Competition) *CompetitionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CompetitionUpdate) SetUpdatedAt(t time.Time) *CompetitionUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetPublic sets the "public" field.
func (cu *CompetitionUpdate) SetPublic(b bool) *CompetitionUpdate {
	cu.mutation.SetPublic(b)
	return cu
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (cu *CompetitionUpdate) SetNillablePublic(b *bool) *CompetitionUpdate {
	if b != nil {
		cu.SetPublic(*b)
	}
	return cu
}

// SetTitle sets the "title" field.
func (cu *CompetitionUpdate) SetTitle(s string) *CompetitionUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetDescription sets the "description" field.
func (cu *CompetitionUpdate) SetDescription(s string) *CompetitionUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetStart sets the "start" field.
func (cu *CompetitionUpdate) SetStart(t time.Time) *CompetitionUpdate {
	cu.mutation.SetStart(t)
	return cu
}

// SetEnd sets the "end" field.
func (cu *CompetitionUpdate) SetEnd(t time.Time) *CompetitionUpdate {
	cu.mutation.SetEnd(t)
	return cu
}

// SetScheduled sets the "scheduled" field.
func (cu *CompetitionUpdate) SetScheduled(b bool) *CompetitionUpdate {
	cu.mutation.SetScheduled(b)
	return cu
}

// SetNillableScheduled sets the "scheduled" field if the given value is not nil.
func (cu *CompetitionUpdate) SetNillableScheduled(b *bool) *CompetitionUpdate {
	if b != nil {
		cu.SetScheduled(*b)
	}
	return cu
}

// SetStatus sets the "status" field.
func (cu *CompetitionUpdate) SetStatus(s string) *CompetitionUpdate {
	cu.mutation.SetStatus(s)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CompetitionUpdate) SetNillableStatus(s *string) *CompetitionUpdate {
	if s != nil {
		cu.SetStatus(*s)
	}
	return cu
}

// SetParticipantTypes sets the "participant_types" field.
func (cu *CompetitionUpdate) SetParticipantTypes(s []string) *CompetitionUpdate {
	cu.mutation.SetParticipantTypes(s)
	return cu
}

// AppendParticipantTypes appends s to the "participant_types" field.
func (cu *CompetitionUpdate) AppendParticipantTypes(s []string) *CompetitionUpdate {
	cu.mutation.AppendParticipantTypes(s)
	return cu
}

// ClearParticipantTypes clears the value of the "participant_types" field.
func (cu *CompetitionUpdate) ClearParticipantTypes() *CompetitionUpdate {
	cu.mutation.ClearParticipantTypes()
	return cu
}

// SetWorkoutTypes sets the "workout_types" field.
func (cu *CompetitionUpdate) SetWorkoutTypes(s []string) *CompetitionUpdate {
	cu.mutation.SetWorkoutTypes(s)
	return cu
}

// AppendWorkoutTypes appends s to the "workout_types" field.
func (cu *CompetitionUpdate) AppendWorkoutTypes(s []string) *CompetitionUpdate {
	cu.mutation.AppendWorkoutTypes(s)
	return cu
}

// ClearWorkoutTypes clears the value of the "workout_types" field.
func (cu *CompetitionUpdate) ClearWorkoutTypes() *CompetitionUpdate {
	cu.mutation.ClearWorkoutTypes()
	return cu
}

// SetType sets the "type" field.
func (cu *CompetitionUpdate) SetType(s string) *CompetitionUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CompetitionUpdate) SetNillableType(s *string) *CompetitionUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// SetOwnerID sets the "owner" edge to the Profile entity by ID.
func (cu *CompetitionUpdate) SetOwnerID(id uuid.UUID) *CompetitionUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetOwner sets the "owner" edge to the Profile entity.
func (cu *CompetitionUpdate) SetOwner(p *Profile) *CompetitionUpdate {
	return cu.SetOwnerID(p.ID)
}

// AddParticipantIDs adds the "participants" edge to the Profile entity by IDs.
func (cu *CompetitionUpdate) AddParticipantIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.AddParticipantIDs(ids...)
	return cu
}

// AddParticipants adds the "participants" edges to the Profile entity.
func (cu *CompetitionUpdate) AddParticipants(p ...*Profile) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddParticipantIDs(ids...)
}

// AddWorkoutIDs adds the "workouts" edge to the Workout entity by IDs.
func (cu *CompetitionUpdate) AddWorkoutIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.AddWorkoutIDs(ids...)
	return cu
}

// AddWorkouts adds the "workouts" edges to the Workout entity.
func (cu *CompetitionUpdate) AddWorkouts(w ...*Workout) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.AddWorkoutIDs(ids...)
}

// AddWorkoutDatumIDs adds the "workout_data" edge to the WorkoutData entity by IDs.
func (cu *CompetitionUpdate) AddWorkoutDatumIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.AddWorkoutDatumIDs(ids...)
	return cu
}

// AddWorkoutData adds the "workout_data" edges to the WorkoutData entity.
func (cu *CompetitionUpdate) AddWorkoutData(w ...*WorkoutData) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.AddWorkoutDatumIDs(ids...)
}

// AddResultIDs adds the "results" edge to the CompetitionResult entity by IDs.
func (cu *CompetitionUpdate) AddResultIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.AddResultIDs(ids...)
	return cu
}

// AddResults adds the "results" edges to the CompetitionResult entity.
func (cu *CompetitionUpdate) AddResults(c ...*CompetitionResult) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddResultIDs(ids...)
}

// Mutation returns the CompetitionMutation object of the builder.
func (cu *CompetitionUpdate) Mutation() *CompetitionMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the Profile entity.
func (cu *CompetitionUpdate) ClearOwner() *CompetitionUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// ClearParticipants clears all "participants" edges to the Profile entity.
func (cu *CompetitionUpdate) ClearParticipants() *CompetitionUpdate {
	cu.mutation.ClearParticipants()
	return cu
}

// RemoveParticipantIDs removes the "participants" edge to Profile entities by IDs.
func (cu *CompetitionUpdate) RemoveParticipantIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.RemoveParticipantIDs(ids...)
	return cu
}

// RemoveParticipants removes "participants" edges to Profile entities.
func (cu *CompetitionUpdate) RemoveParticipants(p ...*Profile) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveParticipantIDs(ids...)
}

// ClearWorkouts clears all "workouts" edges to the Workout entity.
func (cu *CompetitionUpdate) ClearWorkouts() *CompetitionUpdate {
	cu.mutation.ClearWorkouts()
	return cu
}

// RemoveWorkoutIDs removes the "workouts" edge to Workout entities by IDs.
func (cu *CompetitionUpdate) RemoveWorkoutIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.RemoveWorkoutIDs(ids...)
	return cu
}

// RemoveWorkouts removes "workouts" edges to Workout entities.
func (cu *CompetitionUpdate) RemoveWorkouts(w ...*Workout) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.RemoveWorkoutIDs(ids...)
}

// ClearWorkoutData clears all "workout_data" edges to the WorkoutData entity.
func (cu *CompetitionUpdate) ClearWorkoutData() *CompetitionUpdate {
	cu.mutation.ClearWorkoutData()
	return cu
}

// RemoveWorkoutDatumIDs removes the "workout_data" edge to WorkoutData entities by IDs.
func (cu *CompetitionUpdate) RemoveWorkoutDatumIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.RemoveWorkoutDatumIDs(ids...)
	return cu
}

// RemoveWorkoutData removes "workout_data" edges to WorkoutData entities.
func (cu *CompetitionUpdate) RemoveWorkoutData(w ...*WorkoutData) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.RemoveWorkoutDatumIDs(ids...)
}

// ClearResults clears all "results" edges to the CompetitionResult entity.
func (cu *CompetitionUpdate) ClearResults() *CompetitionUpdate {
	cu.mutation.ClearResults()
	return cu
}

// RemoveResultIDs removes the "results" edge to CompetitionResult entities by IDs.
func (cu *CompetitionUpdate) RemoveResultIDs(ids ...uuid.UUID) *CompetitionUpdate {
	cu.mutation.RemoveResultIDs(ids...)
	return cu
}

// RemoveResults removes "results" edges to CompetitionResult entities.
func (cu *CompetitionUpdate) RemoveResults(c ...*CompetitionResult) *CompetitionUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveResultIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompetitionUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompetitionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompetitionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompetitionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CompetitionUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if competition.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized competition.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := competition.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *CompetitionUpdate) check() error {
	if v, ok := cu.mutation.GetType(); ok {
		if err := competition.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Competition.type": %w`, err)}
		}
	}
	if _, ok := cu.mutation.OwnerID(); cu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Competition.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CompetitionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CompetitionUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CompetitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(competition.Table, competition.Columns, sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(competition.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Public(); ok {
		_spec.SetField(competition.FieldPublic, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(competition.FieldTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(competition.FieldDescription, field.TypeString, value)
	}
	if value, ok := cu.mutation.Start(); ok {
		_spec.SetField(competition.FieldStart, field.TypeTime, value)
	}
	if value, ok := cu.mutation.End(); ok {
		_spec.SetField(competition.FieldEnd, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Scheduled(); ok {
		_spec.SetField(competition.FieldScheduled, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(competition.FieldStatus, field.TypeString, value)
	}
	if value, ok := cu.mutation.ParticipantTypes(); ok {
		_spec.SetField(competition.FieldParticipantTypes, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedParticipantTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, competition.FieldParticipantTypes, value)
		})
	}
	if cu.mutation.ParticipantTypesCleared() {
		_spec.ClearField(competition.FieldParticipantTypes, field.TypeJSON)
	}
	if value, ok := cu.mutation.WorkoutTypes(); ok {
		_spec.SetField(competition.FieldWorkoutTypes, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedWorkoutTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, competition.FieldWorkoutTypes, value)
		})
	}
	if cu.mutation.WorkoutTypesCleared() {
		_spec.ClearField(competition.FieldWorkoutTypes, field.TypeJSON)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(competition.FieldType, field.TypeString, value)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competition.OwnerTable,
			Columns: []string{competition.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competition.OwnerTable,
			Columns: []string{competition.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.ParticipantsTable,
			Columns: competition.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !cu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.ParticipantsTable,
			Columns: competition.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.ParticipantsTable,
			Columns: competition.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.WorkoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.WorkoutsTable,
			Columns: []string{competition.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedWorkoutsIDs(); len(nodes) > 0 && !cu.mutation.WorkoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.WorkoutsTable,
			Columns: []string{competition.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.WorkoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.WorkoutsTable,
			Columns: []string{competition.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.WorkoutDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.WorkoutDataTable,
			Columns: []string{competition.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedWorkoutDataIDs(); len(nodes) > 0 && !cu.mutation.WorkoutDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.WorkoutDataTable,
			Columns: []string{competition.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.WorkoutDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.WorkoutDataTable,
			Columns: []string{competition.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.ResultsTable,
			Columns: []string{competition.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedResultsIDs(); len(nodes) > 0 && !cu.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.ResultsTable,
			Columns: []string{competition.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.ResultsTable,
			Columns: []string{competition.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{competition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CompetitionUpdateOne is the builder for updating a single Competition entity.
type CompetitionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CompetitionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CompetitionUpdateOne) SetUpdatedAt(t time.Time) *CompetitionUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetPublic sets the "public" field.
func (cuo *CompetitionUpdateOne) SetPublic(b bool) *CompetitionUpdateOne {
	cuo.mutation.SetPublic(b)
	return cuo
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (cuo *CompetitionUpdateOne) SetNillablePublic(b *bool) *CompetitionUpdateOne {
	if b != nil {
		cuo.SetPublic(*b)
	}
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *CompetitionUpdateOne) SetTitle(s string) *CompetitionUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CompetitionUpdateOne) SetDescription(s string) *CompetitionUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetStart sets the "start" field.
func (cuo *CompetitionUpdateOne) SetStart(t time.Time) *CompetitionUpdateOne {
	cuo.mutation.SetStart(t)
	return cuo
}

// SetEnd sets the "end" field.
func (cuo *CompetitionUpdateOne) SetEnd(t time.Time) *CompetitionUpdateOne {
	cuo.mutation.SetEnd(t)
	return cuo
}

// SetScheduled sets the "scheduled" field.
func (cuo *CompetitionUpdateOne) SetScheduled(b bool) *CompetitionUpdateOne {
	cuo.mutation.SetScheduled(b)
	return cuo
}

// SetNillableScheduled sets the "scheduled" field if the given value is not nil.
func (cuo *CompetitionUpdateOne) SetNillableScheduled(b *bool) *CompetitionUpdateOne {
	if b != nil {
		cuo.SetScheduled(*b)
	}
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CompetitionUpdateOne) SetStatus(s string) *CompetitionUpdateOne {
	cuo.mutation.SetStatus(s)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CompetitionUpdateOne) SetNillableStatus(s *string) *CompetitionUpdateOne {
	if s != nil {
		cuo.SetStatus(*s)
	}
	return cuo
}

// SetParticipantTypes sets the "participant_types" field.
func (cuo *CompetitionUpdateOne) SetParticipantTypes(s []string) *CompetitionUpdateOne {
	cuo.mutation.SetParticipantTypes(s)
	return cuo
}

// AppendParticipantTypes appends s to the "participant_types" field.
func (cuo *CompetitionUpdateOne) AppendParticipantTypes(s []string) *CompetitionUpdateOne {
	cuo.mutation.AppendParticipantTypes(s)
	return cuo
}

// ClearParticipantTypes clears the value of the "participant_types" field.
func (cuo *CompetitionUpdateOne) ClearParticipantTypes() *CompetitionUpdateOne {
	cuo.mutation.ClearParticipantTypes()
	return cuo
}

// SetWorkoutTypes sets the "workout_types" field.
func (cuo *CompetitionUpdateOne) SetWorkoutTypes(s []string) *CompetitionUpdateOne {
	cuo.mutation.SetWorkoutTypes(s)
	return cuo
}

// AppendWorkoutTypes appends s to the "workout_types" field.
func (cuo *CompetitionUpdateOne) AppendWorkoutTypes(s []string) *CompetitionUpdateOne {
	cuo.mutation.AppendWorkoutTypes(s)
	return cuo
}

// ClearWorkoutTypes clears the value of the "workout_types" field.
func (cuo *CompetitionUpdateOne) ClearWorkoutTypes() *CompetitionUpdateOne {
	cuo.mutation.ClearWorkoutTypes()
	return cuo
}

// SetType sets the "type" field.
func (cuo *CompetitionUpdateOne) SetType(s string) *CompetitionUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CompetitionUpdateOne) SetNillableType(s *string) *CompetitionUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// SetOwnerID sets the "owner" edge to the Profile entity by ID.
func (cuo *CompetitionUpdateOne) SetOwnerID(id uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetOwner sets the "owner" edge to the Profile entity.
func (cuo *CompetitionUpdateOne) SetOwner(p *Profile) *CompetitionUpdateOne {
	return cuo.SetOwnerID(p.ID)
}

// AddParticipantIDs adds the "participants" edge to the Profile entity by IDs.
func (cuo *CompetitionUpdateOne) AddParticipantIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.AddParticipantIDs(ids...)
	return cuo
}

// AddParticipants adds the "participants" edges to the Profile entity.
func (cuo *CompetitionUpdateOne) AddParticipants(p ...*Profile) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddParticipantIDs(ids...)
}

// AddWorkoutIDs adds the "workouts" edge to the Workout entity by IDs.
func (cuo *CompetitionUpdateOne) AddWorkoutIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.AddWorkoutIDs(ids...)
	return cuo
}

// AddWorkouts adds the "workouts" edges to the Workout entity.
func (cuo *CompetitionUpdateOne) AddWorkouts(w ...*Workout) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.AddWorkoutIDs(ids...)
}

// AddWorkoutDatumIDs adds the "workout_data" edge to the WorkoutData entity by IDs.
func (cuo *CompetitionUpdateOne) AddWorkoutDatumIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.AddWorkoutDatumIDs(ids...)
	return cuo
}

// AddWorkoutData adds the "workout_data" edges to the WorkoutData entity.
func (cuo *CompetitionUpdateOne) AddWorkoutData(w ...*WorkoutData) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.AddWorkoutDatumIDs(ids...)
}

// AddResultIDs adds the "results" edge to the CompetitionResult entity by IDs.
func (cuo *CompetitionUpdateOne) AddResultIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.AddResultIDs(ids...)
	return cuo
}

// AddResults adds the "results" edges to the CompetitionResult entity.
func (cuo *CompetitionUpdateOne) AddResults(c ...*CompetitionResult) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddResultIDs(ids...)
}

// Mutation returns the CompetitionMutation object of the builder.
func (cuo *CompetitionUpdateOne) Mutation() *CompetitionMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the Profile entity.
func (cuo *CompetitionUpdateOne) ClearOwner() *CompetitionUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// ClearParticipants clears all "participants" edges to the Profile entity.
func (cuo *CompetitionUpdateOne) ClearParticipants() *CompetitionUpdateOne {
	cuo.mutation.ClearParticipants()
	return cuo
}

// RemoveParticipantIDs removes the "participants" edge to Profile entities by IDs.
func (cuo *CompetitionUpdateOne) RemoveParticipantIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.RemoveParticipantIDs(ids...)
	return cuo
}

// RemoveParticipants removes "participants" edges to Profile entities.
func (cuo *CompetitionUpdateOne) RemoveParticipants(p ...*Profile) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveParticipantIDs(ids...)
}

// ClearWorkouts clears all "workouts" edges to the Workout entity.
func (cuo *CompetitionUpdateOne) ClearWorkouts() *CompetitionUpdateOne {
	cuo.mutation.ClearWorkouts()
	return cuo
}

// RemoveWorkoutIDs removes the "workouts" edge to Workout entities by IDs.
func (cuo *CompetitionUpdateOne) RemoveWorkoutIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.RemoveWorkoutIDs(ids...)
	return cuo
}

// RemoveWorkouts removes "workouts" edges to Workout entities.
func (cuo *CompetitionUpdateOne) RemoveWorkouts(w ...*Workout) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.RemoveWorkoutIDs(ids...)
}

// ClearWorkoutData clears all "workout_data" edges to the WorkoutData entity.
func (cuo *CompetitionUpdateOne) ClearWorkoutData() *CompetitionUpdateOne {
	cuo.mutation.ClearWorkoutData()
	return cuo
}

// RemoveWorkoutDatumIDs removes the "workout_data" edge to WorkoutData entities by IDs.
func (cuo *CompetitionUpdateOne) RemoveWorkoutDatumIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.RemoveWorkoutDatumIDs(ids...)
	return cuo
}

// RemoveWorkoutData removes "workout_data" edges to WorkoutData entities.
func (cuo *CompetitionUpdateOne) RemoveWorkoutData(w ...*WorkoutData) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.RemoveWorkoutDatumIDs(ids...)
}

// ClearResults clears all "results" edges to the CompetitionResult entity.
func (cuo *CompetitionUpdateOne) ClearResults() *CompetitionUpdateOne {
	cuo.mutation.ClearResults()
	return cuo
}

// RemoveResultIDs removes the "results" edge to CompetitionResult entities by IDs.
func (cuo *CompetitionUpdateOne) RemoveResultIDs(ids ...uuid.UUID) *CompetitionUpdateOne {
	cuo.mutation.RemoveResultIDs(ids...)
	return cuo
}

// RemoveResults removes "results" edges to CompetitionResult entities.
func (cuo *CompetitionUpdateOne) RemoveResults(c ...*CompetitionResult) *CompetitionUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveResultIDs(ids...)
}

// Where appends a list predicates to the CompetitionUpdate builder.
func (cuo *CompetitionUpdateOne) Where(ps ...predicate.Competition) *CompetitionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompetitionUpdateOne) Select(field string, fields ...string) *CompetitionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Competition entity.
func (cuo *CompetitionUpdateOne) Save(ctx context.Context) (*Competition, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompetitionUpdateOne) SaveX(ctx context.Context) *Competition {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompetitionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompetitionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CompetitionUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if competition.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized competition.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := competition.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CompetitionUpdateOne) check() error {
	if v, ok := cuo.mutation.GetType(); ok {
		if err := competition.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Competition.type": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.OwnerID(); cuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Competition.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CompetitionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CompetitionUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CompetitionUpdateOne) sqlSave(ctx context.Context) (_node *Competition, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(competition.Table, competition.Columns, sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Competition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, competition.FieldID)
		for _, f := range fields {
			if !competition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != competition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(competition.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Public(); ok {
		_spec.SetField(competition.FieldPublic, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(competition.FieldTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(competition.FieldDescription, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Start(); ok {
		_spec.SetField(competition.FieldStart, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.End(); ok {
		_spec.SetField(competition.FieldEnd, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Scheduled(); ok {
		_spec.SetField(competition.FieldScheduled, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(competition.FieldStatus, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ParticipantTypes(); ok {
		_spec.SetField(competition.FieldParticipantTypes, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedParticipantTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, competition.FieldParticipantTypes, value)
		})
	}
	if cuo.mutation.ParticipantTypesCleared() {
		_spec.ClearField(competition.FieldParticipantTypes, field.TypeJSON)
	}
	if value, ok := cuo.mutation.WorkoutTypes(); ok {
		_spec.SetField(competition.FieldWorkoutTypes, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedWorkoutTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, competition.FieldWorkoutTypes, value)
		})
	}
	if cuo.mutation.WorkoutTypesCleared() {
		_spec.ClearField(competition.FieldWorkoutTypes, field.TypeJSON)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(competition.FieldType, field.TypeString, value)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competition.OwnerTable,
			Columns: []string{competition.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competition.OwnerTable,
			Columns: []string{competition.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.ParticipantsTable,
			Columns: competition.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !cuo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.ParticipantsTable,
			Columns: competition.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.ParticipantsTable,
			Columns: competition.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.WorkoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.WorkoutsTable,
			Columns: []string{competition.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedWorkoutsIDs(); len(nodes) > 0 && !cuo.mutation.WorkoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.WorkoutsTable,
			Columns: []string{competition.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.WorkoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.WorkoutsTable,
			Columns: []string{competition.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.WorkoutDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.WorkoutDataTable,
			Columns: []string{competition.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedWorkoutDataIDs(); len(nodes) > 0 && !cuo.mutation.WorkoutDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.WorkoutDataTable,
			Columns: []string{competition.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.WorkoutDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.WorkoutDataTable,
			Columns: []string{competition.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.ResultsTable,
			Columns: []string{competition.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedResultsIDs(); len(nodes) > 0 && !cuo.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.ResultsTable,
			Columns: []string{competition.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   competition.ResultsTable,
			Columns: []string{competition.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Competition{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{competition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
