// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competition"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/goal"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/squad"
	"github.com/jacobmaizel/swiftui-golang-app-demo/shared"
)

// Goal is the model entity for the Goal schema.
type Goal struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Start holds the value of the "start" field.
	Start time.Time `json:"start,omitempty"`
	// End holds the value of the "end" field.
	End time.Time `json:"end,omitempty"`
	// HealthkitWorkoutActivityType holds the value of the "healthkit_workout_activity_type" field.
	HealthkitWorkoutActivityType string `json:"healthkit_workout_activity_type,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// ValueAggregationType holds the value of the "value_aggregation_type" field.
	ValueAggregationType string `json:"value_aggregation_type,omitempty"`
	// TimeInterval holds the value of the "time_interval" field.
	TimeInterval string `json:"time_interval,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CurrentTotalValue holds the value of the "current_total_value" field.
	CurrentTotalValue string `json:"current_total_value,omitempty"`
	// PerWorkoutData holds the value of the "per_workout_data" field.
	PerWorkoutData []shared.PerWorkoutGoalDataEntry `json:"per_workout_data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GoalQuery when eager-loading is set.
	Edges            GoalEdges `json:"related"`
	goal_profile     *uuid.UUID
	goal_competition *uuid.UUID
	goal_squad       *uuid.UUID
	selectValues     sql.SelectValues
}

// GoalEdges holds the relations/edges for other nodes in the graph.
type GoalEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// Competition holds the value of the competition edge.
	Competition *Competition `json:"competition,omitempty"`
	// Squad holds the value of the squad edge.
	Squad *Squad `json:"squad,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GoalEdges) ProfileOrErr() (*Profile, error) {
	if e.loadedTypes[0] {
		if e.Profile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// CompetitionOrErr returns the Competition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GoalEdges) CompetitionOrErr() (*Competition, error) {
	if e.loadedTypes[1] {
		if e.Competition == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: competition.Label}
		}
		return e.Competition, nil
	}
	return nil, &NotLoadedError{edge: "competition"}
}

// SquadOrErr returns the Squad value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GoalEdges) SquadOrErr() (*Squad, error) {
	if e.loadedTypes[2] {
		if e.Squad == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: squad.Label}
		}
		return e.Squad, nil
	}
	return nil, &NotLoadedError{edge: "squad"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Goal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case goal.FieldPerWorkoutData:
			values[i] = new([]byte)
		case goal.FieldType, goal.FieldHealthkitWorkoutActivityType, goal.FieldAction, goal.FieldValue, goal.FieldUnit, goal.FieldValueAggregationType, goal.FieldTimeInterval, goal.FieldStatus, goal.FieldCurrentTotalValue:
			values[i] = new(sql.NullString)
		case goal.FieldCreatedAt, goal.FieldUpdatedAt, goal.FieldStart, goal.FieldEnd:
			values[i] = new(sql.NullTime)
		case goal.FieldID:
			values[i] = new(uuid.UUID)
		case goal.ForeignKeys[0]: // goal_profile
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case goal.ForeignKeys[1]: // goal_competition
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case goal.ForeignKeys[2]: // goal_squad
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Goal fields.
func (_go *Goal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goal.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_go.ID = *value
			}
		case goal.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_go.CreatedAt = value.Time
			}
		case goal.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_go.UpdatedAt = value.Time
			}
		case goal.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_go.Type = value.String
			}
		case goal.FieldStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				_go.Start = value.Time
			}
		case goal.FieldEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				_go.End = value.Time
			}
		case goal.FieldHealthkitWorkoutActivityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field healthkit_workout_activity_type", values[i])
			} else if value.Valid {
				_go.HealthkitWorkoutActivityType = value.String
			}
		case goal.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				_go.Action = value.String
			}
		case goal.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				_go.Value = value.String
			}
		case goal.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				_go.Unit = value.String
			}
		case goal.FieldValueAggregationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value_aggregation_type", values[i])
			} else if value.Valid {
				_go.ValueAggregationType = value.String
			}
		case goal.FieldTimeInterval:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field time_interval", values[i])
			} else if value.Valid {
				_go.TimeInterval = value.String
			}
		case goal.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_go.Status = value.String
			}
		case goal.FieldCurrentTotalValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_total_value", values[i])
			} else if value.Valid {
				_go.CurrentTotalValue = value.String
			}
		case goal.FieldPerWorkoutData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field per_workout_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_go.PerWorkoutData); err != nil {
					return fmt.Errorf("unmarshal field per_workout_data: %w", err)
				}
			}
		case goal.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field goal_profile", values[i])
			} else if value.Valid {
				_go.goal_profile = new(uuid.UUID)
				*_go.goal_profile = *value.S.(*uuid.UUID)
			}
		case goal.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field goal_competition", values[i])
			} else if value.Valid {
				_go.goal_competition = new(uuid.UUID)
				*_go.goal_competition = *value.S.(*uuid.UUID)
			}
		case goal.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field goal_squad", values[i])
			} else if value.Valid {
				_go.goal_squad = new(uuid.UUID)
				*_go.goal_squad = *value.S.(*uuid.UUID)
			}
		default:
			_go.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Goal.
// This includes values selected through modifiers, order, etc.
func (_go *Goal) GetValue(name string) (ent.Value, error) {
	return _go.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the Goal entity.
func (_go *Goal) QueryProfile() *ProfileQuery {
	return NewGoalClient(_go.config).QueryProfile(_go)
}

// QueryCompetition queries the "competition" edge of the Goal entity.
func (_go *Goal) QueryCompetition() *CompetitionQuery {
	return NewGoalClient(_go.config).QueryCompetition(_go)
}

// QuerySquad queries the "squad" edge of the Goal entity.
func (_go *Goal) QuerySquad() *SquadQuery {
	return NewGoalClient(_go.config).QuerySquad(_go)
}

// Update returns a builder for updating this Goal.
// Note that you need to call Goal.Unwrap() before calling this method if this Goal
// was returned from a transaction, and the transaction was committed or rolled back.
func (_go *Goal) Update() *GoalUpdateOne {
	return NewGoalClient(_go.config).UpdateOne(_go)
}

// Unwrap unwraps the Goal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_go *Goal) Unwrap() *Goal {
	_tx, ok := _go.config.driver.(*txDriver)
	if !ok {
		panic("ent: Goal is not a transactional entity")
	}
	_go.config.driver = _tx.drv
	return _go
}

// String implements the fmt.Stringer.
func (_go *Goal) String() string {
	var builder strings.Builder
	builder.WriteString("Goal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _go.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_go.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_go.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(_go.Type)
	builder.WriteString(", ")
	builder.WriteString("start=")
	builder.WriteString(_go.Start.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end=")
	builder.WriteString(_go.End.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("healthkit_workout_activity_type=")
	builder.WriteString(_go.HealthkitWorkoutActivityType)
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(_go.Action)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(_go.Value)
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(_go.Unit)
	builder.WriteString(", ")
	builder.WriteString("value_aggregation_type=")
	builder.WriteString(_go.ValueAggregationType)
	builder.WriteString(", ")
	builder.WriteString("time_interval=")
	builder.WriteString(_go.TimeInterval)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(_go.Status)
	builder.WriteString(", ")
	builder.WriteString("current_total_value=")
	builder.WriteString(_go.CurrentTotalValue)
	builder.WriteString(", ")
	builder.WriteString("per_workout_data=")
	builder.WriteString(fmt.Sprintf("%v", _go.PerWorkoutData))
	builder.WriteByte(')')
	return builder.String()
}

// Goals is a parsable slice of Goal.
type Goals []*Goal
