// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/appconfig"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/notificationpreferences"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/user"
)

// Profile is the model entity for the Profile schema.
type Profile struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Public holds the value of the "public" field.
	Public bool `json:"public"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Picture holds the value of the "picture" field.
	Picture string `json:"picture,omitempty"`
	// Birthday holds the value of the "birthday" field.
	Birthday *time.Time `json:"birthday,omitempty"`
	// OnboardingCompleted holds the value of the "onboarding_completed" field.
	OnboardingCompleted bool `json:"onboarding_completed"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfileQuery when eager-loading is set.
	Edges              ProfileEdges `json:"related"`
	app_config_profile *uuid.UUID
	user_profile       *uuid.UUID
	selectValues       sql.SelectValues
}

// ProfileEdges holds the relations/edges for other nodes in the graph.
type ProfileEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// FcmTokens holds the value of the fcm_tokens edge.
	FcmTokens []*FcmToken `json:"fcm_tokens,omitempty"`
	// NotificationPreferences holds the value of the notification_preferences edge.
	NotificationPreferences *NotificationPreferences `json:"notification_preferences,omitempty"`
	// AppConfig holds the value of the app_config edge.
	AppConfig *AppConfig `json:"app_config,omitempty"`
	// Notifications holds the value of the notifications edge.
	Notifications []*Notification `json:"notifications,omitempty"`
	// Competitions holds the value of the competitions edge.
	Competitions []*Competition `json:"competitions,omitempty"`
	// Actions holds the value of the actions edge.
	Actions []*Action `json:"actions,omitempty"`
	// Squad holds the value of the squad edge.
	Squad []*Squad `json:"squad,omitempty"`
	// SquadsOwned holds the value of the squads_owned edge.
	SquadsOwned []*Squad `json:"squads_owned,omitempty"`
	// Invites holds the value of the invites edge.
	Invites []*Invite `json:"invites,omitempty"`
	// InvitesSent holds the value of the invites_sent edge.
	InvitesSent []*Invite `json:"invites_sent,omitempty"`
	// Workouts holds the value of the workouts edge.
	Workouts []*Workout `json:"workouts,omitempty"`
	// Goals holds the value of the goals edge.
	Goals []*Goal `json:"goals,omitempty"`
	// WorkoutData holds the value of the workout_data edge.
	WorkoutData []*WorkoutData `json:"workout_data,omitempty"`
	// CompetitionResults holds the value of the competition_results edge.
	CompetitionResults []*CompetitionResult `json:"competition_results,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [15]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// FcmTokensOrErr returns the FcmTokens value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) FcmTokensOrErr() ([]*FcmToken, error) {
	if e.loadedTypes[1] {
		return e.FcmTokens, nil
	}
	return nil, &NotLoadedError{edge: "fcm_tokens"}
}

// NotificationPreferencesOrErr returns the NotificationPreferences value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileEdges) NotificationPreferencesOrErr() (*NotificationPreferences, error) {
	if e.loadedTypes[2] {
		if e.NotificationPreferences == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: notificationpreferences.Label}
		}
		return e.NotificationPreferences, nil
	}
	return nil, &NotLoadedError{edge: "notification_preferences"}
}

// AppConfigOrErr returns the AppConfig value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileEdges) AppConfigOrErr() (*AppConfig, error) {
	if e.loadedTypes[3] {
		if e.AppConfig == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: appconfig.Label}
		}
		return e.AppConfig, nil
	}
	return nil, &NotLoadedError{edge: "app_config"}
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[4] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "notifications"}
}

// CompetitionsOrErr returns the Competitions value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) CompetitionsOrErr() ([]*Competition, error) {
	if e.loadedTypes[5] {
		return e.Competitions, nil
	}
	return nil, &NotLoadedError{edge: "competitions"}
}

// ActionsOrErr returns the Actions value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) ActionsOrErr() ([]*Action, error) {
	if e.loadedTypes[6] {
		return e.Actions, nil
	}
	return nil, &NotLoadedError{edge: "actions"}
}

// SquadOrErr returns the Squad value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) SquadOrErr() ([]*Squad, error) {
	if e.loadedTypes[7] {
		return e.Squad, nil
	}
	return nil, &NotLoadedError{edge: "squad"}
}

// SquadsOwnedOrErr returns the SquadsOwned value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) SquadsOwnedOrErr() ([]*Squad, error) {
	if e.loadedTypes[8] {
		return e.SquadsOwned, nil
	}
	return nil, &NotLoadedError{edge: "squads_owned"}
}

// InvitesOrErr returns the Invites value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) InvitesOrErr() ([]*Invite, error) {
	if e.loadedTypes[9] {
		return e.Invites, nil
	}
	return nil, &NotLoadedError{edge: "invites"}
}

// InvitesSentOrErr returns the InvitesSent value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) InvitesSentOrErr() ([]*Invite, error) {
	if e.loadedTypes[10] {
		return e.InvitesSent, nil
	}
	return nil, &NotLoadedError{edge: "invites_sent"}
}

// WorkoutsOrErr returns the Workouts value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) WorkoutsOrErr() ([]*Workout, error) {
	if e.loadedTypes[11] {
		return e.Workouts, nil
	}
	return nil, &NotLoadedError{edge: "workouts"}
}

// GoalsOrErr returns the Goals value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) GoalsOrErr() ([]*Goal, error) {
	if e.loadedTypes[12] {
		return e.Goals, nil
	}
	return nil, &NotLoadedError{edge: "goals"}
}

// WorkoutDataOrErr returns the WorkoutData value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) WorkoutDataOrErr() ([]*WorkoutData, error) {
	if e.loadedTypes[13] {
		return e.WorkoutData, nil
	}
	return nil, &NotLoadedError{edge: "workout_data"}
}

// CompetitionResultsOrErr returns the CompetitionResults value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) CompetitionResultsOrErr() ([]*CompetitionResult, error) {
	if e.loadedTypes[14] {
		return e.CompetitionResults, nil
	}
	return nil, &NotLoadedError{edge: "competition_results"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Profile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case profile.FieldPublic, profile.FieldOnboardingCompleted:
			values[i] = new(sql.NullBool)
		case profile.FieldFirstName, profile.FieldLastName, profile.FieldPicture:
			values[i] = new(sql.NullString)
		case profile.FieldCreatedAt, profile.FieldUpdatedAt, profile.FieldBirthday:
			values[i] = new(sql.NullTime)
		case profile.FieldID:
			values[i] = new(uuid.UUID)
		case profile.ForeignKeys[0]: // app_config_profile
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case profile.ForeignKeys[1]: // user_profile
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Profile fields.
func (pr *Profile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profile.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case profile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case profile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case profile.FieldPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public", values[i])
			} else if value.Valid {
				pr.Public = value.Bool
			}
		case profile.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				pr.FirstName = value.String
			}
		case profile.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				pr.LastName = value.String
			}
		case profile.FieldPicture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture", values[i])
			} else if value.Valid {
				pr.Picture = value.String
			}
		case profile.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				pr.Birthday = new(time.Time)
				*pr.Birthday = value.Time
			}
		case profile.FieldOnboardingCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field onboarding_completed", values[i])
			} else if value.Valid {
				pr.OnboardingCompleted = value.Bool
			}
		case profile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field app_config_profile", values[i])
			} else if value.Valid {
				pr.app_config_profile = new(uuid.UUID)
				*pr.app_config_profile = *value.S.(*uuid.UUID)
			}
		case profile.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_profile", values[i])
			} else if value.Valid {
				pr.user_profile = new(uuid.UUID)
				*pr.user_profile = *value.S.(*uuid.UUID)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Profile.
// This includes values selected through modifiers, order, etc.
func (pr *Profile) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Profile entity.
func (pr *Profile) QueryUser() *UserQuery {
	return NewProfileClient(pr.config).QueryUser(pr)
}

// QueryFcmTokens queries the "fcm_tokens" edge of the Profile entity.
func (pr *Profile) QueryFcmTokens() *FcmTokenQuery {
	return NewProfileClient(pr.config).QueryFcmTokens(pr)
}

// QueryNotificationPreferences queries the "notification_preferences" edge of the Profile entity.
func (pr *Profile) QueryNotificationPreferences() *NotificationPreferencesQuery {
	return NewProfileClient(pr.config).QueryNotificationPreferences(pr)
}

// QueryAppConfig queries the "app_config" edge of the Profile entity.
func (pr *Profile) QueryAppConfig() *AppConfigQuery {
	return NewProfileClient(pr.config).QueryAppConfig(pr)
}

// QueryNotifications queries the "notifications" edge of the Profile entity.
func (pr *Profile) QueryNotifications() *NotificationQuery {
	return NewProfileClient(pr.config).QueryNotifications(pr)
}

// QueryCompetitions queries the "competitions" edge of the Profile entity.
func (pr *Profile) QueryCompetitions() *CompetitionQuery {
	return NewProfileClient(pr.config).QueryCompetitions(pr)
}

// QueryActions queries the "actions" edge of the Profile entity.
func (pr *Profile) QueryActions() *ActionQuery {
	return NewProfileClient(pr.config).QueryActions(pr)
}

// QuerySquad queries the "squad" edge of the Profile entity.
func (pr *Profile) QuerySquad() *SquadQuery {
	return NewProfileClient(pr.config).QuerySquad(pr)
}

// QuerySquadsOwned queries the "squads_owned" edge of the Profile entity.
func (pr *Profile) QuerySquadsOwned() *SquadQuery {
	return NewProfileClient(pr.config).QuerySquadsOwned(pr)
}

// QueryInvites queries the "invites" edge of the Profile entity.
func (pr *Profile) QueryInvites() *InviteQuery {
	return NewProfileClient(pr.config).QueryInvites(pr)
}

// QueryInvitesSent queries the "invites_sent" edge of the Profile entity.
func (pr *Profile) QueryInvitesSent() *InviteQuery {
	return NewProfileClient(pr.config).QueryInvitesSent(pr)
}

// QueryWorkouts queries the "workouts" edge of the Profile entity.
func (pr *Profile) QueryWorkouts() *WorkoutQuery {
	return NewProfileClient(pr.config).QueryWorkouts(pr)
}

// QueryGoals queries the "goals" edge of the Profile entity.
func (pr *Profile) QueryGoals() *GoalQuery {
	return NewProfileClient(pr.config).QueryGoals(pr)
}

// QueryWorkoutData queries the "workout_data" edge of the Profile entity.
func (pr *Profile) QueryWorkoutData() *WorkoutDataQuery {
	return NewProfileClient(pr.config).QueryWorkoutData(pr)
}

// QueryCompetitionResults queries the "competition_results" edge of the Profile entity.
func (pr *Profile) QueryCompetitionResults() *CompetitionResultQuery {
	return NewProfileClient(pr.config).QueryCompetitionResults(pr)
}

// Update returns a builder for updating this Profile.
// Note that you need to call Profile.Unwrap() before calling this method if this Profile
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Profile) Update() *ProfileUpdateOne {
	return NewProfileClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Profile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Profile) Unwrap() *Profile {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Profile is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Profile) String() string {
	var builder strings.Builder
	builder.WriteString("Profile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("public=")
	builder.WriteString(fmt.Sprintf("%v", pr.Public))
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(pr.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(pr.LastName)
	builder.WriteString(", ")
	builder.WriteString("picture=")
	builder.WriteString(pr.Picture)
	builder.WriteString(", ")
	if v := pr.Birthday; v != nil {
		builder.WriteString("birthday=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("onboarding_completed=")
	builder.WriteString(fmt.Sprintf("%v", pr.OnboardingCompleted))
	builder.WriteByte(')')
	return builder.String()
}

// Profiles is a parsable slice of Profile.
type Profiles []*Profile
