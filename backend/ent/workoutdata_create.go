// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competition"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workout"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutdata"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutroutedata"
	"github.com/jacobmaizel/swiftui-golang-app-demo/shared"
)

// WorkoutDataCreate is the builder for creating a WorkoutData entity.
type WorkoutDataCreate struct {
	config
	mutation *WorkoutDataMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (wdc *WorkoutDataCreate) SetCreatedAt(t time.Time) *WorkoutDataCreate {
	wdc.mutation.SetCreatedAt(t)
	return wdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableCreatedAt(t *time.Time) *WorkoutDataCreate {
	if t != nil {
		wdc.SetCreatedAt(*t)
	}
	return wdc
}

// SetUpdatedAt sets the "updated_at" field.
func (wdc *WorkoutDataCreate) SetUpdatedAt(t time.Time) *WorkoutDataCreate {
	wdc.mutation.SetUpdatedAt(t)
	return wdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableUpdatedAt(t *time.Time) *WorkoutDataCreate {
	if t != nil {
		wdc.SetUpdatedAt(*t)
	}
	return wdc
}

// SetHealthkitWorkoutID sets the "healthkit_workout_id" field.
func (wdc *WorkoutDataCreate) SetHealthkitWorkoutID(s string) *WorkoutDataCreate {
	wdc.mutation.SetHealthkitWorkoutID(s)
	return wdc
}

// SetNillableHealthkitWorkoutID sets the "healthkit_workout_id" field if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableHealthkitWorkoutID(s *string) *WorkoutDataCreate {
	if s != nil {
		wdc.SetHealthkitWorkoutID(*s)
	}
	return wdc
}

// SetHealthkitWorkoutStartDate sets the "healthkit_workout_start_date" field.
func (wdc *WorkoutDataCreate) SetHealthkitWorkoutStartDate(t time.Time) *WorkoutDataCreate {
	wdc.mutation.SetHealthkitWorkoutStartDate(t)
	return wdc
}

// SetNillableHealthkitWorkoutStartDate sets the "healthkit_workout_start_date" field if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableHealthkitWorkoutStartDate(t *time.Time) *WorkoutDataCreate {
	if t != nil {
		wdc.SetHealthkitWorkoutStartDate(*t)
	}
	return wdc
}

// SetHealthkitWorkoutEndDate sets the "healthkit_workout_end_date" field.
func (wdc *WorkoutDataCreate) SetHealthkitWorkoutEndDate(t time.Time) *WorkoutDataCreate {
	wdc.mutation.SetHealthkitWorkoutEndDate(t)
	return wdc
}

// SetNillableHealthkitWorkoutEndDate sets the "healthkit_workout_end_date" field if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableHealthkitWorkoutEndDate(t *time.Time) *WorkoutDataCreate {
	if t != nil {
		wdc.SetHealthkitWorkoutEndDate(*t)
	}
	return wdc
}

// SetDistance sets the "distance" field.
func (wdc *WorkoutDataCreate) SetDistance(f float64) *WorkoutDataCreate {
	wdc.mutation.SetDistance(f)
	return wdc
}

// SetNillableDistance sets the "distance" field if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableDistance(f *float64) *WorkoutDataCreate {
	if f != nil {
		wdc.SetDistance(*f)
	}
	return wdc
}

// SetDuration sets the "duration" field.
func (wdc *WorkoutDataCreate) SetDuration(s string) *WorkoutDataCreate {
	wdc.mutation.SetDuration(s)
	return wdc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableDuration(s *string) *WorkoutDataCreate {
	if s != nil {
		wdc.SetDuration(*s)
	}
	return wdc
}

// SetEnergyBurned sets the "energy_burned" field.
func (wdc *WorkoutDataCreate) SetEnergyBurned(s string) *WorkoutDataCreate {
	wdc.mutation.SetEnergyBurned(s)
	return wdc
}

// SetNillableEnergyBurned sets the "energy_burned" field if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableEnergyBurned(s *string) *WorkoutDataCreate {
	if s != nil {
		wdc.SetEnergyBurned(*s)
	}
	return wdc
}

// SetAverageHeartRate sets the "average_heart_rate" field.
func (wdc *WorkoutDataCreate) SetAverageHeartRate(s string) *WorkoutDataCreate {
	wdc.mutation.SetAverageHeartRate(s)
	return wdc
}

// SetNillableAverageHeartRate sets the "average_heart_rate" field if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableAverageHeartRate(s *string) *WorkoutDataCreate {
	if s != nil {
		wdc.SetAverageHeartRate(*s)
	}
	return wdc
}

// SetSource sets the "source" field.
func (wdc *WorkoutDataCreate) SetSource(s string) *WorkoutDataCreate {
	wdc.mutation.SetSource(s)
	return wdc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableSource(s *string) *WorkoutDataCreate {
	if s != nil {
		wdc.SetSource(*s)
	}
	return wdc
}

// SetLocationType sets the "location_type" field.
func (wdc *WorkoutDataCreate) SetLocationType(s string) *WorkoutDataCreate {
	wdc.mutation.SetLocationType(s)
	return wdc
}

// SetNillableLocationType sets the "location_type" field if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableLocationType(s *string) *WorkoutDataCreate {
	if s != nil {
		wdc.SetLocationType(*s)
	}
	return wdc
}

// SetWeather sets the "weather" field.
func (wdc *WorkoutDataCreate) SetWeather(sdw *shared.WorkoutDataWeather) *WorkoutDataCreate {
	wdc.mutation.SetWeather(sdw)
	return wdc
}

// SetID sets the "id" field.
func (wdc *WorkoutDataCreate) SetID(u uuid.UUID) *WorkoutDataCreate {
	wdc.mutation.SetID(u)
	return wdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableID(u *uuid.UUID) *WorkoutDataCreate {
	if u != nil {
		wdc.SetID(*u)
	}
	return wdc
}

// SetWorkoutID sets the "workout" edge to the Workout entity by ID.
func (wdc *WorkoutDataCreate) SetWorkoutID(id uuid.UUID) *WorkoutDataCreate {
	wdc.mutation.SetWorkoutID(id)
	return wdc
}

// SetNillableWorkoutID sets the "workout" edge to the Workout entity by ID if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableWorkoutID(id *uuid.UUID) *WorkoutDataCreate {
	if id != nil {
		wdc = wdc.SetWorkoutID(*id)
	}
	return wdc
}

// SetWorkout sets the "workout" edge to the Workout entity.
func (wdc *WorkoutDataCreate) SetWorkout(w *Workout) *WorkoutDataCreate {
	return wdc.SetWorkoutID(w.ID)
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (wdc *WorkoutDataCreate) SetProfileID(id uuid.UUID) *WorkoutDataCreate {
	wdc.mutation.SetProfileID(id)
	return wdc
}

// SetProfile sets the "profile" edge to the Profile entity.
func (wdc *WorkoutDataCreate) SetProfile(p *Profile) *WorkoutDataCreate {
	return wdc.SetProfileID(p.ID)
}

// SetWorkoutRouteDataID sets the "workout_route_data" edge to the WorkoutRouteData entity by ID.
func (wdc *WorkoutDataCreate) SetWorkoutRouteDataID(id uuid.UUID) *WorkoutDataCreate {
	wdc.mutation.SetWorkoutRouteDataID(id)
	return wdc
}

// SetNillableWorkoutRouteDataID sets the "workout_route_data" edge to the WorkoutRouteData entity by ID if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableWorkoutRouteDataID(id *uuid.UUID) *WorkoutDataCreate {
	if id != nil {
		wdc = wdc.SetWorkoutRouteDataID(*id)
	}
	return wdc
}

// SetWorkoutRouteData sets the "workout_route_data" edge to the WorkoutRouteData entity.
func (wdc *WorkoutDataCreate) SetWorkoutRouteData(w *WorkoutRouteData) *WorkoutDataCreate {
	return wdc.SetWorkoutRouteDataID(w.ID)
}

// SetCompetitionID sets the "competition" edge to the Competition entity by ID.
func (wdc *WorkoutDataCreate) SetCompetitionID(id uuid.UUID) *WorkoutDataCreate {
	wdc.mutation.SetCompetitionID(id)
	return wdc
}

// SetNillableCompetitionID sets the "competition" edge to the Competition entity by ID if the given value is not nil.
func (wdc *WorkoutDataCreate) SetNillableCompetitionID(id *uuid.UUID) *WorkoutDataCreate {
	if id != nil {
		wdc = wdc.SetCompetitionID(*id)
	}
	return wdc
}

// SetCompetition sets the "competition" edge to the Competition entity.
func (wdc *WorkoutDataCreate) SetCompetition(c *Competition) *WorkoutDataCreate {
	return wdc.SetCompetitionID(c.ID)
}

// Mutation returns the WorkoutDataMutation object of the builder.
func (wdc *WorkoutDataCreate) Mutation() *WorkoutDataMutation {
	return wdc.mutation
}

// Save creates the WorkoutData in the database.
func (wdc *WorkoutDataCreate) Save(ctx context.Context) (*WorkoutData, error) {
	wdc.defaults()
	return withHooks(ctx, wdc.sqlSave, wdc.mutation, wdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wdc *WorkoutDataCreate) SaveX(ctx context.Context) *WorkoutData {
	v, err := wdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wdc *WorkoutDataCreate) Exec(ctx context.Context) error {
	_, err := wdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wdc *WorkoutDataCreate) ExecX(ctx context.Context) {
	if err := wdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wdc *WorkoutDataCreate) defaults() {
	if _, ok := wdc.mutation.CreatedAt(); !ok {
		v := workoutdata.DefaultCreatedAt()
		wdc.mutation.SetCreatedAt(v)
	}
	if _, ok := wdc.mutation.UpdatedAt(); !ok {
		v := workoutdata.DefaultUpdatedAt()
		wdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wdc.mutation.HealthkitWorkoutStartDate(); !ok {
		v := workoutdata.DefaultHealthkitWorkoutStartDate()
		wdc.mutation.SetHealthkitWorkoutStartDate(v)
	}
	if _, ok := wdc.mutation.HealthkitWorkoutEndDate(); !ok {
		v := workoutdata.DefaultHealthkitWorkoutEndDate()
		wdc.mutation.SetHealthkitWorkoutEndDate(v)
	}
	if _, ok := wdc.mutation.Source(); !ok {
		v := workoutdata.DefaultSource
		wdc.mutation.SetSource(v)
	}
	if _, ok := wdc.mutation.LocationType(); !ok {
		v := workoutdata.DefaultLocationType
		wdc.mutation.SetLocationType(v)
	}
	if _, ok := wdc.mutation.ID(); !ok {
		v := workoutdata.DefaultID()
		wdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wdc *WorkoutDataCreate) check() error {
	if _, ok := wdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkoutData.created_at"`)}
	}
	if _, ok := wdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkoutData.updated_at"`)}
	}
	if _, ok := wdc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "WorkoutData.source"`)}
	}
	if v, ok := wdc.mutation.Source(); ok {
		if err := workoutdata.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "WorkoutData.source": %w`, err)}
		}
	}
	if _, ok := wdc.mutation.LocationType(); !ok {
		return &ValidationError{Name: "location_type", err: errors.New(`ent: missing required field "WorkoutData.location_type"`)}
	}
	if v, ok := wdc.mutation.LocationType(); ok {
		if err := workoutdata.LocationTypeValidator(v); err != nil {
			return &ValidationError{Name: "location_type", err: fmt.Errorf(`ent: validator failed for field "WorkoutData.location_type": %w`, err)}
		}
	}
	if _, ok := wdc.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "profile", err: errors.New(`ent: missing required edge "WorkoutData.profile"`)}
	}
	return nil
}

func (wdc *WorkoutDataCreate) sqlSave(ctx context.Context) (*WorkoutData, error) {
	if err := wdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wdc.mutation.id = &_node.ID
	wdc.mutation.done = true
	return _node, nil
}

func (wdc *WorkoutDataCreate) createSpec() (*WorkoutData, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkoutData{config: wdc.config}
		_spec = sqlgraph.NewCreateSpec(workoutdata.Table, sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID))
	)
	if id, ok := wdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wdc.mutation.CreatedAt(); ok {
		_spec.SetField(workoutdata.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wdc.mutation.UpdatedAt(); ok {
		_spec.SetField(workoutdata.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wdc.mutation.HealthkitWorkoutID(); ok {
		_spec.SetField(workoutdata.FieldHealthkitWorkoutID, field.TypeString, value)
		_node.HealthkitWorkoutID = value
	}
	if value, ok := wdc.mutation.HealthkitWorkoutStartDate(); ok {
		_spec.SetField(workoutdata.FieldHealthkitWorkoutStartDate, field.TypeTime, value)
		_node.HealthkitWorkoutStartDate = value
	}
	if value, ok := wdc.mutation.HealthkitWorkoutEndDate(); ok {
		_spec.SetField(workoutdata.FieldHealthkitWorkoutEndDate, field.TypeTime, value)
		_node.HealthkitWorkoutEndDate = value
	}
	if value, ok := wdc.mutation.Distance(); ok {
		_spec.SetField(workoutdata.FieldDistance, field.TypeFloat64, value)
		_node.Distance = value
	}
	if value, ok := wdc.mutation.Duration(); ok {
		_spec.SetField(workoutdata.FieldDuration, field.TypeString, value)
		_node.Duration = value
	}
	if value, ok := wdc.mutation.EnergyBurned(); ok {
		_spec.SetField(workoutdata.FieldEnergyBurned, field.TypeString, value)
		_node.EnergyBurned = value
	}
	if value, ok := wdc.mutation.AverageHeartRate(); ok {
		_spec.SetField(workoutdata.FieldAverageHeartRate, field.TypeString, value)
		_node.AverageHeartRate = value
	}
	if value, ok := wdc.mutation.Source(); ok {
		_spec.SetField(workoutdata.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := wdc.mutation.LocationType(); ok {
		_spec.SetField(workoutdata.FieldLocationType, field.TypeString, value)
		_node.LocationType = value
	}
	if value, ok := wdc.mutation.Weather(); ok {
		_spec.SetField(workoutdata.FieldWeather, field.TypeJSON, value)
		_node.Weather = value
	}
	if nodes := wdc.mutation.WorkoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workoutdata.WorkoutTable,
			Columns: []string{workoutdata.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workout_data_workout = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wdc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workoutdata.ProfileTable,
			Columns: []string{workoutdata.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workout_data_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wdc.mutation.WorkoutRouteDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   workoutdata.WorkoutRouteDataTable,
			Columns: []string{workoutdata.WorkoutRouteDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutroutedata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wdc.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workoutdata.CompetitionTable,
			Columns: []string{workoutdata.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workout_data_competition = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkoutDataCreateBulk is the builder for creating many WorkoutData entities in bulk.
type WorkoutDataCreateBulk struct {
	config
	builders []*WorkoutDataCreate
}

// Save creates the WorkoutData entities in the database.
func (wdcb *WorkoutDataCreateBulk) Save(ctx context.Context) ([]*WorkoutData, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wdcb.builders))
	nodes := make([]*WorkoutData, len(wdcb.builders))
	mutators := make([]Mutator, len(wdcb.builders))
	for i := range wdcb.builders {
		func(i int, root context.Context) {
			builder := wdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkoutDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wdcb *WorkoutDataCreateBulk) SaveX(ctx context.Context) []*WorkoutData {
	v, err := wdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wdcb *WorkoutDataCreateBulk) Exec(ctx context.Context) error {
	_, err := wdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wdcb *WorkoutDataCreateBulk) ExecX(ctx context.Context) {
	if err := wdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
