// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competition"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/goal"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/squad"
	"github.com/jacobmaizel/swiftui-golang-app-demo/shared"
)

// GoalCreate is the builder for creating a Goal entity.
type GoalCreate struct {
	config
	mutation *GoalMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (gc *GoalCreate) SetCreatedAt(t time.Time) *GoalCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GoalCreate) SetNillableCreatedAt(t *time.Time) *GoalCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GoalCreate) SetUpdatedAt(t time.Time) *GoalCreate {
	gc.mutation.SetUpdatedAt(t)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GoalCreate) SetNillableUpdatedAt(t *time.Time) *GoalCreate {
	if t != nil {
		gc.SetUpdatedAt(*t)
	}
	return gc
}

// SetType sets the "type" field.
func (gc *GoalCreate) SetType(s string) *GoalCreate {
	gc.mutation.SetType(s)
	return gc
}

// SetStart sets the "start" field.
func (gc *GoalCreate) SetStart(t time.Time) *GoalCreate {
	gc.mutation.SetStart(t)
	return gc
}

// SetEnd sets the "end" field.
func (gc *GoalCreate) SetEnd(t time.Time) *GoalCreate {
	gc.mutation.SetEnd(t)
	return gc
}

// SetHealthkitWorkoutActivityType sets the "healthkit_workout_activity_type" field.
func (gc *GoalCreate) SetHealthkitWorkoutActivityType(s string) *GoalCreate {
	gc.mutation.SetHealthkitWorkoutActivityType(s)
	return gc
}

// SetNillableHealthkitWorkoutActivityType sets the "healthkit_workout_activity_type" field if the given value is not nil.
func (gc *GoalCreate) SetNillableHealthkitWorkoutActivityType(s *string) *GoalCreate {
	if s != nil {
		gc.SetHealthkitWorkoutActivityType(*s)
	}
	return gc
}

// SetAction sets the "action" field.
func (gc *GoalCreate) SetAction(s string) *GoalCreate {
	gc.mutation.SetAction(s)
	return gc
}

// SetValue sets the "value" field.
func (gc *GoalCreate) SetValue(s string) *GoalCreate {
	gc.mutation.SetValue(s)
	return gc
}

// SetUnit sets the "unit" field.
func (gc *GoalCreate) SetUnit(s string) *GoalCreate {
	gc.mutation.SetUnit(s)
	return gc
}

// SetValueAggregationType sets the "value_aggregation_type" field.
func (gc *GoalCreate) SetValueAggregationType(s string) *GoalCreate {
	gc.mutation.SetValueAggregationType(s)
	return gc
}

// SetTimeInterval sets the "time_interval" field.
func (gc *GoalCreate) SetTimeInterval(s string) *GoalCreate {
	gc.mutation.SetTimeInterval(s)
	return gc
}

// SetStatus sets the "status" field.
func (gc *GoalCreate) SetStatus(s string) *GoalCreate {
	gc.mutation.SetStatus(s)
	return gc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gc *GoalCreate) SetNillableStatus(s *string) *GoalCreate {
	if s != nil {
		gc.SetStatus(*s)
	}
	return gc
}

// SetCurrentTotalValue sets the "current_total_value" field.
func (gc *GoalCreate) SetCurrentTotalValue(s string) *GoalCreate {
	gc.mutation.SetCurrentTotalValue(s)
	return gc
}

// SetNillableCurrentTotalValue sets the "current_total_value" field if the given value is not nil.
func (gc *GoalCreate) SetNillableCurrentTotalValue(s *string) *GoalCreate {
	if s != nil {
		gc.SetCurrentTotalValue(*s)
	}
	return gc
}

// SetPerWorkoutData sets the "per_workout_data" field.
func (gc *GoalCreate) SetPerWorkoutData(swgde []shared.PerWorkoutGoalDataEntry) *GoalCreate {
	gc.mutation.SetPerWorkoutData(swgde)
	return gc
}

// SetID sets the "id" field.
func (gc *GoalCreate) SetID(u uuid.UUID) *GoalCreate {
	gc.mutation.SetID(u)
	return gc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gc *GoalCreate) SetNillableID(u *uuid.UUID) *GoalCreate {
	if u != nil {
		gc.SetID(*u)
	}
	return gc
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (gc *GoalCreate) SetProfileID(id uuid.UUID) *GoalCreate {
	gc.mutation.SetProfileID(id)
	return gc
}

// SetProfile sets the "profile" edge to the Profile entity.
func (gc *GoalCreate) SetProfile(p *Profile) *GoalCreate {
	return gc.SetProfileID(p.ID)
}

// SetCompetitionID sets the "competition" edge to the Competition entity by ID.
func (gc *GoalCreate) SetCompetitionID(id uuid.UUID) *GoalCreate {
	gc.mutation.SetCompetitionID(id)
	return gc
}

// SetNillableCompetitionID sets the "competition" edge to the Competition entity by ID if the given value is not nil.
func (gc *GoalCreate) SetNillableCompetitionID(id *uuid.UUID) *GoalCreate {
	if id != nil {
		gc = gc.SetCompetitionID(*id)
	}
	return gc
}

// SetCompetition sets the "competition" edge to the Competition entity.
func (gc *GoalCreate) SetCompetition(c *Competition) *GoalCreate {
	return gc.SetCompetitionID(c.ID)
}

// SetSquadID sets the "squad" edge to the Squad entity by ID.
func (gc *GoalCreate) SetSquadID(id uuid.UUID) *GoalCreate {
	gc.mutation.SetSquadID(id)
	return gc
}

// SetNillableSquadID sets the "squad" edge to the Squad entity by ID if the given value is not nil.
func (gc *GoalCreate) SetNillableSquadID(id *uuid.UUID) *GoalCreate {
	if id != nil {
		gc = gc.SetSquadID(*id)
	}
	return gc
}

// SetSquad sets the "squad" edge to the Squad entity.
func (gc *GoalCreate) SetSquad(s *Squad) *GoalCreate {
	return gc.SetSquadID(s.ID)
}

// Mutation returns the GoalMutation object of the builder.
func (gc *GoalCreate) Mutation() *GoalMutation {
	return gc.mutation
}

// Save creates the Goal in the database.
func (gc *GoalCreate) Save(ctx context.Context) (*Goal, error) {
	gc.defaults()
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GoalCreate) SaveX(ctx context.Context) *Goal {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GoalCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GoalCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GoalCreate) defaults() {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		v := goal.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		v := goal.DefaultUpdatedAt()
		gc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gc.mutation.Status(); !ok {
		v := goal.DefaultStatus
		gc.mutation.SetStatus(v)
	}
	if _, ok := gc.mutation.ID(); !ok {
		v := goal.DefaultID()
		gc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GoalCreate) check() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Goal.created_at"`)}
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Goal.updated_at"`)}
	}
	if _, ok := gc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Goal.type"`)}
	}
	if _, ok := gc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "Goal.start"`)}
	}
	if _, ok := gc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "Goal.end"`)}
	}
	if _, ok := gc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "Goal.action"`)}
	}
	if _, ok := gc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Goal.value"`)}
	}
	if _, ok := gc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "Goal.unit"`)}
	}
	if _, ok := gc.mutation.ValueAggregationType(); !ok {
		return &ValidationError{Name: "value_aggregation_type", err: errors.New(`ent: missing required field "Goal.value_aggregation_type"`)}
	}
	if _, ok := gc.mutation.TimeInterval(); !ok {
		return &ValidationError{Name: "time_interval", err: errors.New(`ent: missing required field "Goal.time_interval"`)}
	}
	if _, ok := gc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Goal.status"`)}
	}
	if _, ok := gc.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "profile", err: errors.New(`ent: missing required edge "Goal.profile"`)}
	}
	return nil
}

func (gc *GoalCreate) sqlSave(ctx context.Context) (*Goal, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GoalCreate) createSpec() (*Goal, *sqlgraph.CreateSpec) {
	var (
		_node = &Goal{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(goal.Table, sqlgraph.NewFieldSpec(goal.FieldID, field.TypeUUID))
	)
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(goal.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.SetField(goal.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gc.mutation.GetType(); ok {
		_spec.SetField(goal.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := gc.mutation.Start(); ok {
		_spec.SetField(goal.FieldStart, field.TypeTime, value)
		_node.Start = value
	}
	if value, ok := gc.mutation.End(); ok {
		_spec.SetField(goal.FieldEnd, field.TypeTime, value)
		_node.End = value
	}
	if value, ok := gc.mutation.HealthkitWorkoutActivityType(); ok {
		_spec.SetField(goal.FieldHealthkitWorkoutActivityType, field.TypeString, value)
		_node.HealthkitWorkoutActivityType = value
	}
	if value, ok := gc.mutation.Action(); ok {
		_spec.SetField(goal.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := gc.mutation.Value(); ok {
		_spec.SetField(goal.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := gc.mutation.Unit(); ok {
		_spec.SetField(goal.FieldUnit, field.TypeString, value)
		_node.Unit = value
	}
	if value, ok := gc.mutation.ValueAggregationType(); ok {
		_spec.SetField(goal.FieldValueAggregationType, field.TypeString, value)
		_node.ValueAggregationType = value
	}
	if value, ok := gc.mutation.TimeInterval(); ok {
		_spec.SetField(goal.FieldTimeInterval, field.TypeString, value)
		_node.TimeInterval = value
	}
	if value, ok := gc.mutation.Status(); ok {
		_spec.SetField(goal.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := gc.mutation.CurrentTotalValue(); ok {
		_spec.SetField(goal.FieldCurrentTotalValue, field.TypeString, value)
		_node.CurrentTotalValue = value
	}
	if value, ok := gc.mutation.PerWorkoutData(); ok {
		_spec.SetField(goal.FieldPerWorkoutData, field.TypeJSON, value)
		_node.PerWorkoutData = value
	}
	if nodes := gc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   goal.ProfileTable,
			Columns: []string{goal.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.goal_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   goal.CompetitionTable,
			Columns: []string{goal.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.goal_competition = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   goal.SquadTable,
			Columns: []string{goal.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.goal_squad = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GoalCreateBulk is the builder for creating many Goal entities in bulk.
type GoalCreateBulk struct {
	config
	builders []*GoalCreate
}

// Save creates the Goal entities in the database.
func (gcb *GoalCreateBulk) Save(ctx context.Context) ([]*Goal, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Goal, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GoalCreateBulk) SaveX(ctx context.Context) []*Goal {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GoalCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GoalCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
