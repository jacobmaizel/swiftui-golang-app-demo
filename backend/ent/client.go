// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/action"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/appconfig"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competition"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competitionresult"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/fcmtoken"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/goal"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/invite"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/notification"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/notificationpreferences"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/post"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/squad"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/user"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workout"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutdata"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutroutedata"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Action is the client for interacting with the Action builders.
	Action *ActionClient
	// AppConfig is the client for interacting with the AppConfig builders.
	AppConfig *AppConfigClient
	// Competition is the client for interacting with the Competition builders.
	Competition *CompetitionClient
	// CompetitionResult is the client for interacting with the CompetitionResult builders.
	CompetitionResult *CompetitionResultClient
	// FcmToken is the client for interacting with the FcmToken builders.
	FcmToken *FcmTokenClient
	// Goal is the client for interacting with the Goal builders.
	Goal *GoalClient
	// Invite is the client for interacting with the Invite builders.
	Invite *InviteClient
	// Notification is the client for interacting with the Notification builders.
	Notification *NotificationClient
	// NotificationPreferences is the client for interacting with the NotificationPreferences builders.
	NotificationPreferences *NotificationPreferencesClient
	// Post is the client for interacting with the Post builders.
	Post *PostClient
	// Profile is the client for interacting with the Profile builders.
	Profile *ProfileClient
	// Squad is the client for interacting with the Squad builders.
	Squad *SquadClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Workout is the client for interacting with the Workout builders.
	Workout *WorkoutClient
	// WorkoutData is the client for interacting with the WorkoutData builders.
	WorkoutData *WorkoutDataClient
	// WorkoutRouteData is the client for interacting with the WorkoutRouteData builders.
	WorkoutRouteData *WorkoutRouteDataClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Action = NewActionClient(c.config)
	c.AppConfig = NewAppConfigClient(c.config)
	c.Competition = NewCompetitionClient(c.config)
	c.CompetitionResult = NewCompetitionResultClient(c.config)
	c.FcmToken = NewFcmTokenClient(c.config)
	c.Goal = NewGoalClient(c.config)
	c.Invite = NewInviteClient(c.config)
	c.Notification = NewNotificationClient(c.config)
	c.NotificationPreferences = NewNotificationPreferencesClient(c.config)
	c.Post = NewPostClient(c.config)
	c.Profile = NewProfileClient(c.config)
	c.Squad = NewSquadClient(c.config)
	c.User = NewUserClient(c.config)
	c.Workout = NewWorkoutClient(c.config)
	c.WorkoutData = NewWorkoutDataClient(c.config)
	c.WorkoutRouteData = NewWorkoutRouteDataClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Action:                  NewActionClient(cfg),
		AppConfig:               NewAppConfigClient(cfg),
		Competition:             NewCompetitionClient(cfg),
		CompetitionResult:       NewCompetitionResultClient(cfg),
		FcmToken:                NewFcmTokenClient(cfg),
		Goal:                    NewGoalClient(cfg),
		Invite:                  NewInviteClient(cfg),
		Notification:            NewNotificationClient(cfg),
		NotificationPreferences: NewNotificationPreferencesClient(cfg),
		Post:                    NewPostClient(cfg),
		Profile:                 NewProfileClient(cfg),
		Squad:                   NewSquadClient(cfg),
		User:                    NewUserClient(cfg),
		Workout:                 NewWorkoutClient(cfg),
		WorkoutData:             NewWorkoutDataClient(cfg),
		WorkoutRouteData:        NewWorkoutRouteDataClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Action:                  NewActionClient(cfg),
		AppConfig:               NewAppConfigClient(cfg),
		Competition:             NewCompetitionClient(cfg),
		CompetitionResult:       NewCompetitionResultClient(cfg),
		FcmToken:                NewFcmTokenClient(cfg),
		Goal:                    NewGoalClient(cfg),
		Invite:                  NewInviteClient(cfg),
		Notification:            NewNotificationClient(cfg),
		NotificationPreferences: NewNotificationPreferencesClient(cfg),
		Post:                    NewPostClient(cfg),
		Profile:                 NewProfileClient(cfg),
		Squad:                   NewSquadClient(cfg),
		User:                    NewUserClient(cfg),
		Workout:                 NewWorkoutClient(cfg),
		WorkoutData:             NewWorkoutDataClient(cfg),
		WorkoutRouteData:        NewWorkoutRouteDataClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Action.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Action, c.AppConfig, c.Competition, c.CompetitionResult, c.FcmToken, c.Goal,
		c.Invite, c.Notification, c.NotificationPreferences, c.Post, c.Profile,
		c.Squad, c.User, c.Workout, c.WorkoutData, c.WorkoutRouteData,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Action, c.AppConfig, c.Competition, c.CompetitionResult, c.FcmToken, c.Goal,
		c.Invite, c.Notification, c.NotificationPreferences, c.Post, c.Profile,
		c.Squad, c.User, c.Workout, c.WorkoutData, c.WorkoutRouteData,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ActionMutation:
		return c.Action.mutate(ctx, m)
	case *AppConfigMutation:
		return c.AppConfig.mutate(ctx, m)
	case *CompetitionMutation:
		return c.Competition.mutate(ctx, m)
	case *CompetitionResultMutation:
		return c.CompetitionResult.mutate(ctx, m)
	case *FcmTokenMutation:
		return c.FcmToken.mutate(ctx, m)
	case *GoalMutation:
		return c.Goal.mutate(ctx, m)
	case *InviteMutation:
		return c.Invite.mutate(ctx, m)
	case *NotificationMutation:
		return c.Notification.mutate(ctx, m)
	case *NotificationPreferencesMutation:
		return c.NotificationPreferences.mutate(ctx, m)
	case *PostMutation:
		return c.Post.mutate(ctx, m)
	case *ProfileMutation:
		return c.Profile.mutate(ctx, m)
	case *SquadMutation:
		return c.Squad.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *WorkoutMutation:
		return c.Workout.mutate(ctx, m)
	case *WorkoutDataMutation:
		return c.WorkoutData.mutate(ctx, m)
	case *WorkoutRouteDataMutation:
		return c.WorkoutRouteData.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ActionClient is a client for the Action schema.
type ActionClient struct {
	config
}

// NewActionClient returns a client for the Action from the given config.
func NewActionClient(c config) *ActionClient {
	return &ActionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `action.Hooks(f(g(h())))`.
func (c *ActionClient) Use(hooks ...Hook) {
	c.hooks.Action = append(c.hooks.Action, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `action.Intercept(f(g(h())))`.
func (c *ActionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Action = append(c.inters.Action, interceptors...)
}

// Create returns a builder for creating a Action entity.
func (c *ActionClient) Create() *ActionCreate {
	mutation := newActionMutation(c.config, OpCreate)
	return &ActionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Action entities.
func (c *ActionClient) CreateBulk(builders ...*ActionCreate) *ActionCreateBulk {
	return &ActionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Action.
func (c *ActionClient) Update() *ActionUpdate {
	mutation := newActionMutation(c.config, OpUpdate)
	return &ActionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActionClient) UpdateOne(a *Action) *ActionUpdateOne {
	mutation := newActionMutation(c.config, OpUpdateOne, withAction(a))
	return &ActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActionClient) UpdateOneID(id uuid.UUID) *ActionUpdateOne {
	mutation := newActionMutation(c.config, OpUpdateOne, withActionID(id))
	return &ActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Action.
func (c *ActionClient) Delete() *ActionDelete {
	mutation := newActionMutation(c.config, OpDelete)
	return &ActionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActionClient) DeleteOne(a *Action) *ActionDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActionClient) DeleteOneID(id uuid.UUID) *ActionDeleteOne {
	builder := c.Delete().Where(action.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActionDeleteOne{builder}
}

// Query returns a query builder for Action.
func (c *ActionClient) Query() *ActionQuery {
	return &ActionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAction},
		inters: c.Interceptors(),
	}
}

// Get returns a Action entity by its id.
func (c *ActionClient) Get(ctx context.Context, id uuid.UUID) (*Action, error) {
	return c.Query().Where(action.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActionClient) GetX(ctx context.Context, id uuid.UUID) *Action {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySender queries the sender edge of a Action.
func (c *ActionClient) QuerySender(a *Action) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(action.Table, action.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, action.SenderTable, action.SenderColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActionClient) Hooks() []Hook {
	return c.hooks.Action
}

// Interceptors returns the client interceptors.
func (c *ActionClient) Interceptors() []Interceptor {
	return c.inters.Action
}

func (c *ActionClient) mutate(ctx context.Context, m *ActionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Action mutation op: %q", m.Op())
	}
}

// AppConfigClient is a client for the AppConfig schema.
type AppConfigClient struct {
	config
}

// NewAppConfigClient returns a client for the AppConfig from the given config.
func NewAppConfigClient(c config) *AppConfigClient {
	return &AppConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appconfig.Hooks(f(g(h())))`.
func (c *AppConfigClient) Use(hooks ...Hook) {
	c.hooks.AppConfig = append(c.hooks.AppConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appconfig.Intercept(f(g(h())))`.
func (c *AppConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppConfig = append(c.inters.AppConfig, interceptors...)
}

// Create returns a builder for creating a AppConfig entity.
func (c *AppConfigClient) Create() *AppConfigCreate {
	mutation := newAppConfigMutation(c.config, OpCreate)
	return &AppConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppConfig entities.
func (c *AppConfigClient) CreateBulk(builders ...*AppConfigCreate) *AppConfigCreateBulk {
	return &AppConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppConfig.
func (c *AppConfigClient) Update() *AppConfigUpdate {
	mutation := newAppConfigMutation(c.config, OpUpdate)
	return &AppConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppConfigClient) UpdateOne(ac *AppConfig) *AppConfigUpdateOne {
	mutation := newAppConfigMutation(c.config, OpUpdateOne, withAppConfig(ac))
	return &AppConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppConfigClient) UpdateOneID(id uuid.UUID) *AppConfigUpdateOne {
	mutation := newAppConfigMutation(c.config, OpUpdateOne, withAppConfigID(id))
	return &AppConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppConfig.
func (c *AppConfigClient) Delete() *AppConfigDelete {
	mutation := newAppConfigMutation(c.config, OpDelete)
	return &AppConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppConfigClient) DeleteOne(ac *AppConfig) *AppConfigDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppConfigClient) DeleteOneID(id uuid.UUID) *AppConfigDeleteOne {
	builder := c.Delete().Where(appconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppConfigDeleteOne{builder}
}

// Query returns a query builder for AppConfig.
func (c *AppConfigClient) Query() *AppConfigQuery {
	return &AppConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a AppConfig entity by its id.
func (c *AppConfigClient) Get(ctx context.Context, id uuid.UUID) (*AppConfig, error) {
	return c.Query().Where(appconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppConfigClient) GetX(ctx context.Context, id uuid.UUID) *AppConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfile queries the profile edge of a AppConfig.
func (c *AppConfigClient) QueryProfile(ac *AppConfig) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appconfig.Table, appconfig.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, appconfig.ProfileTable, appconfig.ProfileColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppConfigClient) Hooks() []Hook {
	return c.hooks.AppConfig
}

// Interceptors returns the client interceptors.
func (c *AppConfigClient) Interceptors() []Interceptor {
	return c.inters.AppConfig
}

func (c *AppConfigClient) mutate(ctx context.Context, m *AppConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppConfig mutation op: %q", m.Op())
	}
}

// CompetitionClient is a client for the Competition schema.
type CompetitionClient struct {
	config
}

// NewCompetitionClient returns a client for the Competition from the given config.
func NewCompetitionClient(c config) *CompetitionClient {
	return &CompetitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `competition.Hooks(f(g(h())))`.
func (c *CompetitionClient) Use(hooks ...Hook) {
	c.hooks.Competition = append(c.hooks.Competition, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `competition.Intercept(f(g(h())))`.
func (c *CompetitionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Competition = append(c.inters.Competition, interceptors...)
}

// Create returns a builder for creating a Competition entity.
func (c *CompetitionClient) Create() *CompetitionCreate {
	mutation := newCompetitionMutation(c.config, OpCreate)
	return &CompetitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Competition entities.
func (c *CompetitionClient) CreateBulk(builders ...*CompetitionCreate) *CompetitionCreateBulk {
	return &CompetitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Competition.
func (c *CompetitionClient) Update() *CompetitionUpdate {
	mutation := newCompetitionMutation(c.config, OpUpdate)
	return &CompetitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompetitionClient) UpdateOne(co *Competition) *CompetitionUpdateOne {
	mutation := newCompetitionMutation(c.config, OpUpdateOne, withCompetition(co))
	return &CompetitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompetitionClient) UpdateOneID(id uuid.UUID) *CompetitionUpdateOne {
	mutation := newCompetitionMutation(c.config, OpUpdateOne, withCompetitionID(id))
	return &CompetitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Competition.
func (c *CompetitionClient) Delete() *CompetitionDelete {
	mutation := newCompetitionMutation(c.config, OpDelete)
	return &CompetitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompetitionClient) DeleteOne(co *Competition) *CompetitionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompetitionClient) DeleteOneID(id uuid.UUID) *CompetitionDeleteOne {
	builder := c.Delete().Where(competition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompetitionDeleteOne{builder}
}

// Query returns a query builder for Competition.
func (c *CompetitionClient) Query() *CompetitionQuery {
	return &CompetitionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompetition},
		inters: c.Interceptors(),
	}
}

// Get returns a Competition entity by its id.
func (c *CompetitionClient) Get(ctx context.Context, id uuid.UUID) (*Competition, error) {
	return c.Query().Where(competition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompetitionClient) GetX(ctx context.Context, id uuid.UUID) *Competition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Competition.
func (c *CompetitionClient) QueryOwner(co *Competition) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(competition.Table, competition.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, competition.OwnerTable, competition.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParticipants queries the participants edge of a Competition.
func (c *CompetitionClient) QueryParticipants(co *Competition) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(competition.Table, competition.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, competition.ParticipantsTable, competition.ParticipantsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkouts queries the workouts edge of a Competition.
func (c *CompetitionClient) QueryWorkouts(co *Competition) *WorkoutQuery {
	query := (&WorkoutClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(competition.Table, competition.FieldID, id),
			sqlgraph.To(workout.Table, workout.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, competition.WorkoutsTable, competition.WorkoutsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkoutData queries the workout_data edge of a Competition.
func (c *CompetitionClient) QueryWorkoutData(co *Competition) *WorkoutDataQuery {
	query := (&WorkoutDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(competition.Table, competition.FieldID, id),
			sqlgraph.To(workoutdata.Table, workoutdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, competition.WorkoutDataTable, competition.WorkoutDataColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResults queries the results edge of a Competition.
func (c *CompetitionClient) QueryResults(co *Competition) *CompetitionResultQuery {
	query := (&CompetitionResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(competition.Table, competition.FieldID, id),
			sqlgraph.To(competitionresult.Table, competitionresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, competition.ResultsTable, competition.ResultsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompetitionClient) Hooks() []Hook {
	hooks := c.hooks.Competition
	return append(hooks[:len(hooks):len(hooks)], competition.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CompetitionClient) Interceptors() []Interceptor {
	return c.inters.Competition
}

func (c *CompetitionClient) mutate(ctx context.Context, m *CompetitionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompetitionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompetitionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompetitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompetitionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Competition mutation op: %q", m.Op())
	}
}

// CompetitionResultClient is a client for the CompetitionResult schema.
type CompetitionResultClient struct {
	config
}

// NewCompetitionResultClient returns a client for the CompetitionResult from the given config.
func NewCompetitionResultClient(c config) *CompetitionResultClient {
	return &CompetitionResultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `competitionresult.Hooks(f(g(h())))`.
func (c *CompetitionResultClient) Use(hooks ...Hook) {
	c.hooks.CompetitionResult = append(c.hooks.CompetitionResult, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `competitionresult.Intercept(f(g(h())))`.
func (c *CompetitionResultClient) Intercept(interceptors ...Interceptor) {
	c.inters.CompetitionResult = append(c.inters.CompetitionResult, interceptors...)
}

// Create returns a builder for creating a CompetitionResult entity.
func (c *CompetitionResultClient) Create() *CompetitionResultCreate {
	mutation := newCompetitionResultMutation(c.config, OpCreate)
	return &CompetitionResultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CompetitionResult entities.
func (c *CompetitionResultClient) CreateBulk(builders ...*CompetitionResultCreate) *CompetitionResultCreateBulk {
	return &CompetitionResultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CompetitionResult.
func (c *CompetitionResultClient) Update() *CompetitionResultUpdate {
	mutation := newCompetitionResultMutation(c.config, OpUpdate)
	return &CompetitionResultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompetitionResultClient) UpdateOne(cr *CompetitionResult) *CompetitionResultUpdateOne {
	mutation := newCompetitionResultMutation(c.config, OpUpdateOne, withCompetitionResult(cr))
	return &CompetitionResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompetitionResultClient) UpdateOneID(id uuid.UUID) *CompetitionResultUpdateOne {
	mutation := newCompetitionResultMutation(c.config, OpUpdateOne, withCompetitionResultID(id))
	return &CompetitionResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CompetitionResult.
func (c *CompetitionResultClient) Delete() *CompetitionResultDelete {
	mutation := newCompetitionResultMutation(c.config, OpDelete)
	return &CompetitionResultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompetitionResultClient) DeleteOne(cr *CompetitionResult) *CompetitionResultDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompetitionResultClient) DeleteOneID(id uuid.UUID) *CompetitionResultDeleteOne {
	builder := c.Delete().Where(competitionresult.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompetitionResultDeleteOne{builder}
}

// Query returns a query builder for CompetitionResult.
func (c *CompetitionResultClient) Query() *CompetitionResultQuery {
	return &CompetitionResultQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompetitionResult},
		inters: c.Interceptors(),
	}
}

// Get returns a CompetitionResult entity by its id.
func (c *CompetitionResultClient) Get(ctx context.Context, id uuid.UUID) (*CompetitionResult, error) {
	return c.Query().Where(competitionresult.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompetitionResultClient) GetX(ctx context.Context, id uuid.UUID) *CompetitionResult {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCompetition queries the competition edge of a CompetitionResult.
func (c *CompetitionResultClient) QueryCompetition(cr *CompetitionResult) *CompetitionQuery {
	query := (&CompetitionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(competitionresult.Table, competitionresult.FieldID, id),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, competitionresult.CompetitionTable, competitionresult.CompetitionColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProfile queries the profile edge of a CompetitionResult.
func (c *CompetitionResultClient) QueryProfile(cr *CompetitionResult) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(competitionresult.Table, competitionresult.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, competitionresult.ProfileTable, competitionresult.ProfileColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySquad queries the squad edge of a CompetitionResult.
func (c *CompetitionResultClient) QuerySquad(cr *CompetitionResult) *SquadQuery {
	query := (&SquadClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(competitionresult.Table, competitionresult.FieldID, id),
			sqlgraph.To(squad.Table, squad.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, competitionresult.SquadTable, competitionresult.SquadColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompetitionResultClient) Hooks() []Hook {
	return c.hooks.CompetitionResult
}

// Interceptors returns the client interceptors.
func (c *CompetitionResultClient) Interceptors() []Interceptor {
	return c.inters.CompetitionResult
}

func (c *CompetitionResultClient) mutate(ctx context.Context, m *CompetitionResultMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompetitionResultCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompetitionResultUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompetitionResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompetitionResultDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CompetitionResult mutation op: %q", m.Op())
	}
}

// FcmTokenClient is a client for the FcmToken schema.
type FcmTokenClient struct {
	config
}

// NewFcmTokenClient returns a client for the FcmToken from the given config.
func NewFcmTokenClient(c config) *FcmTokenClient {
	return &FcmTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fcmtoken.Hooks(f(g(h())))`.
func (c *FcmTokenClient) Use(hooks ...Hook) {
	c.hooks.FcmToken = append(c.hooks.FcmToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fcmtoken.Intercept(f(g(h())))`.
func (c *FcmTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.FcmToken = append(c.inters.FcmToken, interceptors...)
}

// Create returns a builder for creating a FcmToken entity.
func (c *FcmTokenClient) Create() *FcmTokenCreate {
	mutation := newFcmTokenMutation(c.config, OpCreate)
	return &FcmTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FcmToken entities.
func (c *FcmTokenClient) CreateBulk(builders ...*FcmTokenCreate) *FcmTokenCreateBulk {
	return &FcmTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FcmToken.
func (c *FcmTokenClient) Update() *FcmTokenUpdate {
	mutation := newFcmTokenMutation(c.config, OpUpdate)
	return &FcmTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FcmTokenClient) UpdateOne(ft *FcmToken) *FcmTokenUpdateOne {
	mutation := newFcmTokenMutation(c.config, OpUpdateOne, withFcmToken(ft))
	return &FcmTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FcmTokenClient) UpdateOneID(id uuid.UUID) *FcmTokenUpdateOne {
	mutation := newFcmTokenMutation(c.config, OpUpdateOne, withFcmTokenID(id))
	return &FcmTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FcmToken.
func (c *FcmTokenClient) Delete() *FcmTokenDelete {
	mutation := newFcmTokenMutation(c.config, OpDelete)
	return &FcmTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FcmTokenClient) DeleteOne(ft *FcmToken) *FcmTokenDeleteOne {
	return c.DeleteOneID(ft.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FcmTokenClient) DeleteOneID(id uuid.UUID) *FcmTokenDeleteOne {
	builder := c.Delete().Where(fcmtoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FcmTokenDeleteOne{builder}
}

// Query returns a query builder for FcmToken.
func (c *FcmTokenClient) Query() *FcmTokenQuery {
	return &FcmTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFcmToken},
		inters: c.Interceptors(),
	}
}

// Get returns a FcmToken entity by its id.
func (c *FcmTokenClient) Get(ctx context.Context, id uuid.UUID) (*FcmToken, error) {
	return c.Query().Where(fcmtoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FcmTokenClient) GetX(ctx context.Context, id uuid.UUID) *FcmToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfile queries the profile edge of a FcmToken.
func (c *FcmTokenClient) QueryProfile(ft *FcmToken) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fcmtoken.Table, fcmtoken.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fcmtoken.ProfileTable, fcmtoken.ProfileColumn),
		)
		fromV = sqlgraph.Neighbors(ft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FcmTokenClient) Hooks() []Hook {
	return c.hooks.FcmToken
}

// Interceptors returns the client interceptors.
func (c *FcmTokenClient) Interceptors() []Interceptor {
	return c.inters.FcmToken
}

func (c *FcmTokenClient) mutate(ctx context.Context, m *FcmTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FcmTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FcmTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FcmTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FcmTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FcmToken mutation op: %q", m.Op())
	}
}

// GoalClient is a client for the Goal schema.
type GoalClient struct {
	config
}

// NewGoalClient returns a client for the Goal from the given config.
func NewGoalClient(c config) *GoalClient {
	return &GoalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goal.Hooks(f(g(h())))`.
func (c *GoalClient) Use(hooks ...Hook) {
	c.hooks.Goal = append(c.hooks.Goal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `goal.Intercept(f(g(h())))`.
func (c *GoalClient) Intercept(interceptors ...Interceptor) {
	c.inters.Goal = append(c.inters.Goal, interceptors...)
}

// Create returns a builder for creating a Goal entity.
func (c *GoalClient) Create() *GoalCreate {
	mutation := newGoalMutation(c.config, OpCreate)
	return &GoalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Goal entities.
func (c *GoalClient) CreateBulk(builders ...*GoalCreate) *GoalCreateBulk {
	return &GoalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Goal.
func (c *GoalClient) Update() *GoalUpdate {
	mutation := newGoalMutation(c.config, OpUpdate)
	return &GoalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoalClient) UpdateOne(_go *Goal) *GoalUpdateOne {
	mutation := newGoalMutation(c.config, OpUpdateOne, withGoal(_go))
	return &GoalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoalClient) UpdateOneID(id uuid.UUID) *GoalUpdateOne {
	mutation := newGoalMutation(c.config, OpUpdateOne, withGoalID(id))
	return &GoalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Goal.
func (c *GoalClient) Delete() *GoalDelete {
	mutation := newGoalMutation(c.config, OpDelete)
	return &GoalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoalClient) DeleteOne(_go *Goal) *GoalDeleteOne {
	return c.DeleteOneID(_go.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GoalClient) DeleteOneID(id uuid.UUID) *GoalDeleteOne {
	builder := c.Delete().Where(goal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoalDeleteOne{builder}
}

// Query returns a query builder for Goal.
func (c *GoalClient) Query() *GoalQuery {
	return &GoalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGoal},
		inters: c.Interceptors(),
	}
}

// Get returns a Goal entity by its id.
func (c *GoalClient) Get(ctx context.Context, id uuid.UUID) (*Goal, error) {
	return c.Query().Where(goal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoalClient) GetX(ctx context.Context, id uuid.UUID) *Goal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfile queries the profile edge of a Goal.
func (c *GoalClient) QueryProfile(_go *Goal) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _go.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goal.Table, goal.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, goal.ProfileTable, goal.ProfileColumn),
		)
		fromV = sqlgraph.Neighbors(_go.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompetition queries the competition edge of a Goal.
func (c *GoalClient) QueryCompetition(_go *Goal) *CompetitionQuery {
	query := (&CompetitionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _go.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goal.Table, goal.FieldID, id),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, goal.CompetitionTable, goal.CompetitionColumn),
		)
		fromV = sqlgraph.Neighbors(_go.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySquad queries the squad edge of a Goal.
func (c *GoalClient) QuerySquad(_go *Goal) *SquadQuery {
	query := (&SquadClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _go.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goal.Table, goal.FieldID, id),
			sqlgraph.To(squad.Table, squad.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, goal.SquadTable, goal.SquadColumn),
		)
		fromV = sqlgraph.Neighbors(_go.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoalClient) Hooks() []Hook {
	return c.hooks.Goal
}

// Interceptors returns the client interceptors.
func (c *GoalClient) Interceptors() []Interceptor {
	return c.inters.Goal
}

func (c *GoalClient) mutate(ctx context.Context, m *GoalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GoalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GoalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GoalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GoalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Goal mutation op: %q", m.Op())
	}
}

// InviteClient is a client for the Invite schema.
type InviteClient struct {
	config
}

// NewInviteClient returns a client for the Invite from the given config.
func NewInviteClient(c config) *InviteClient {
	return &InviteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invite.Hooks(f(g(h())))`.
func (c *InviteClient) Use(hooks ...Hook) {
	c.hooks.Invite = append(c.hooks.Invite, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `invite.Intercept(f(g(h())))`.
func (c *InviteClient) Intercept(interceptors ...Interceptor) {
	c.inters.Invite = append(c.inters.Invite, interceptors...)
}

// Create returns a builder for creating a Invite entity.
func (c *InviteClient) Create() *InviteCreate {
	mutation := newInviteMutation(c.config, OpCreate)
	return &InviteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Invite entities.
func (c *InviteClient) CreateBulk(builders ...*InviteCreate) *InviteCreateBulk {
	return &InviteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Invite.
func (c *InviteClient) Update() *InviteUpdate {
	mutation := newInviteMutation(c.config, OpUpdate)
	return &InviteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InviteClient) UpdateOne(i *Invite) *InviteUpdateOne {
	mutation := newInviteMutation(c.config, OpUpdateOne, withInvite(i))
	return &InviteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InviteClient) UpdateOneID(id uuid.UUID) *InviteUpdateOne {
	mutation := newInviteMutation(c.config, OpUpdateOne, withInviteID(id))
	return &InviteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Invite.
func (c *InviteClient) Delete() *InviteDelete {
	mutation := newInviteMutation(c.config, OpDelete)
	return &InviteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InviteClient) DeleteOne(i *Invite) *InviteDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InviteClient) DeleteOneID(id uuid.UUID) *InviteDeleteOne {
	builder := c.Delete().Where(invite.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InviteDeleteOne{builder}
}

// Query returns a query builder for Invite.
func (c *InviteClient) Query() *InviteQuery {
	return &InviteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInvite},
		inters: c.Interceptors(),
	}
}

// Get returns a Invite entity by its id.
func (c *InviteClient) Get(ctx context.Context, id uuid.UUID) (*Invite, error) {
	return c.Query().Where(invite.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InviteClient) GetX(ctx context.Context, id uuid.UUID) *Invite {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySender queries the sender edge of a Invite.
func (c *InviteClient) QuerySender(i *Invite) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invite.Table, invite.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invite.SenderTable, invite.SenderColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReceiver queries the receiver edge of a Invite.
func (c *InviteClient) QueryReceiver(i *Invite) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invite.Table, invite.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invite.ReceiverTable, invite.ReceiverColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySquad queries the squad edge of a Invite.
func (c *InviteClient) QuerySquad(i *Invite) *SquadQuery {
	query := (&SquadClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invite.Table, invite.FieldID, id),
			sqlgraph.To(squad.Table, squad.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invite.SquadTable, invite.SquadColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompetition queries the competition edge of a Invite.
func (c *InviteClient) QueryCompetition(i *Invite) *CompetitionQuery {
	query := (&CompetitionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invite.Table, invite.FieldID, id),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invite.CompetitionTable, invite.CompetitionColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkout queries the workout edge of a Invite.
func (c *InviteClient) QueryWorkout(i *Invite) *WorkoutQuery {
	query := (&WorkoutClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invite.Table, invite.FieldID, id),
			sqlgraph.To(workout.Table, workout.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invite.WorkoutTable, invite.WorkoutColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InviteClient) Hooks() []Hook {
	return c.hooks.Invite
}

// Interceptors returns the client interceptors.
func (c *InviteClient) Interceptors() []Interceptor {
	return c.inters.Invite
}

func (c *InviteClient) mutate(ctx context.Context, m *InviteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InviteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InviteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InviteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InviteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Invite mutation op: %q", m.Op())
	}
}

// NotificationClient is a client for the Notification schema.
type NotificationClient struct {
	config
}

// NewNotificationClient returns a client for the Notification from the given config.
func NewNotificationClient(c config) *NotificationClient {
	return &NotificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notification.Hooks(f(g(h())))`.
func (c *NotificationClient) Use(hooks ...Hook) {
	c.hooks.Notification = append(c.hooks.Notification, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notification.Intercept(f(g(h())))`.
func (c *NotificationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Notification = append(c.inters.Notification, interceptors...)
}

// Create returns a builder for creating a Notification entity.
func (c *NotificationClient) Create() *NotificationCreate {
	mutation := newNotificationMutation(c.config, OpCreate)
	return &NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Notification entities.
func (c *NotificationClient) CreateBulk(builders ...*NotificationCreate) *NotificationCreateBulk {
	return &NotificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Notification.
func (c *NotificationClient) Update() *NotificationUpdate {
	mutation := newNotificationMutation(c.config, OpUpdate)
	return &NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationClient) UpdateOne(n *Notification) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotification(n))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationClient) UpdateOneID(id uuid.UUID) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotificationID(id))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Notification.
func (c *NotificationClient) Delete() *NotificationDelete {
	mutation := newNotificationMutation(c.config, OpDelete)
	return &NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationClient) DeleteOne(n *Notification) *NotificationDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationClient) DeleteOneID(id uuid.UUID) *NotificationDeleteOne {
	builder := c.Delete().Where(notification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationDeleteOne{builder}
}

// Query returns a query builder for Notification.
func (c *NotificationClient) Query() *NotificationQuery {
	return &NotificationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotification},
		inters: c.Interceptors(),
	}
}

// Get returns a Notification entity by its id.
func (c *NotificationClient) Get(ctx context.Context, id uuid.UUID) (*Notification, error) {
	return c.Query().Where(notification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationClient) GetX(ctx context.Context, id uuid.UUID) *Notification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfile queries the profile edge of a Notification.
func (c *NotificationClient) QueryProfile(n *Notification) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notification.ProfileTable, notification.ProfileColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationClient) Hooks() []Hook {
	return c.hooks.Notification
}

// Interceptors returns the client interceptors.
func (c *NotificationClient) Interceptors() []Interceptor {
	return c.inters.Notification
}

func (c *NotificationClient) mutate(ctx context.Context, m *NotificationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Notification mutation op: %q", m.Op())
	}
}

// NotificationPreferencesClient is a client for the NotificationPreferences schema.
type NotificationPreferencesClient struct {
	config
}

// NewNotificationPreferencesClient returns a client for the NotificationPreferences from the given config.
func NewNotificationPreferencesClient(c config) *NotificationPreferencesClient {
	return &NotificationPreferencesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationpreferences.Hooks(f(g(h())))`.
func (c *NotificationPreferencesClient) Use(hooks ...Hook) {
	c.hooks.NotificationPreferences = append(c.hooks.NotificationPreferences, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationpreferences.Intercept(f(g(h())))`.
func (c *NotificationPreferencesClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationPreferences = append(c.inters.NotificationPreferences, interceptors...)
}

// Create returns a builder for creating a NotificationPreferences entity.
func (c *NotificationPreferencesClient) Create() *NotificationPreferencesCreate {
	mutation := newNotificationPreferencesMutation(c.config, OpCreate)
	return &NotificationPreferencesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationPreferences entities.
func (c *NotificationPreferencesClient) CreateBulk(builders ...*NotificationPreferencesCreate) *NotificationPreferencesCreateBulk {
	return &NotificationPreferencesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationPreferences.
func (c *NotificationPreferencesClient) Update() *NotificationPreferencesUpdate {
	mutation := newNotificationPreferencesMutation(c.config, OpUpdate)
	return &NotificationPreferencesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationPreferencesClient) UpdateOne(np *NotificationPreferences) *NotificationPreferencesUpdateOne {
	mutation := newNotificationPreferencesMutation(c.config, OpUpdateOne, withNotificationPreferences(np))
	return &NotificationPreferencesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationPreferencesClient) UpdateOneID(id uuid.UUID) *NotificationPreferencesUpdateOne {
	mutation := newNotificationPreferencesMutation(c.config, OpUpdateOne, withNotificationPreferencesID(id))
	return &NotificationPreferencesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationPreferences.
func (c *NotificationPreferencesClient) Delete() *NotificationPreferencesDelete {
	mutation := newNotificationPreferencesMutation(c.config, OpDelete)
	return &NotificationPreferencesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationPreferencesClient) DeleteOne(np *NotificationPreferences) *NotificationPreferencesDeleteOne {
	return c.DeleteOneID(np.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationPreferencesClient) DeleteOneID(id uuid.UUID) *NotificationPreferencesDeleteOne {
	builder := c.Delete().Where(notificationpreferences.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationPreferencesDeleteOne{builder}
}

// Query returns a query builder for NotificationPreferences.
func (c *NotificationPreferencesClient) Query() *NotificationPreferencesQuery {
	return &NotificationPreferencesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationPreferences},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationPreferences entity by its id.
func (c *NotificationPreferencesClient) Get(ctx context.Context, id uuid.UUID) (*NotificationPreferences, error) {
	return c.Query().Where(notificationpreferences.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationPreferencesClient) GetX(ctx context.Context, id uuid.UUID) *NotificationPreferences {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfile queries the profile edge of a NotificationPreferences.
func (c *NotificationPreferencesClient) QueryProfile(np *NotificationPreferences) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := np.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationpreferences.Table, notificationpreferences.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, notificationpreferences.ProfileTable, notificationpreferences.ProfileColumn),
		)
		fromV = sqlgraph.Neighbors(np.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationPreferencesClient) Hooks() []Hook {
	return c.hooks.NotificationPreferences
}

// Interceptors returns the client interceptors.
func (c *NotificationPreferencesClient) Interceptors() []Interceptor {
	return c.inters.NotificationPreferences
}

func (c *NotificationPreferencesClient) mutate(ctx context.Context, m *NotificationPreferencesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationPreferencesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationPreferencesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationPreferencesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationPreferencesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotificationPreferences mutation op: %q", m.Op())
	}
}

// PostClient is a client for the Post schema.
type PostClient struct {
	config
}

// NewPostClient returns a client for the Post from the given config.
func NewPostClient(c config) *PostClient {
	return &PostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `post.Hooks(f(g(h())))`.
func (c *PostClient) Use(hooks ...Hook) {
	c.hooks.Post = append(c.hooks.Post, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `post.Intercept(f(g(h())))`.
func (c *PostClient) Intercept(interceptors ...Interceptor) {
	c.inters.Post = append(c.inters.Post, interceptors...)
}

// Create returns a builder for creating a Post entity.
func (c *PostClient) Create() *PostCreate {
	mutation := newPostMutation(c.config, OpCreate)
	return &PostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Post entities.
func (c *PostClient) CreateBulk(builders ...*PostCreate) *PostCreateBulk {
	return &PostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Post.
func (c *PostClient) Update() *PostUpdate {
	mutation := newPostMutation(c.config, OpUpdate)
	return &PostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostClient) UpdateOne(po *Post) *PostUpdateOne {
	mutation := newPostMutation(c.config, OpUpdateOne, withPost(po))
	return &PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostClient) UpdateOneID(id uuid.UUID) *PostUpdateOne {
	mutation := newPostMutation(c.config, OpUpdateOne, withPostID(id))
	return &PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Post.
func (c *PostClient) Delete() *PostDelete {
	mutation := newPostMutation(c.config, OpDelete)
	return &PostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PostClient) DeleteOne(po *Post) *PostDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PostClient) DeleteOneID(id uuid.UUID) *PostDeleteOne {
	builder := c.Delete().Where(post.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostDeleteOne{builder}
}

// Query returns a query builder for Post.
func (c *PostClient) Query() *PostQuery {
	return &PostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePost},
		inters: c.Interceptors(),
	}
}

// Get returns a Post entity by its id.
func (c *PostClient) Get(ctx context.Context, id uuid.UUID) (*Post, error) {
	return c.Query().Where(post.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostClient) GetX(ctx context.Context, id uuid.UUID) *Post {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PostClient) Hooks() []Hook {
	return c.hooks.Post
}

// Interceptors returns the client interceptors.
func (c *PostClient) Interceptors() []Interceptor {
	return c.inters.Post
}

func (c *PostClient) mutate(ctx context.Context, m *PostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Post mutation op: %q", m.Op())
	}
}

// ProfileClient is a client for the Profile schema.
type ProfileClient struct {
	config
}

// NewProfileClient returns a client for the Profile from the given config.
func NewProfileClient(c config) *ProfileClient {
	return &ProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `profile.Hooks(f(g(h())))`.
func (c *ProfileClient) Use(hooks ...Hook) {
	c.hooks.Profile = append(c.hooks.Profile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `profile.Intercept(f(g(h())))`.
func (c *ProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.Profile = append(c.inters.Profile, interceptors...)
}

// Create returns a builder for creating a Profile entity.
func (c *ProfileClient) Create() *ProfileCreate {
	mutation := newProfileMutation(c.config, OpCreate)
	return &ProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Profile entities.
func (c *ProfileClient) CreateBulk(builders ...*ProfileCreate) *ProfileCreateBulk {
	return &ProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Profile.
func (c *ProfileClient) Update() *ProfileUpdate {
	mutation := newProfileMutation(c.config, OpUpdate)
	return &ProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProfileClient) UpdateOne(pr *Profile) *ProfileUpdateOne {
	mutation := newProfileMutation(c.config, OpUpdateOne, withProfile(pr))
	return &ProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProfileClient) UpdateOneID(id uuid.UUID) *ProfileUpdateOne {
	mutation := newProfileMutation(c.config, OpUpdateOne, withProfileID(id))
	return &ProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Profile.
func (c *ProfileClient) Delete() *ProfileDelete {
	mutation := newProfileMutation(c.config, OpDelete)
	return &ProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProfileClient) DeleteOne(pr *Profile) *ProfileDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProfileClient) DeleteOneID(id uuid.UUID) *ProfileDeleteOne {
	builder := c.Delete().Where(profile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProfileDeleteOne{builder}
}

// Query returns a query builder for Profile.
func (c *ProfileClient) Query() *ProfileQuery {
	return &ProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a Profile entity by its id.
func (c *ProfileClient) Get(ctx context.Context, id uuid.UUID) (*Profile, error) {
	return c.Query().Where(profile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProfileClient) GetX(ctx context.Context, id uuid.UUID) *Profile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Profile.
func (c *ProfileClient) QueryUser(pr *Profile) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, profile.UserTable, profile.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFcmTokens queries the fcm_tokens edge of a Profile.
func (c *ProfileClient) QueryFcmTokens(pr *Profile) *FcmTokenQuery {
	query := (&FcmTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(fcmtoken.Table, fcmtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, profile.FcmTokensTable, profile.FcmTokensColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotificationPreferences queries the notification_preferences edge of a Profile.
func (c *ProfileClient) QueryNotificationPreferences(pr *Profile) *NotificationPreferencesQuery {
	query := (&NotificationPreferencesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(notificationpreferences.Table, notificationpreferences.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, profile.NotificationPreferencesTable, profile.NotificationPreferencesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppConfig queries the app_config edge of a Profile.
func (c *ProfileClient) QueryAppConfig(pr *Profile) *AppConfigQuery {
	query := (&AppConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(appconfig.Table, appconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, profile.AppConfigTable, profile.AppConfigColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifications queries the notifications edge of a Profile.
func (c *ProfileClient) QueryNotifications(pr *Profile) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, profile.NotificationsTable, profile.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompetitions queries the competitions edge of a Profile.
func (c *ProfileClient) QueryCompetitions(pr *Profile) *CompetitionQuery {
	query := (&CompetitionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, profile.CompetitionsTable, profile.CompetitionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActions queries the actions edge of a Profile.
func (c *ProfileClient) QueryActions(pr *Profile) *ActionQuery {
	query := (&ActionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(action.Table, action.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.ActionsTable, profile.ActionsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySquad queries the squad edge of a Profile.
func (c *ProfileClient) QuerySquad(pr *Profile) *SquadQuery {
	query := (&SquadClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(squad.Table, squad.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, profile.SquadTable, profile.SquadPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySquadsOwned queries the squads_owned edge of a Profile.
func (c *ProfileClient) QuerySquadsOwned(pr *Profile) *SquadQuery {
	query := (&SquadClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(squad.Table, squad.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.SquadsOwnedTable, profile.SquadsOwnedColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvites queries the invites edge of a Profile.
func (c *ProfileClient) QueryInvites(pr *Profile) *InviteQuery {
	query := (&InviteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.InvitesTable, profile.InvitesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvitesSent queries the invites_sent edge of a Profile.
func (c *ProfileClient) QueryInvitesSent(pr *Profile) *InviteQuery {
	query := (&InviteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.InvitesSentTable, profile.InvitesSentColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkouts queries the workouts edge of a Profile.
func (c *ProfileClient) QueryWorkouts(pr *Profile) *WorkoutQuery {
	query := (&WorkoutClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(workout.Table, workout.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.WorkoutsTable, profile.WorkoutsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGoals queries the goals edge of a Profile.
func (c *ProfileClient) QueryGoals(pr *Profile) *GoalQuery {
	query := (&GoalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(goal.Table, goal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.GoalsTable, profile.GoalsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkoutData queries the workout_data edge of a Profile.
func (c *ProfileClient) QueryWorkoutData(pr *Profile) *WorkoutDataQuery {
	query := (&WorkoutDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(workoutdata.Table, workoutdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.WorkoutDataTable, profile.WorkoutDataColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompetitionResults queries the competition_results edge of a Profile.
func (c *ProfileClient) QueryCompetitionResults(pr *Profile) *CompetitionResultQuery {
	query := (&CompetitionResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(competitionresult.Table, competitionresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.CompetitionResultsTable, profile.CompetitionResultsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProfileClient) Hooks() []Hook {
	hooks := c.hooks.Profile
	return append(hooks[:len(hooks):len(hooks)], profile.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ProfileClient) Interceptors() []Interceptor {
	return c.inters.Profile
}

func (c *ProfileClient) mutate(ctx context.Context, m *ProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Profile mutation op: %q", m.Op())
	}
}

// SquadClient is a client for the Squad schema.
type SquadClient struct {
	config
}

// NewSquadClient returns a client for the Squad from the given config.
func NewSquadClient(c config) *SquadClient {
	return &SquadClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `squad.Hooks(f(g(h())))`.
func (c *SquadClient) Use(hooks ...Hook) {
	c.hooks.Squad = append(c.hooks.Squad, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `squad.Intercept(f(g(h())))`.
func (c *SquadClient) Intercept(interceptors ...Interceptor) {
	c.inters.Squad = append(c.inters.Squad, interceptors...)
}

// Create returns a builder for creating a Squad entity.
func (c *SquadClient) Create() *SquadCreate {
	mutation := newSquadMutation(c.config, OpCreate)
	return &SquadCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Squad entities.
func (c *SquadClient) CreateBulk(builders ...*SquadCreate) *SquadCreateBulk {
	return &SquadCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Squad.
func (c *SquadClient) Update() *SquadUpdate {
	mutation := newSquadMutation(c.config, OpUpdate)
	return &SquadUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SquadClient) UpdateOne(s *Squad) *SquadUpdateOne {
	mutation := newSquadMutation(c.config, OpUpdateOne, withSquad(s))
	return &SquadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SquadClient) UpdateOneID(id uuid.UUID) *SquadUpdateOne {
	mutation := newSquadMutation(c.config, OpUpdateOne, withSquadID(id))
	return &SquadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Squad.
func (c *SquadClient) Delete() *SquadDelete {
	mutation := newSquadMutation(c.config, OpDelete)
	return &SquadDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SquadClient) DeleteOne(s *Squad) *SquadDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SquadClient) DeleteOneID(id uuid.UUID) *SquadDeleteOne {
	builder := c.Delete().Where(squad.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SquadDeleteOne{builder}
}

// Query returns a query builder for Squad.
func (c *SquadClient) Query() *SquadQuery {
	return &SquadQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSquad},
		inters: c.Interceptors(),
	}
}

// Get returns a Squad entity by its id.
func (c *SquadClient) Get(ctx context.Context, id uuid.UUID) (*Squad, error) {
	return c.Query().Where(squad.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SquadClient) GetX(ctx context.Context, id uuid.UUID) *Squad {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMembers queries the members edge of a Squad.
func (c *SquadClient) QueryMembers(s *Squad) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(squad.Table, squad.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, squad.MembersTable, squad.MembersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvites queries the invites edge of a Squad.
func (c *SquadClient) QueryInvites(s *Squad) *InviteQuery {
	query := (&InviteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(squad.Table, squad.FieldID, id),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, squad.InvitesTable, squad.InvitesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompetitionResults queries the competition_results edge of a Squad.
func (c *SquadClient) QueryCompetitionResults(s *Squad) *CompetitionResultQuery {
	query := (&CompetitionResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(squad.Table, squad.FieldID, id),
			sqlgraph.To(competitionresult.Table, competitionresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, squad.CompetitionResultsTable, squad.CompetitionResultsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a Squad.
func (c *SquadClient) QueryOwner(s *Squad) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(squad.Table, squad.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, squad.OwnerTable, squad.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SquadClient) Hooks() []Hook {
	hooks := c.hooks.Squad
	return append(hooks[:len(hooks):len(hooks)], squad.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SquadClient) Interceptors() []Interceptor {
	return c.inters.Squad
}

func (c *SquadClient) mutate(ctx context.Context, m *SquadMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SquadCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SquadUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SquadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SquadDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Squad mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfile queries the profile edge of a User.
func (c *UserClient) QueryProfile(u *User) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.ProfileTable, user.ProfileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// WorkoutClient is a client for the Workout schema.
type WorkoutClient struct {
	config
}

// NewWorkoutClient returns a client for the Workout from the given config.
func NewWorkoutClient(c config) *WorkoutClient {
	return &WorkoutClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workout.Hooks(f(g(h())))`.
func (c *WorkoutClient) Use(hooks ...Hook) {
	c.hooks.Workout = append(c.hooks.Workout, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workout.Intercept(f(g(h())))`.
func (c *WorkoutClient) Intercept(interceptors ...Interceptor) {
	c.inters.Workout = append(c.inters.Workout, interceptors...)
}

// Create returns a builder for creating a Workout entity.
func (c *WorkoutClient) Create() *WorkoutCreate {
	mutation := newWorkoutMutation(c.config, OpCreate)
	return &WorkoutCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Workout entities.
func (c *WorkoutClient) CreateBulk(builders ...*WorkoutCreate) *WorkoutCreateBulk {
	return &WorkoutCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Workout.
func (c *WorkoutClient) Update() *WorkoutUpdate {
	mutation := newWorkoutMutation(c.config, OpUpdate)
	return &WorkoutUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkoutClient) UpdateOne(w *Workout) *WorkoutUpdateOne {
	mutation := newWorkoutMutation(c.config, OpUpdateOne, withWorkout(w))
	return &WorkoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkoutClient) UpdateOneID(id uuid.UUID) *WorkoutUpdateOne {
	mutation := newWorkoutMutation(c.config, OpUpdateOne, withWorkoutID(id))
	return &WorkoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Workout.
func (c *WorkoutClient) Delete() *WorkoutDelete {
	mutation := newWorkoutMutation(c.config, OpDelete)
	return &WorkoutDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkoutClient) DeleteOne(w *Workout) *WorkoutDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkoutClient) DeleteOneID(id uuid.UUID) *WorkoutDeleteOne {
	builder := c.Delete().Where(workout.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkoutDeleteOne{builder}
}

// Query returns a query builder for Workout.
func (c *WorkoutClient) Query() *WorkoutQuery {
	return &WorkoutQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkout},
		inters: c.Interceptors(),
	}
}

// Get returns a Workout entity by its id.
func (c *WorkoutClient) Get(ctx context.Context, id uuid.UUID) (*Workout, error) {
	return c.Query().Where(workout.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkoutClient) GetX(ctx context.Context, id uuid.UUID) *Workout {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvite queries the invite edge of a Workout.
func (c *WorkoutClient) QueryInvite(w *Workout) *InviteQuery {
	query := (&InviteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workout.Table, workout.FieldID, id),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, workout.InviteTable, workout.InviteColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLeader queries the leader edge of a Workout.
func (c *WorkoutClient) QueryLeader(w *Workout) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workout.Table, workout.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workout.LeaderTable, workout.LeaderColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompetition queries the competition edge of a Workout.
func (c *WorkoutClient) QueryCompetition(w *Workout) *CompetitionQuery {
	query := (&CompetitionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workout.Table, workout.FieldID, id),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workout.CompetitionTable, workout.CompetitionColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkoutData queries the workout_data edge of a Workout.
func (c *WorkoutClient) QueryWorkoutData(w *Workout) *WorkoutDataQuery {
	query := (&WorkoutDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workout.Table, workout.FieldID, id),
			sqlgraph.To(workoutdata.Table, workoutdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, workout.WorkoutDataTable, workout.WorkoutDataColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkoutRouteData queries the workout_route_data edge of a Workout.
func (c *WorkoutClient) QueryWorkoutRouteData(w *Workout) *WorkoutRouteDataQuery {
	query := (&WorkoutRouteDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workout.Table, workout.FieldID, id),
			sqlgraph.To(workoutroutedata.Table, workoutroutedata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, workout.WorkoutRouteDataTable, workout.WorkoutRouteDataColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkoutClient) Hooks() []Hook {
	return c.hooks.Workout
}

// Interceptors returns the client interceptors.
func (c *WorkoutClient) Interceptors() []Interceptor {
	return c.inters.Workout
}

func (c *WorkoutClient) mutate(ctx context.Context, m *WorkoutMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkoutCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkoutUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkoutDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Workout mutation op: %q", m.Op())
	}
}

// WorkoutDataClient is a client for the WorkoutData schema.
type WorkoutDataClient struct {
	config
}

// NewWorkoutDataClient returns a client for the WorkoutData from the given config.
func NewWorkoutDataClient(c config) *WorkoutDataClient {
	return &WorkoutDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workoutdata.Hooks(f(g(h())))`.
func (c *WorkoutDataClient) Use(hooks ...Hook) {
	c.hooks.WorkoutData = append(c.hooks.WorkoutData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workoutdata.Intercept(f(g(h())))`.
func (c *WorkoutDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkoutData = append(c.inters.WorkoutData, interceptors...)
}

// Create returns a builder for creating a WorkoutData entity.
func (c *WorkoutDataClient) Create() *WorkoutDataCreate {
	mutation := newWorkoutDataMutation(c.config, OpCreate)
	return &WorkoutDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkoutData entities.
func (c *WorkoutDataClient) CreateBulk(builders ...*WorkoutDataCreate) *WorkoutDataCreateBulk {
	return &WorkoutDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkoutData.
func (c *WorkoutDataClient) Update() *WorkoutDataUpdate {
	mutation := newWorkoutDataMutation(c.config, OpUpdate)
	return &WorkoutDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkoutDataClient) UpdateOne(wd *WorkoutData) *WorkoutDataUpdateOne {
	mutation := newWorkoutDataMutation(c.config, OpUpdateOne, withWorkoutData(wd))
	return &WorkoutDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkoutDataClient) UpdateOneID(id uuid.UUID) *WorkoutDataUpdateOne {
	mutation := newWorkoutDataMutation(c.config, OpUpdateOne, withWorkoutDataID(id))
	return &WorkoutDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkoutData.
func (c *WorkoutDataClient) Delete() *WorkoutDataDelete {
	mutation := newWorkoutDataMutation(c.config, OpDelete)
	return &WorkoutDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkoutDataClient) DeleteOne(wd *WorkoutData) *WorkoutDataDeleteOne {
	return c.DeleteOneID(wd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkoutDataClient) DeleteOneID(id uuid.UUID) *WorkoutDataDeleteOne {
	builder := c.Delete().Where(workoutdata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkoutDataDeleteOne{builder}
}

// Query returns a query builder for WorkoutData.
func (c *WorkoutDataClient) Query() *WorkoutDataQuery {
	return &WorkoutDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkoutData},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkoutData entity by its id.
func (c *WorkoutDataClient) Get(ctx context.Context, id uuid.UUID) (*WorkoutData, error) {
	return c.Query().Where(workoutdata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkoutDataClient) GetX(ctx context.Context, id uuid.UUID) *WorkoutData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkout queries the workout edge of a WorkoutData.
func (c *WorkoutDataClient) QueryWorkout(wd *WorkoutData) *WorkoutQuery {
	query := (&WorkoutClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workoutdata.Table, workoutdata.FieldID, id),
			sqlgraph.To(workout.Table, workout.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workoutdata.WorkoutTable, workoutdata.WorkoutColumn),
		)
		fromV = sqlgraph.Neighbors(wd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProfile queries the profile edge of a WorkoutData.
func (c *WorkoutDataClient) QueryProfile(wd *WorkoutData) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workoutdata.Table, workoutdata.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workoutdata.ProfileTable, workoutdata.ProfileColumn),
		)
		fromV = sqlgraph.Neighbors(wd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkoutRouteData queries the workout_route_data edge of a WorkoutData.
func (c *WorkoutDataClient) QueryWorkoutRouteData(wd *WorkoutData) *WorkoutRouteDataQuery {
	query := (&WorkoutRouteDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workoutdata.Table, workoutdata.FieldID, id),
			sqlgraph.To(workoutroutedata.Table, workoutroutedata.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, workoutdata.WorkoutRouteDataTable, workoutdata.WorkoutRouteDataColumn),
		)
		fromV = sqlgraph.Neighbors(wd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompetition queries the competition edge of a WorkoutData.
func (c *WorkoutDataClient) QueryCompetition(wd *WorkoutData) *CompetitionQuery {
	query := (&CompetitionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workoutdata.Table, workoutdata.FieldID, id),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workoutdata.CompetitionTable, workoutdata.CompetitionColumn),
		)
		fromV = sqlgraph.Neighbors(wd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkoutDataClient) Hooks() []Hook {
	return c.hooks.WorkoutData
}

// Interceptors returns the client interceptors.
func (c *WorkoutDataClient) Interceptors() []Interceptor {
	return c.inters.WorkoutData
}

func (c *WorkoutDataClient) mutate(ctx context.Context, m *WorkoutDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkoutDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkoutDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkoutDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkoutDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkoutData mutation op: %q", m.Op())
	}
}

// WorkoutRouteDataClient is a client for the WorkoutRouteData schema.
type WorkoutRouteDataClient struct {
	config
}

// NewWorkoutRouteDataClient returns a client for the WorkoutRouteData from the given config.
func NewWorkoutRouteDataClient(c config) *WorkoutRouteDataClient {
	return &WorkoutRouteDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workoutroutedata.Hooks(f(g(h())))`.
func (c *WorkoutRouteDataClient) Use(hooks ...Hook) {
	c.hooks.WorkoutRouteData = append(c.hooks.WorkoutRouteData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workoutroutedata.Intercept(f(g(h())))`.
func (c *WorkoutRouteDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkoutRouteData = append(c.inters.WorkoutRouteData, interceptors...)
}

// Create returns a builder for creating a WorkoutRouteData entity.
func (c *WorkoutRouteDataClient) Create() *WorkoutRouteDataCreate {
	mutation := newWorkoutRouteDataMutation(c.config, OpCreate)
	return &WorkoutRouteDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkoutRouteData entities.
func (c *WorkoutRouteDataClient) CreateBulk(builders ...*WorkoutRouteDataCreate) *WorkoutRouteDataCreateBulk {
	return &WorkoutRouteDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkoutRouteData.
func (c *WorkoutRouteDataClient) Update() *WorkoutRouteDataUpdate {
	mutation := newWorkoutRouteDataMutation(c.config, OpUpdate)
	return &WorkoutRouteDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkoutRouteDataClient) UpdateOne(wrd *WorkoutRouteData) *WorkoutRouteDataUpdateOne {
	mutation := newWorkoutRouteDataMutation(c.config, OpUpdateOne, withWorkoutRouteData(wrd))
	return &WorkoutRouteDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkoutRouteDataClient) UpdateOneID(id uuid.UUID) *WorkoutRouteDataUpdateOne {
	mutation := newWorkoutRouteDataMutation(c.config, OpUpdateOne, withWorkoutRouteDataID(id))
	return &WorkoutRouteDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkoutRouteData.
func (c *WorkoutRouteDataClient) Delete() *WorkoutRouteDataDelete {
	mutation := newWorkoutRouteDataMutation(c.config, OpDelete)
	return &WorkoutRouteDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkoutRouteDataClient) DeleteOne(wrd *WorkoutRouteData) *WorkoutRouteDataDeleteOne {
	return c.DeleteOneID(wrd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkoutRouteDataClient) DeleteOneID(id uuid.UUID) *WorkoutRouteDataDeleteOne {
	builder := c.Delete().Where(workoutroutedata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkoutRouteDataDeleteOne{builder}
}

// Query returns a query builder for WorkoutRouteData.
func (c *WorkoutRouteDataClient) Query() *WorkoutRouteDataQuery {
	return &WorkoutRouteDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkoutRouteData},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkoutRouteData entity by its id.
func (c *WorkoutRouteDataClient) Get(ctx context.Context, id uuid.UUID) (*WorkoutRouteData, error) {
	return c.Query().Where(workoutroutedata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkoutRouteDataClient) GetX(ctx context.Context, id uuid.UUID) *WorkoutRouteData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkout queries the workout edge of a WorkoutRouteData.
func (c *WorkoutRouteDataClient) QueryWorkout(wrd *WorkoutRouteData) *WorkoutQuery {
	query := (&WorkoutClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wrd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workoutroutedata.Table, workoutroutedata.FieldID, id),
			sqlgraph.To(workout.Table, workout.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workoutroutedata.WorkoutTable, workoutroutedata.WorkoutColumn),
		)
		fromV = sqlgraph.Neighbors(wrd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkoutData queries the workout_data edge of a WorkoutRouteData.
func (c *WorkoutRouteDataClient) QueryWorkoutData(wrd *WorkoutRouteData) *WorkoutDataQuery {
	query := (&WorkoutDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wrd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workoutroutedata.Table, workoutroutedata.FieldID, id),
			sqlgraph.To(workoutdata.Table, workoutdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, workoutroutedata.WorkoutDataTable, workoutroutedata.WorkoutDataColumn),
		)
		fromV = sqlgraph.Neighbors(wrd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkoutRouteDataClient) Hooks() []Hook {
	return c.hooks.WorkoutRouteData
}

// Interceptors returns the client interceptors.
func (c *WorkoutRouteDataClient) Interceptors() []Interceptor {
	return c.inters.WorkoutRouteData
}

func (c *WorkoutRouteDataClient) mutate(ctx context.Context, m *WorkoutRouteDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkoutRouteDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkoutRouteDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkoutRouteDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkoutRouteDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkoutRouteData mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Action, AppConfig, Competition, CompetitionResult, FcmToken, Goal, Invite,
		Notification, NotificationPreferences, Post, Profile, Squad, User, Workout,
		WorkoutData, WorkoutRouteData []ent.Hook
	}
	inters struct {
		Action, AppConfig, Competition, CompetitionResult, FcmToken, Goal, Invite,
		Notification, NotificationPreferences, Post, Profile, Squad, User, Workout,
		WorkoutData, WorkoutRouteData []ent.Interceptor
	}
)
