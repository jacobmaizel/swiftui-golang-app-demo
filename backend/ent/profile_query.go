// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/action"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/appconfig"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competition"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competitionresult"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/fcmtoken"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/goal"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/invite"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/notification"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/notificationpreferences"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/predicate"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/squad"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/user"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workout"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutdata"
)

// ProfileQuery is the builder for querying Profile entities.
type ProfileQuery struct {
	config
	ctx                         *QueryContext
	order                       []profile.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.Profile
	withUser                    *UserQuery
	withFcmTokens               *FcmTokenQuery
	withNotificationPreferences *NotificationPreferencesQuery
	withAppConfig               *AppConfigQuery
	withNotifications           *NotificationQuery
	withCompetitions            *CompetitionQuery
	withActions                 *ActionQuery
	withSquad                   *SquadQuery
	withSquadsOwned             *SquadQuery
	withInvites                 *InviteQuery
	withInvitesSent             *InviteQuery
	withWorkouts                *WorkoutQuery
	withGoals                   *GoalQuery
	withWorkoutData             *WorkoutDataQuery
	withCompetitionResults      *CompetitionResultQuery
	withFKs                     bool
	modifiers                   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProfileQuery builder.
func (pq *ProfileQuery) Where(ps ...predicate.Profile) *ProfileQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *ProfileQuery) Limit(limit int) *ProfileQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *ProfileQuery) Offset(offset int) *ProfileQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *ProfileQuery) Unique(unique bool) *ProfileQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *ProfileQuery) Order(o ...profile.OrderOption) *ProfileQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryUser chains the current query on the "user" edge.
func (pq *ProfileQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, profile.UserTable, profile.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFcmTokens chains the current query on the "fcm_tokens" edge.
func (pq *ProfileQuery) QueryFcmTokens() *FcmTokenQuery {
	query := (&FcmTokenClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(fcmtoken.Table, fcmtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, profile.FcmTokensTable, profile.FcmTokensColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotificationPreferences chains the current query on the "notification_preferences" edge.
func (pq *ProfileQuery) QueryNotificationPreferences() *NotificationPreferencesQuery {
	query := (&NotificationPreferencesClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(notificationpreferences.Table, notificationpreferences.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, profile.NotificationPreferencesTable, profile.NotificationPreferencesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppConfig chains the current query on the "app_config" edge.
func (pq *ProfileQuery) QueryAppConfig() *AppConfigQuery {
	query := (&AppConfigClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(appconfig.Table, appconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, profile.AppConfigTable, profile.AppConfigColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotifications chains the current query on the "notifications" edge.
func (pq *ProfileQuery) QueryNotifications() *NotificationQuery {
	query := (&NotificationClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, profile.NotificationsTable, profile.NotificationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCompetitions chains the current query on the "competitions" edge.
func (pq *ProfileQuery) QueryCompetitions() *CompetitionQuery {
	query := (&CompetitionClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, profile.CompetitionsTable, profile.CompetitionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActions chains the current query on the "actions" edge.
func (pq *ProfileQuery) QueryActions() *ActionQuery {
	query := (&ActionClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(action.Table, action.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.ActionsTable, profile.ActionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySquad chains the current query on the "squad" edge.
func (pq *ProfileQuery) QuerySquad() *SquadQuery {
	query := (&SquadClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(squad.Table, squad.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, profile.SquadTable, profile.SquadPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySquadsOwned chains the current query on the "squads_owned" edge.
func (pq *ProfileQuery) QuerySquadsOwned() *SquadQuery {
	query := (&SquadClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(squad.Table, squad.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.SquadsOwnedTable, profile.SquadsOwnedColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvites chains the current query on the "invites" edge.
func (pq *ProfileQuery) QueryInvites() *InviteQuery {
	query := (&InviteClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.InvitesTable, profile.InvitesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvitesSent chains the current query on the "invites_sent" edge.
func (pq *ProfileQuery) QueryInvitesSent() *InviteQuery {
	query := (&InviteClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.InvitesSentTable, profile.InvitesSentColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkouts chains the current query on the "workouts" edge.
func (pq *ProfileQuery) QueryWorkouts() *WorkoutQuery {
	query := (&WorkoutClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(workout.Table, workout.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.WorkoutsTable, profile.WorkoutsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGoals chains the current query on the "goals" edge.
func (pq *ProfileQuery) QueryGoals() *GoalQuery {
	query := (&GoalClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(goal.Table, goal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.GoalsTable, profile.GoalsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkoutData chains the current query on the "workout_data" edge.
func (pq *ProfileQuery) QueryWorkoutData() *WorkoutDataQuery {
	query := (&WorkoutDataClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(workoutdata.Table, workoutdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.WorkoutDataTable, profile.WorkoutDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCompetitionResults chains the current query on the "competition_results" edge.
func (pq *ProfileQuery) QueryCompetitionResults() *CompetitionResultQuery {
	query := (&CompetitionResultClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, selector),
			sqlgraph.To(competitionresult.Table, competitionresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, profile.CompetitionResultsTable, profile.CompetitionResultsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Profile entity from the query.
// Returns a *NotFoundError when no Profile was found.
func (pq *ProfileQuery) First(ctx context.Context) (*Profile, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{profile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *ProfileQuery) FirstX(ctx context.Context) *Profile {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Profile ID from the query.
// Returns a *NotFoundError when no Profile ID was found.
func (pq *ProfileQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{profile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *ProfileQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Profile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Profile entity is found.
// Returns a *NotFoundError when no Profile entities are found.
func (pq *ProfileQuery) Only(ctx context.Context) (*Profile, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{profile.Label}
	default:
		return nil, &NotSingularError{profile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *ProfileQuery) OnlyX(ctx context.Context) *Profile {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Profile ID in the query.
// Returns a *NotSingularError when more than one Profile ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *ProfileQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{profile.Label}
	default:
		err = &NotSingularError{profile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *ProfileQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Profiles.
func (pq *ProfileQuery) All(ctx context.Context) ([]*Profile, error) {
	ctx = setContextOp(ctx, pq.ctx, "All")
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Profile, *ProfileQuery]()
	return withInterceptors[[]*Profile](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *ProfileQuery) AllX(ctx context.Context) []*Profile {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Profile IDs.
func (pq *ProfileQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, "IDs")
	if err = pq.Select(profile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *ProfileQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *ProfileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, "Count")
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*ProfileQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *ProfileQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *ProfileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, "Exist")
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *ProfileQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProfileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *ProfileQuery) Clone() *ProfileQuery {
	if pq == nil {
		return nil
	}
	return &ProfileQuery{
		config:                      pq.config,
		ctx:                         pq.ctx.Clone(),
		order:                       append([]profile.OrderOption{}, pq.order...),
		inters:                      append([]Interceptor{}, pq.inters...),
		predicates:                  append([]predicate.Profile{}, pq.predicates...),
		withUser:                    pq.withUser.Clone(),
		withFcmTokens:               pq.withFcmTokens.Clone(),
		withNotificationPreferences: pq.withNotificationPreferences.Clone(),
		withAppConfig:               pq.withAppConfig.Clone(),
		withNotifications:           pq.withNotifications.Clone(),
		withCompetitions:            pq.withCompetitions.Clone(),
		withActions:                 pq.withActions.Clone(),
		withSquad:                   pq.withSquad.Clone(),
		withSquadsOwned:             pq.withSquadsOwned.Clone(),
		withInvites:                 pq.withInvites.Clone(),
		withInvitesSent:             pq.withInvitesSent.Clone(),
		withWorkouts:                pq.withWorkouts.Clone(),
		withGoals:                   pq.withGoals.Clone(),
		withWorkoutData:             pq.withWorkoutData.Clone(),
		withCompetitionResults:      pq.withCompetitionResults.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithUser(opts ...func(*UserQuery)) *ProfileQuery {
	query := (&UserClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withUser = query
	return pq
}

// WithFcmTokens tells the query-builder to eager-load the nodes that are connected to
// the "fcm_tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithFcmTokens(opts ...func(*FcmTokenQuery)) *ProfileQuery {
	query := (&FcmTokenClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withFcmTokens = query
	return pq
}

// WithNotificationPreferences tells the query-builder to eager-load the nodes that are connected to
// the "notification_preferences" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithNotificationPreferences(opts ...func(*NotificationPreferencesQuery)) *ProfileQuery {
	query := (&NotificationPreferencesClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withNotificationPreferences = query
	return pq
}

// WithAppConfig tells the query-builder to eager-load the nodes that are connected to
// the "app_config" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithAppConfig(opts ...func(*AppConfigQuery)) *ProfileQuery {
	query := (&AppConfigClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withAppConfig = query
	return pq
}

// WithNotifications tells the query-builder to eager-load the nodes that are connected to
// the "notifications" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithNotifications(opts ...func(*NotificationQuery)) *ProfileQuery {
	query := (&NotificationClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withNotifications = query
	return pq
}

// WithCompetitions tells the query-builder to eager-load the nodes that are connected to
// the "competitions" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithCompetitions(opts ...func(*CompetitionQuery)) *ProfileQuery {
	query := (&CompetitionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withCompetitions = query
	return pq
}

// WithActions tells the query-builder to eager-load the nodes that are connected to
// the "actions" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithActions(opts ...func(*ActionQuery)) *ProfileQuery {
	query := (&ActionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withActions = query
	return pq
}

// WithSquad tells the query-builder to eager-load the nodes that are connected to
// the "squad" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithSquad(opts ...func(*SquadQuery)) *ProfileQuery {
	query := (&SquadClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withSquad = query
	return pq
}

// WithSquadsOwned tells the query-builder to eager-load the nodes that are connected to
// the "squads_owned" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithSquadsOwned(opts ...func(*SquadQuery)) *ProfileQuery {
	query := (&SquadClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withSquadsOwned = query
	return pq
}

// WithInvites tells the query-builder to eager-load the nodes that are connected to
// the "invites" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithInvites(opts ...func(*InviteQuery)) *ProfileQuery {
	query := (&InviteClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withInvites = query
	return pq
}

// WithInvitesSent tells the query-builder to eager-load the nodes that are connected to
// the "invites_sent" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithInvitesSent(opts ...func(*InviteQuery)) *ProfileQuery {
	query := (&InviteClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withInvitesSent = query
	return pq
}

// WithWorkouts tells the query-builder to eager-load the nodes that are connected to
// the "workouts" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithWorkouts(opts ...func(*WorkoutQuery)) *ProfileQuery {
	query := (&WorkoutClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withWorkouts = query
	return pq
}

// WithGoals tells the query-builder to eager-load the nodes that are connected to
// the "goals" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithGoals(opts ...func(*GoalQuery)) *ProfileQuery {
	query := (&GoalClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withGoals = query
	return pq
}

// WithWorkoutData tells the query-builder to eager-load the nodes that are connected to
// the "workout_data" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithWorkoutData(opts ...func(*WorkoutDataQuery)) *ProfileQuery {
	query := (&WorkoutDataClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withWorkoutData = query
	return pq
}

// WithCompetitionResults tells the query-builder to eager-load the nodes that are connected to
// the "competition_results" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProfileQuery) WithCompetitionResults(opts ...func(*CompetitionResultQuery)) *ProfileQuery {
	query := (&CompetitionResultClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withCompetitionResults = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Profile.Query().
//		GroupBy(profile.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *ProfileQuery) GroupBy(field string, fields ...string) *ProfileGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProfileGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = profile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Profile.Query().
//		Select(profile.FieldCreatedAt).
//		Scan(ctx, &v)
func (pq *ProfileQuery) Select(fields ...string) *ProfileSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &ProfileSelect{ProfileQuery: pq}
	sbuild.label = profile.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProfileSelect configured with the given aggregations.
func (pq *ProfileQuery) Aggregate(fns ...AggregateFunc) *ProfileSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *ProfileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !profile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *ProfileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Profile, error) {
	var (
		nodes       = []*Profile{}
		withFKs     = pq.withFKs
		_spec       = pq.querySpec()
		loadedTypes = [15]bool{
			pq.withUser != nil,
			pq.withFcmTokens != nil,
			pq.withNotificationPreferences != nil,
			pq.withAppConfig != nil,
			pq.withNotifications != nil,
			pq.withCompetitions != nil,
			pq.withActions != nil,
			pq.withSquad != nil,
			pq.withSquadsOwned != nil,
			pq.withInvites != nil,
			pq.withInvitesSent != nil,
			pq.withWorkouts != nil,
			pq.withGoals != nil,
			pq.withWorkoutData != nil,
			pq.withCompetitionResults != nil,
		}
	)
	if pq.withUser != nil || pq.withAppConfig != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, profile.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Profile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Profile{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withUser; query != nil {
		if err := pq.loadUser(ctx, query, nodes, nil,
			func(n *Profile, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withFcmTokens; query != nil {
		if err := pq.loadFcmTokens(ctx, query, nodes,
			func(n *Profile) { n.Edges.FcmTokens = []*FcmToken{} },
			func(n *Profile, e *FcmToken) { n.Edges.FcmTokens = append(n.Edges.FcmTokens, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withNotificationPreferences; query != nil {
		if err := pq.loadNotificationPreferences(ctx, query, nodes, nil,
			func(n *Profile, e *NotificationPreferences) { n.Edges.NotificationPreferences = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withAppConfig; query != nil {
		if err := pq.loadAppConfig(ctx, query, nodes, nil,
			func(n *Profile, e *AppConfig) { n.Edges.AppConfig = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withNotifications; query != nil {
		if err := pq.loadNotifications(ctx, query, nodes,
			func(n *Profile) { n.Edges.Notifications = []*Notification{} },
			func(n *Profile, e *Notification) { n.Edges.Notifications = append(n.Edges.Notifications, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withCompetitions; query != nil {
		if err := pq.loadCompetitions(ctx, query, nodes,
			func(n *Profile) { n.Edges.Competitions = []*Competition{} },
			func(n *Profile, e *Competition) { n.Edges.Competitions = append(n.Edges.Competitions, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withActions; query != nil {
		if err := pq.loadActions(ctx, query, nodes,
			func(n *Profile) { n.Edges.Actions = []*Action{} },
			func(n *Profile, e *Action) { n.Edges.Actions = append(n.Edges.Actions, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withSquad; query != nil {
		if err := pq.loadSquad(ctx, query, nodes,
			func(n *Profile) { n.Edges.Squad = []*Squad{} },
			func(n *Profile, e *Squad) { n.Edges.Squad = append(n.Edges.Squad, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withSquadsOwned; query != nil {
		if err := pq.loadSquadsOwned(ctx, query, nodes,
			func(n *Profile) { n.Edges.SquadsOwned = []*Squad{} },
			func(n *Profile, e *Squad) { n.Edges.SquadsOwned = append(n.Edges.SquadsOwned, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withInvites; query != nil {
		if err := pq.loadInvites(ctx, query, nodes,
			func(n *Profile) { n.Edges.Invites = []*Invite{} },
			func(n *Profile, e *Invite) { n.Edges.Invites = append(n.Edges.Invites, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withInvitesSent; query != nil {
		if err := pq.loadInvitesSent(ctx, query, nodes,
			func(n *Profile) { n.Edges.InvitesSent = []*Invite{} },
			func(n *Profile, e *Invite) { n.Edges.InvitesSent = append(n.Edges.InvitesSent, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withWorkouts; query != nil {
		if err := pq.loadWorkouts(ctx, query, nodes,
			func(n *Profile) { n.Edges.Workouts = []*Workout{} },
			func(n *Profile, e *Workout) { n.Edges.Workouts = append(n.Edges.Workouts, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withGoals; query != nil {
		if err := pq.loadGoals(ctx, query, nodes,
			func(n *Profile) { n.Edges.Goals = []*Goal{} },
			func(n *Profile, e *Goal) { n.Edges.Goals = append(n.Edges.Goals, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withWorkoutData; query != nil {
		if err := pq.loadWorkoutData(ctx, query, nodes,
			func(n *Profile) { n.Edges.WorkoutData = []*WorkoutData{} },
			func(n *Profile, e *WorkoutData) { n.Edges.WorkoutData = append(n.Edges.WorkoutData, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withCompetitionResults; query != nil {
		if err := pq.loadCompetitionResults(ctx, query, nodes,
			func(n *Profile) { n.Edges.CompetitionResults = []*CompetitionResult{} },
			func(n *Profile, e *CompetitionResult) {
				n.Edges.CompetitionResults = append(n.Edges.CompetitionResults, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *ProfileQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Profile)
	for i := range nodes {
		if nodes[i].user_profile == nil {
			continue
		}
		fk := *nodes[i].user_profile
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_profile" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *ProfileQuery) loadFcmTokens(ctx context.Context, query *FcmTokenQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *FcmToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Profile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.FcmToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(profile.FcmTokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.profile_fcm_tokens
		if fk == nil {
			return fmt.Errorf(`foreign-key "profile_fcm_tokens" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "profile_fcm_tokens" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProfileQuery) loadNotificationPreferences(ctx context.Context, query *NotificationPreferencesQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *NotificationPreferences)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Profile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.NotificationPreferences(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(profile.NotificationPreferencesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.profile_notification_preferences
		if fk == nil {
			return fmt.Errorf(`foreign-key "profile_notification_preferences" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "profile_notification_preferences" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProfileQuery) loadAppConfig(ctx context.Context, query *AppConfigQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *AppConfig)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Profile)
	for i := range nodes {
		if nodes[i].app_config_profile == nil {
			continue
		}
		fk := *nodes[i].app_config_profile
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(appconfig.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "app_config_profile" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *ProfileQuery) loadNotifications(ctx context.Context, query *NotificationQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *Notification)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Profile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(profile.NotificationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.profile_notifications
		if fk == nil {
			return fmt.Errorf(`foreign-key "profile_notifications" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "profile_notifications" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProfileQuery) loadCompetitions(ctx context.Context, query *CompetitionQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *Competition)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Profile)
	nids := make(map[uuid.UUID]map[*Profile]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(profile.CompetitionsTable)
		s.Join(joinT).On(s.C(competition.FieldID), joinT.C(profile.CompetitionsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(profile.CompetitionsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(profile.CompetitionsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Profile]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Competition](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "competitions" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *ProfileQuery) loadActions(ctx context.Context, query *ActionQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *Action)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Profile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Action(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(profile.ActionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.action_sender
		if fk == nil {
			return fmt.Errorf(`foreign-key "action_sender" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "action_sender" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProfileQuery) loadSquad(ctx context.Context, query *SquadQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *Squad)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Profile)
	nids := make(map[uuid.UUID]map[*Profile]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(profile.SquadTable)
		s.Join(joinT).On(s.C(squad.FieldID), joinT.C(profile.SquadPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(profile.SquadPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(profile.SquadPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Profile]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Squad](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "squad" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *ProfileQuery) loadSquadsOwned(ctx context.Context, query *SquadQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *Squad)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Profile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Squad(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(profile.SquadsOwnedColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.squad_owner
		if fk == nil {
			return fmt.Errorf(`foreign-key "squad_owner" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "squad_owner" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProfileQuery) loadInvites(ctx context.Context, query *InviteQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *Invite)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Profile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(profile.InvitesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.invite_receiver
		if fk == nil {
			return fmt.Errorf(`foreign-key "invite_receiver" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "invite_receiver" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProfileQuery) loadInvitesSent(ctx context.Context, query *InviteQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *Invite)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Profile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(profile.InvitesSentColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.invite_sender
		if fk == nil {
			return fmt.Errorf(`foreign-key "invite_sender" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "invite_sender" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProfileQuery) loadWorkouts(ctx context.Context, query *WorkoutQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *Workout)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Profile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Workout(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(profile.WorkoutsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workout_leader
		if fk == nil {
			return fmt.Errorf(`foreign-key "workout_leader" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workout_leader" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProfileQuery) loadGoals(ctx context.Context, query *GoalQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *Goal)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Profile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Goal(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(profile.GoalsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.goal_profile
		if fk == nil {
			return fmt.Errorf(`foreign-key "goal_profile" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "goal_profile" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProfileQuery) loadWorkoutData(ctx context.Context, query *WorkoutDataQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *WorkoutData)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Profile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.WorkoutData(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(profile.WorkoutDataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workout_data_profile
		if fk == nil {
			return fmt.Errorf(`foreign-key "workout_data_profile" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workout_data_profile" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProfileQuery) loadCompetitionResults(ctx context.Context, query *CompetitionResultQuery, nodes []*Profile, init func(*Profile), assign func(*Profile, *CompetitionResult)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Profile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CompetitionResult(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(profile.CompetitionResultsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.competition_result_profile
		if fk == nil {
			return fmt.Errorf(`foreign-key "competition_result_profile" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "competition_result_profile" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pq *ProfileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *ProfileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profile.FieldID)
		for i := range fields {
			if fields[i] != profile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *ProfileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(profile.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = profile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range pq.modifiers {
		m(selector)
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pq *ProfileQuery) Modify(modifiers ...func(s *sql.Selector)) *ProfileSelect {
	pq.modifiers = append(pq.modifiers, modifiers...)
	return pq.Select()
}

// ProfileGroupBy is the group-by builder for Profile entities.
type ProfileGroupBy struct {
	selector
	build *ProfileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *ProfileGroupBy) Aggregate(fns ...AggregateFunc) *ProfileGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *ProfileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, "GroupBy")
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProfileQuery, *ProfileGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *ProfileGroupBy) sqlScan(ctx context.Context, root *ProfileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProfileSelect is the builder for selecting fields of Profile entities.
type ProfileSelect struct {
	*ProfileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *ProfileSelect) Aggregate(fns ...AggregateFunc) *ProfileSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *ProfileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, "Select")
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProfileQuery, *ProfileSelect](ctx, ps.ProfileQuery, ps, ps.inters, v)
}

func (ps *ProfileSelect) sqlScan(ctx context.Context, root *ProfileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ps *ProfileSelect) Modify(modifiers ...func(s *sql.Selector)) *ProfileSelect {
	ps.modifiers = append(ps.modifiers, modifiers...)
	return ps
}
