// Code generated by ent, DO NOT EDIT.

package workoutroutedata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the workoutroutedata type in the database.
	Label = "workout_route_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeWorkout holds the string denoting the workout edge name in mutations.
	EdgeWorkout = "workout"
	// EdgeWorkoutData holds the string denoting the workout_data edge name in mutations.
	EdgeWorkoutData = "workout_data"
	// Table holds the table name of the workoutroutedata in the database.
	Table = "workout_route_data"
	// WorkoutTable is the table that holds the workout relation/edge.
	WorkoutTable = "workout_route_data"
	// WorkoutInverseTable is the table name for the Workout entity.
	// It exists in this package in order to avoid circular dependency with the "workout" package.
	WorkoutInverseTable = "workouts"
	// WorkoutColumn is the table column denoting the workout relation/edge.
	WorkoutColumn = "workout_route_data_workout"
	// WorkoutDataTable is the table that holds the workout_data relation/edge.
	WorkoutDataTable = "workout_route_data"
	// WorkoutDataInverseTable is the table name for the WorkoutData entity.
	// It exists in this package in order to avoid circular dependency with the "workoutdata" package.
	WorkoutDataInverseTable = "workout_data"
	// WorkoutDataColumn is the table column denoting the workout_data relation/edge.
	WorkoutDataColumn = "workout_data_workout_route_data"
)

// Columns holds all SQL columns for workoutroutedata fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workout_route_data"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"workout_data_workout_route_data",
	"workout_route_data_workout",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the WorkoutRouteData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByWorkoutField orders the results by workout field.
func ByWorkoutField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkoutStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkoutDataField orders the results by workout_data field.
func ByWorkoutDataField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkoutDataStep(), sql.OrderByField(field, opts...))
	}
}
func newWorkoutStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkoutInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, WorkoutTable, WorkoutColumn),
	)
}
func newWorkoutDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkoutDataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, WorkoutDataTable, WorkoutDataColumn),
	)
}
