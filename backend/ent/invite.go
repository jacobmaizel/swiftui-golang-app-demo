// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competition"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/invite"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/squad"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workout"
)

// Invite is the model entity for the Invite schema.
type Invite struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InviteQuery when eager-loading is set.
	Edges              InviteEdges `json:"related"`
	invite_sender      *uuid.UUID
	invite_receiver    *uuid.UUID
	invite_squad       *uuid.UUID
	invite_competition *uuid.UUID
	invite_workout     *uuid.UUID
	selectValues       sql.SelectValues
}

// InviteEdges holds the relations/edges for other nodes in the graph.
type InviteEdges struct {
	// Sender holds the value of the sender edge.
	Sender *Profile `json:"sender,omitempty"`
	// Receiver holds the value of the receiver edge.
	Receiver *Profile `json:"receiver,omitempty"`
	// Squad holds the value of the squad edge.
	Squad *Squad `json:"squad,omitempty"`
	// Competition holds the value of the competition edge.
	Competition *Competition `json:"competition,omitempty"`
	// Workout holds the value of the workout edge.
	Workout *Workout `json:"workout,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InviteEdges) SenderOrErr() (*Profile, error) {
	if e.loadedTypes[0] {
		if e.Sender == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.Sender, nil
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// ReceiverOrErr returns the Receiver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InviteEdges) ReceiverOrErr() (*Profile, error) {
	if e.loadedTypes[1] {
		if e.Receiver == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.Receiver, nil
	}
	return nil, &NotLoadedError{edge: "receiver"}
}

// SquadOrErr returns the Squad value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InviteEdges) SquadOrErr() (*Squad, error) {
	if e.loadedTypes[2] {
		if e.Squad == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: squad.Label}
		}
		return e.Squad, nil
	}
	return nil, &NotLoadedError{edge: "squad"}
}

// CompetitionOrErr returns the Competition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InviteEdges) CompetitionOrErr() (*Competition, error) {
	if e.loadedTypes[3] {
		if e.Competition == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: competition.Label}
		}
		return e.Competition, nil
	}
	return nil, &NotLoadedError{edge: "competition"}
}

// WorkoutOrErr returns the Workout value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InviteEdges) WorkoutOrErr() (*Workout, error) {
	if e.loadedTypes[4] {
		if e.Workout == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: workout.Label}
		}
		return e.Workout, nil
	}
	return nil, &NotLoadedError{edge: "workout"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Invite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invite.FieldStatus:
			values[i] = new(sql.NullString)
		case invite.FieldCreatedAt, invite.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case invite.FieldID:
			values[i] = new(uuid.UUID)
		case invite.ForeignKeys[0]: // invite_sender
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case invite.ForeignKeys[1]: // invite_receiver
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case invite.ForeignKeys[2]: // invite_squad
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case invite.ForeignKeys[3]: // invite_competition
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case invite.ForeignKeys[4]: // invite_workout
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Invite fields.
func (i *Invite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case invite.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case invite.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case invite.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case invite.FieldStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = value.String
			}
		case invite.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field invite_sender", values[j])
			} else if value.Valid {
				i.invite_sender = new(uuid.UUID)
				*i.invite_sender = *value.S.(*uuid.UUID)
			}
		case invite.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field invite_receiver", values[j])
			} else if value.Valid {
				i.invite_receiver = new(uuid.UUID)
				*i.invite_receiver = *value.S.(*uuid.UUID)
			}
		case invite.ForeignKeys[2]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field invite_squad", values[j])
			} else if value.Valid {
				i.invite_squad = new(uuid.UUID)
				*i.invite_squad = *value.S.(*uuid.UUID)
			}
		case invite.ForeignKeys[3]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field invite_competition", values[j])
			} else if value.Valid {
				i.invite_competition = new(uuid.UUID)
				*i.invite_competition = *value.S.(*uuid.UUID)
			}
		case invite.ForeignKeys[4]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field invite_workout", values[j])
			} else if value.Valid {
				i.invite_workout = new(uuid.UUID)
				*i.invite_workout = *value.S.(*uuid.UUID)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Invite.
// This includes values selected through modifiers, order, etc.
func (i *Invite) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QuerySender queries the "sender" edge of the Invite entity.
func (i *Invite) QuerySender() *ProfileQuery {
	return NewInviteClient(i.config).QuerySender(i)
}

// QueryReceiver queries the "receiver" edge of the Invite entity.
func (i *Invite) QueryReceiver() *ProfileQuery {
	return NewInviteClient(i.config).QueryReceiver(i)
}

// QuerySquad queries the "squad" edge of the Invite entity.
func (i *Invite) QuerySquad() *SquadQuery {
	return NewInviteClient(i.config).QuerySquad(i)
}

// QueryCompetition queries the "competition" edge of the Invite entity.
func (i *Invite) QueryCompetition() *CompetitionQuery {
	return NewInviteClient(i.config).QueryCompetition(i)
}

// QueryWorkout queries the "workout" edge of the Invite entity.
func (i *Invite) QueryWorkout() *WorkoutQuery {
	return NewInviteClient(i.config).QueryWorkout(i)
}

// Update returns a builder for updating this Invite.
// Note that you need to call Invite.Unwrap() before calling this method if this Invite
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Invite) Update() *InviteUpdateOne {
	return NewInviteClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Invite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Invite) Unwrap() *Invite {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Invite is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Invite) String() string {
	var builder strings.Builder
	builder.WriteString("Invite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(i.Status)
	builder.WriteByte(')')
	return builder.String()
}

// Invites is a parsable slice of Invite.
type Invites []*Invite
