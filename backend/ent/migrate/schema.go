// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ActionsColumns holds the columns for the "actions" table.
	ActionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString},
		{Name: "action_sender", Type: field.TypeUUID, Nullable: true},
	}
	// ActionsTable holds the schema information for the "actions" table.
	ActionsTable = &schema.Table{
		Name:       "actions",
		Columns:    ActionsColumns,
		PrimaryKey: []*schema.Column{ActionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "actions_profiles_sender",
				Columns:    []*schema.Column{ActionsColumns[4]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AppConfigsColumns holds the columns for the "app_configs" table.
	AppConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "auto_sync_workouts", Type: field.TypeBool, Default: true},
	}
	// AppConfigsTable holds the schema information for the "app_configs" table.
	AppConfigsTable = &schema.Table{
		Name:       "app_configs",
		Columns:    AppConfigsColumns,
		PrimaryKey: []*schema.Column{AppConfigsColumns[0]},
	}
	// CompetitionsColumns holds the columns for the "competitions" table.
	CompetitionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "public", Type: field.TypeBool, Default: true},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "start", Type: field.TypeTime},
		{Name: "end", Type: field.TypeTime},
		{Name: "scheduled", Type: field.TypeBool, Default: false},
		{Name: "status", Type: field.TypeString, Default: "pending"},
		{Name: "participant_types", Type: field.TypeJSON, Nullable: true},
		{Name: "workout_types", Type: field.TypeJSON, Nullable: true},
		{Name: "type", Type: field.TypeString, Default: "official"},
		{Name: "competition_owner", Type: field.TypeUUID},
	}
	// CompetitionsTable holds the schema information for the "competitions" table.
	CompetitionsTable = &schema.Table{
		Name:       "competitions",
		Columns:    CompetitionsColumns,
		PrimaryKey: []*schema.Column{CompetitionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "competitions_profiles_owner",
				Columns:    []*schema.Column{CompetitionsColumns[13]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CompetitionResultsColumns holds the columns for the "competition_results" table.
	CompetitionResultsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "place", Type: field.TypeString},
		{Name: "competition_result_competition", Type: field.TypeUUID},
		{Name: "competition_result_profile", Type: field.TypeUUID, Nullable: true},
		{Name: "competition_result_squad", Type: field.TypeUUID, Nullable: true},
	}
	// CompetitionResultsTable holds the schema information for the "competition_results" table.
	CompetitionResultsTable = &schema.Table{
		Name:       "competition_results",
		Columns:    CompetitionResultsColumns,
		PrimaryKey: []*schema.Column{CompetitionResultsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "competition_results_competitions_competition",
				Columns:    []*schema.Column{CompetitionResultsColumns[4]},
				RefColumns: []*schema.Column{CompetitionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "competition_results_profiles_profile",
				Columns:    []*schema.Column{CompetitionResultsColumns[5]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "competition_results_squads_squad",
				Columns:    []*schema.Column{CompetitionResultsColumns[6]},
				RefColumns: []*schema.Column{SquadsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// FcmTokensColumns holds the columns for the "fcm_tokens" table.
	FcmTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "token", Type: field.TypeString},
		{Name: "profile_fcm_tokens", Type: field.TypeUUID},
	}
	// FcmTokensTable holds the schema information for the "fcm_tokens" table.
	FcmTokensTable = &schema.Table{
		Name:       "fcm_tokens",
		Columns:    FcmTokensColumns,
		PrimaryKey: []*schema.Column{FcmTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "fcm_tokens_profiles_fcm_tokens",
				Columns:    []*schema.Column{FcmTokensColumns[4]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// GoalsColumns holds the columns for the "goals" table.
	GoalsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeString},
		{Name: "start", Type: field.TypeTime},
		{Name: "end", Type: field.TypeTime},
		{Name: "healthkit_workout_activity_type", Type: field.TypeString, Nullable: true},
		{Name: "action", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
		{Name: "unit", Type: field.TypeString},
		{Name: "value_aggregation_type", Type: field.TypeString},
		{Name: "time_interval", Type: field.TypeString},
		{Name: "status", Type: field.TypeString, Default: "active"},
		{Name: "current_total_value", Type: field.TypeString, Nullable: true},
		{Name: "per_workout_data", Type: field.TypeJSON, Nullable: true},
		{Name: "goal_profile", Type: field.TypeUUID},
		{Name: "goal_competition", Type: field.TypeUUID, Nullable: true},
		{Name: "goal_squad", Type: field.TypeUUID, Nullable: true},
	}
	// GoalsTable holds the schema information for the "goals" table.
	GoalsTable = &schema.Table{
		Name:       "goals",
		Columns:    GoalsColumns,
		PrimaryKey: []*schema.Column{GoalsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "goals_profiles_profile",
				Columns:    []*schema.Column{GoalsColumns[15]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "goals_competitions_competition",
				Columns:    []*schema.Column{GoalsColumns[16]},
				RefColumns: []*schema.Column{CompetitionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "goals_squads_squad",
				Columns:    []*schema.Column{GoalsColumns[17]},
				RefColumns: []*schema.Column{SquadsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// InvitesColumns holds the columns for the "invites" table.
	InvitesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeString, Default: "pending"},
		{Name: "invite_sender", Type: field.TypeUUID},
		{Name: "invite_receiver", Type: field.TypeUUID},
		{Name: "invite_squad", Type: field.TypeUUID, Nullable: true},
		{Name: "invite_competition", Type: field.TypeUUID, Nullable: true},
		{Name: "invite_workout", Type: field.TypeUUID, Nullable: true},
	}
	// InvitesTable holds the schema information for the "invites" table.
	InvitesTable = &schema.Table{
		Name:       "invites",
		Columns:    InvitesColumns,
		PrimaryKey: []*schema.Column{InvitesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "invites_profiles_sender",
				Columns:    []*schema.Column{InvitesColumns[4]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "invites_profiles_receiver",
				Columns:    []*schema.Column{InvitesColumns[5]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "invites_squads_squad",
				Columns:    []*schema.Column{InvitesColumns[6]},
				RefColumns: []*schema.Column{SquadsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "invites_competitions_competition",
				Columns:    []*schema.Column{InvitesColumns[7]},
				RefColumns: []*schema.Column{CompetitionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "invites_workouts_workout",
				Columns:    []*schema.Column{InvitesColumns[8]},
				RefColumns: []*schema.Column{WorkoutsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NotificationsColumns holds the columns for the "notifications" table.
	NotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString},
		{Name: "body", Type: field.TypeString},
		{Name: "sent", Type: field.TypeTime},
		{Name: "opened", Type: field.TypeTime, Nullable: true},
		{Name: "data", Type: field.TypeJSON, Nullable: true},
		{Name: "profile_notifications", Type: field.TypeUUID},
	}
	// NotificationsTable holds the schema information for the "notifications" table.
	NotificationsTable = &schema.Table{
		Name:       "notifications",
		Columns:    NotificationsColumns,
		PrimaryKey: []*schema.Column{NotificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notifications_profiles_notifications",
				Columns:    []*schema.Column{NotificationsColumns[8]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// NotificationPreferencesColumns holds the columns for the "notification_preferences" table.
	NotificationPreferencesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "settings", Type: field.TypeJSON},
		{Name: "profile_notification_preferences", Type: field.TypeUUID, Unique: true},
	}
	// NotificationPreferencesTable holds the schema information for the "notification_preferences" table.
	NotificationPreferencesTable = &schema.Table{
		Name:       "notification_preferences",
		Columns:    NotificationPreferencesColumns,
		PrimaryKey: []*schema.Column{NotificationPreferencesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notification_preferences_profiles_notification_preferences",
				Columns:    []*schema.Column{NotificationPreferencesColumns[4]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "public", Type: field.TypeBool, Default: true},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
	}
	// ProfilesColumns holds the columns for the "profiles" table.
	ProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "public", Type: field.TypeBool, Default: true},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "picture", Type: field.TypeString, Nullable: true},
		{Name: "birthday", Type: field.TypeTime, Nullable: true},
		{Name: "onboarding_completed", Type: field.TypeBool, Default: false},
		{Name: "app_config_profile", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "user_profile", Type: field.TypeUUID, Unique: true},
	}
	// ProfilesTable holds the schema information for the "profiles" table.
	ProfilesTable = &schema.Table{
		Name:       "profiles",
		Columns:    ProfilesColumns,
		PrimaryKey: []*schema.Column{ProfilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "profiles_app_configs_profile",
				Columns:    []*schema.Column{ProfilesColumns[9]},
				RefColumns: []*schema.Column{AppConfigsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "profiles_users_profile",
				Columns:    []*schema.Column{ProfilesColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SquadsColumns holds the columns for the "squads" table.
	SquadsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "public", Type: field.TypeBool, Default: true},
		{Name: "title", Type: field.TypeString, Unique: true},
		{Name: "squad_owner", Type: field.TypeUUID, Nullable: true},
	}
	// SquadsTable holds the schema information for the "squads" table.
	SquadsTable = &schema.Table{
		Name:       "squads",
		Columns:    SquadsColumns,
		PrimaryKey: []*schema.Column{SquadsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "squads_profiles_owner",
				Columns:    []*schema.Column{SquadsColumns[5]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "subject", Type: field.TypeString, Unique: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// WorkoutsColumns holds the columns for the "workouts" table.
	WorkoutsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "healthkit_workout_activity_type", Type: field.TypeString},
		{Name: "workout_leader", Type: field.TypeUUID, Nullable: true},
		{Name: "workout_competition", Type: field.TypeUUID, Nullable: true},
	}
	// WorkoutsTable holds the schema information for the "workouts" table.
	WorkoutsTable = &schema.Table{
		Name:       "workouts",
		Columns:    WorkoutsColumns,
		PrimaryKey: []*schema.Column{WorkoutsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "workouts_profiles_leader",
				Columns:    []*schema.Column{WorkoutsColumns[4]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "workouts_competitions_competition",
				Columns:    []*schema.Column{WorkoutsColumns[5]},
				RefColumns: []*schema.Column{CompetitionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// WorkoutDataColumns holds the columns for the "workout_data" table.
	WorkoutDataColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "healthkit_workout_id", Type: field.TypeString, Nullable: true},
		{Name: "healthkit_workout_start_date", Type: field.TypeTime, Nullable: true},
		{Name: "healthkit_workout_end_date", Type: field.TypeTime, Nullable: true},
		{Name: "distance", Type: field.TypeFloat64, Nullable: true},
		{Name: "duration", Type: field.TypeString, Nullable: true},
		{Name: "energy_burned", Type: field.TypeString, Nullable: true},
		{Name: "average_heart_rate", Type: field.TypeString, Nullable: true},
		{Name: "source", Type: field.TypeString, Default: "swiftui-golang-app-demo"},
		{Name: "location_type", Type: field.TypeString, Default: "indoor"},
		{Name: "weather", Type: field.TypeJSON, Nullable: true},
		{Name: "workout_data_workout", Type: field.TypeUUID, Nullable: true},
		{Name: "workout_data_profile", Type: field.TypeUUID},
		{Name: "workout_data_competition", Type: field.TypeUUID, Nullable: true},
	}
	// WorkoutDataTable holds the schema information for the "workout_data" table.
	WorkoutDataTable = &schema.Table{
		Name:       "workout_data",
		Columns:    WorkoutDataColumns,
		PrimaryKey: []*schema.Column{WorkoutDataColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "workout_data_workouts_workout",
				Columns:    []*schema.Column{WorkoutDataColumns[13]},
				RefColumns: []*schema.Column{WorkoutsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "workout_data_profiles_profile",
				Columns:    []*schema.Column{WorkoutDataColumns[14]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "workout_data_competitions_competition",
				Columns:    []*schema.Column{WorkoutDataColumns[15]},
				RefColumns: []*schema.Column{CompetitionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// WorkoutRouteDataColumns holds the columns for the "workout_route_data" table.
	WorkoutRouteDataColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "workout_data_workout_route_data", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "workout_route_data_workout", Type: field.TypeUUID},
	}
	// WorkoutRouteDataTable holds the schema information for the "workout_route_data" table.
	WorkoutRouteDataTable = &schema.Table{
		Name:       "workout_route_data",
		Columns:    WorkoutRouteDataColumns,
		PrimaryKey: []*schema.Column{WorkoutRouteDataColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "workout_route_data_workout_data_workout_route_data",
				Columns:    []*schema.Column{WorkoutRouteDataColumns[3]},
				RefColumns: []*schema.Column{WorkoutDataColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "workout_route_data_workouts_workout",
				Columns:    []*schema.Column{WorkoutRouteDataColumns[4]},
				RefColumns: []*schema.Column{WorkoutsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CompetitionParticipantsColumns holds the columns for the "competition_participants" table.
	CompetitionParticipantsColumns = []*schema.Column{
		{Name: "competition_id", Type: field.TypeUUID},
		{Name: "profile_id", Type: field.TypeUUID},
	}
	// CompetitionParticipantsTable holds the schema information for the "competition_participants" table.
	CompetitionParticipantsTable = &schema.Table{
		Name:       "competition_participants",
		Columns:    CompetitionParticipantsColumns,
		PrimaryKey: []*schema.Column{CompetitionParticipantsColumns[0], CompetitionParticipantsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "competition_participants_competition_id",
				Columns:    []*schema.Column{CompetitionParticipantsColumns[0]},
				RefColumns: []*schema.Column{CompetitionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "competition_participants_profile_id",
				Columns:    []*schema.Column{CompetitionParticipantsColumns[1]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// SquadMembersColumns holds the columns for the "squad_members" table.
	SquadMembersColumns = []*schema.Column{
		{Name: "squad_id", Type: field.TypeUUID},
		{Name: "profile_id", Type: field.TypeUUID},
	}
	// SquadMembersTable holds the schema information for the "squad_members" table.
	SquadMembersTable = &schema.Table{
		Name:       "squad_members",
		Columns:    SquadMembersColumns,
		PrimaryKey: []*schema.Column{SquadMembersColumns[0], SquadMembersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "squad_members_squad_id",
				Columns:    []*schema.Column{SquadMembersColumns[0]},
				RefColumns: []*schema.Column{SquadsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "squad_members_profile_id",
				Columns:    []*schema.Column{SquadMembersColumns[1]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ActionsTable,
		AppConfigsTable,
		CompetitionsTable,
		CompetitionResultsTable,
		FcmTokensTable,
		GoalsTable,
		InvitesTable,
		NotificationsTable,
		NotificationPreferencesTable,
		PostsTable,
		ProfilesTable,
		SquadsTable,
		UsersTable,
		WorkoutsTable,
		WorkoutDataTable,
		WorkoutRouteDataTable,
		CompetitionParticipantsTable,
		SquadMembersTable,
	}
)

func init() {
	ActionsTable.ForeignKeys[0].RefTable = ProfilesTable
	CompetitionsTable.ForeignKeys[0].RefTable = ProfilesTable
	CompetitionResultsTable.ForeignKeys[0].RefTable = CompetitionsTable
	CompetitionResultsTable.ForeignKeys[1].RefTable = ProfilesTable
	CompetitionResultsTable.ForeignKeys[2].RefTable = SquadsTable
	FcmTokensTable.ForeignKeys[0].RefTable = ProfilesTable
	GoalsTable.ForeignKeys[0].RefTable = ProfilesTable
	GoalsTable.ForeignKeys[1].RefTable = CompetitionsTable
	GoalsTable.ForeignKeys[2].RefTable = SquadsTable
	InvitesTable.ForeignKeys[0].RefTable = ProfilesTable
	InvitesTable.ForeignKeys[1].RefTable = ProfilesTable
	InvitesTable.ForeignKeys[2].RefTable = SquadsTable
	InvitesTable.ForeignKeys[3].RefTable = CompetitionsTable
	InvitesTable.ForeignKeys[4].RefTable = WorkoutsTable
	NotificationsTable.ForeignKeys[0].RefTable = ProfilesTable
	NotificationPreferencesTable.ForeignKeys[0].RefTable = ProfilesTable
	ProfilesTable.ForeignKeys[0].RefTable = AppConfigsTable
	ProfilesTable.ForeignKeys[1].RefTable = UsersTable
	SquadsTable.ForeignKeys[0].RefTable = ProfilesTable
	WorkoutsTable.ForeignKeys[0].RefTable = ProfilesTable
	WorkoutsTable.ForeignKeys[1].RefTable = CompetitionsTable
	WorkoutDataTable.ForeignKeys[0].RefTable = WorkoutsTable
	WorkoutDataTable.ForeignKeys[1].RefTable = ProfilesTable
	WorkoutDataTable.ForeignKeys[2].RefTable = CompetitionsTable
	WorkoutRouteDataTable.ForeignKeys[0].RefTable = WorkoutDataTable
	WorkoutRouteDataTable.ForeignKeys[1].RefTable = WorkoutsTable
	CompetitionParticipantsTable.ForeignKeys[0].RefTable = CompetitionsTable
	CompetitionParticipantsTable.ForeignKeys[1].RefTable = ProfilesTable
	SquadMembersTable.ForeignKeys[0].RefTable = SquadsTable
	SquadMembersTable.ForeignKeys[1].RefTable = ProfilesTable
}
