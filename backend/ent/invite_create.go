// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competition"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/invite"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/squad"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workout"
)

// InviteCreate is the builder for creating a Invite entity.
type InviteCreate struct {
	config
	mutation *InviteMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ic *InviteCreate) SetCreatedAt(t time.Time) *InviteCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InviteCreate) SetNillableCreatedAt(t *time.Time) *InviteCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InviteCreate) SetUpdatedAt(t time.Time) *InviteCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InviteCreate) SetNillableUpdatedAt(t *time.Time) *InviteCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetStatus sets the "status" field.
func (ic *InviteCreate) SetStatus(s string) *InviteCreate {
	ic.mutation.SetStatus(s)
	return ic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ic *InviteCreate) SetNillableStatus(s *string) *InviteCreate {
	if s != nil {
		ic.SetStatus(*s)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *InviteCreate) SetID(u uuid.UUID) *InviteCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *InviteCreate) SetNillableID(u *uuid.UUID) *InviteCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// SetSenderID sets the "sender" edge to the Profile entity by ID.
func (ic *InviteCreate) SetSenderID(id uuid.UUID) *InviteCreate {
	ic.mutation.SetSenderID(id)
	return ic
}

// SetSender sets the "sender" edge to the Profile entity.
func (ic *InviteCreate) SetSender(p *Profile) *InviteCreate {
	return ic.SetSenderID(p.ID)
}

// SetReceiverID sets the "receiver" edge to the Profile entity by ID.
func (ic *InviteCreate) SetReceiverID(id uuid.UUID) *InviteCreate {
	ic.mutation.SetReceiverID(id)
	return ic
}

// SetReceiver sets the "receiver" edge to the Profile entity.
func (ic *InviteCreate) SetReceiver(p *Profile) *InviteCreate {
	return ic.SetReceiverID(p.ID)
}

// SetSquadID sets the "squad" edge to the Squad entity by ID.
func (ic *InviteCreate) SetSquadID(id uuid.UUID) *InviteCreate {
	ic.mutation.SetSquadID(id)
	return ic
}

// SetNillableSquadID sets the "squad" edge to the Squad entity by ID if the given value is not nil.
func (ic *InviteCreate) SetNillableSquadID(id *uuid.UUID) *InviteCreate {
	if id != nil {
		ic = ic.SetSquadID(*id)
	}
	return ic
}

// SetSquad sets the "squad" edge to the Squad entity.
func (ic *InviteCreate) SetSquad(s *Squad) *InviteCreate {
	return ic.SetSquadID(s.ID)
}

// SetCompetitionID sets the "competition" edge to the Competition entity by ID.
func (ic *InviteCreate) SetCompetitionID(id uuid.UUID) *InviteCreate {
	ic.mutation.SetCompetitionID(id)
	return ic
}

// SetNillableCompetitionID sets the "competition" edge to the Competition entity by ID if the given value is not nil.
func (ic *InviteCreate) SetNillableCompetitionID(id *uuid.UUID) *InviteCreate {
	if id != nil {
		ic = ic.SetCompetitionID(*id)
	}
	return ic
}

// SetCompetition sets the "competition" edge to the Competition entity.
func (ic *InviteCreate) SetCompetition(c *Competition) *InviteCreate {
	return ic.SetCompetitionID(c.ID)
}

// SetWorkoutID sets the "workout" edge to the Workout entity by ID.
func (ic *InviteCreate) SetWorkoutID(id uuid.UUID) *InviteCreate {
	ic.mutation.SetWorkoutID(id)
	return ic
}

// SetNillableWorkoutID sets the "workout" edge to the Workout entity by ID if the given value is not nil.
func (ic *InviteCreate) SetNillableWorkoutID(id *uuid.UUID) *InviteCreate {
	if id != nil {
		ic = ic.SetWorkoutID(*id)
	}
	return ic
}

// SetWorkout sets the "workout" edge to the Workout entity.
func (ic *InviteCreate) SetWorkout(w *Workout) *InviteCreate {
	return ic.SetWorkoutID(w.ID)
}

// Mutation returns the InviteMutation object of the builder.
func (ic *InviteCreate) Mutation() *InviteMutation {
	return ic.mutation
}

// Save creates the Invite in the database.
func (ic *InviteCreate) Save(ctx context.Context) (*Invite, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InviteCreate) SaveX(ctx context.Context) *Invite {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InviteCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InviteCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InviteCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := invite.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := invite.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.Status(); !ok {
		v := invite.DefaultStatus
		ic.mutation.SetStatus(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := invite.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InviteCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Invite.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Invite.updated_at"`)}
	}
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Invite.status"`)}
	}
	if _, ok := ic.mutation.SenderID(); !ok {
		return &ValidationError{Name: "sender", err: errors.New(`ent: missing required edge "Invite.sender"`)}
	}
	if _, ok := ic.mutation.ReceiverID(); !ok {
		return &ValidationError{Name: "receiver", err: errors.New(`ent: missing required edge "Invite.receiver"`)}
	}
	return nil
}

func (ic *InviteCreate) sqlSave(ctx context.Context) (*Invite, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InviteCreate) createSpec() (*Invite, *sqlgraph.CreateSpec) {
	var (
		_node = &Invite{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(invite.Table, sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(invite.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(invite.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.SetField(invite.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if nodes := ic.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.SenderTable,
			Columns: []string{invite.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.invite_sender = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.ReceiverTable,
			Columns: []string{invite.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.invite_receiver = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.SquadTable,
			Columns: []string{invite.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.invite_squad = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.CompetitionTable,
			Columns: []string{invite.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.invite_competition = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.WorkoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.WorkoutTable,
			Columns: []string{invite.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.invite_workout = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InviteCreateBulk is the builder for creating many Invite entities in bulk.
type InviteCreateBulk struct {
	config
	builders []*InviteCreate
}

// Save creates the Invite entities in the database.
func (icb *InviteCreateBulk) Save(ctx context.Context) ([]*Invite, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Invite, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InviteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InviteCreateBulk) SaveX(ctx context.Context) []*Invite {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InviteCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InviteCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
