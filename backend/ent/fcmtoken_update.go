// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/fcmtoken"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/predicate"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
)

// FcmTokenUpdate is the builder for updating FcmToken entities.
type FcmTokenUpdate struct {
	config
	hooks     []Hook
	mutation  *FcmTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FcmTokenUpdate builder.
func (ftu *FcmTokenUpdate) Where(ps ...predicate.FcmToken) *FcmTokenUpdate {
	ftu.mutation.Where(ps...)
	return ftu
}

// SetUpdatedAt sets the "updated_at" field.
func (ftu *FcmTokenUpdate) SetUpdatedAt(t time.Time) *FcmTokenUpdate {
	ftu.mutation.SetUpdatedAt(t)
	return ftu
}

// SetToken sets the "token" field.
func (ftu *FcmTokenUpdate) SetToken(s string) *FcmTokenUpdate {
	ftu.mutation.SetToken(s)
	return ftu
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (ftu *FcmTokenUpdate) SetProfileID(id uuid.UUID) *FcmTokenUpdate {
	ftu.mutation.SetProfileID(id)
	return ftu
}

// SetProfile sets the "profile" edge to the Profile entity.
func (ftu *FcmTokenUpdate) SetProfile(p *Profile) *FcmTokenUpdate {
	return ftu.SetProfileID(p.ID)
}

// Mutation returns the FcmTokenMutation object of the builder.
func (ftu *FcmTokenUpdate) Mutation() *FcmTokenMutation {
	return ftu.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (ftu *FcmTokenUpdate) ClearProfile() *FcmTokenUpdate {
	ftu.mutation.ClearProfile()
	return ftu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ftu *FcmTokenUpdate) Save(ctx context.Context) (int, error) {
	ftu.defaults()
	return withHooks(ctx, ftu.sqlSave, ftu.mutation, ftu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ftu *FcmTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := ftu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ftu *FcmTokenUpdate) Exec(ctx context.Context) error {
	_, err := ftu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftu *FcmTokenUpdate) ExecX(ctx context.Context) {
	if err := ftu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ftu *FcmTokenUpdate) defaults() {
	if _, ok := ftu.mutation.UpdatedAt(); !ok {
		v := fcmtoken.UpdateDefaultUpdatedAt()
		ftu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftu *FcmTokenUpdate) check() error {
	if _, ok := ftu.mutation.ProfileID(); ftu.mutation.ProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FcmToken.profile"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ftu *FcmTokenUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FcmTokenUpdate {
	ftu.modifiers = append(ftu.modifiers, modifiers...)
	return ftu
}

func (ftu *FcmTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ftu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fcmtoken.Table, fcmtoken.Columns, sqlgraph.NewFieldSpec(fcmtoken.FieldID, field.TypeUUID))
	if ps := ftu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ftu.mutation.UpdatedAt(); ok {
		_spec.SetField(fcmtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ftu.mutation.Token(); ok {
		_spec.SetField(fcmtoken.FieldToken, field.TypeString, value)
	}
	if ftu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fcmtoken.ProfileTable,
			Columns: []string{fcmtoken.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fcmtoken.ProfileTable,
			Columns: []string{fcmtoken.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ftu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ftu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fcmtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ftu.mutation.done = true
	return n, nil
}

// FcmTokenUpdateOne is the builder for updating a single FcmToken entity.
type FcmTokenUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FcmTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ftuo *FcmTokenUpdateOne) SetUpdatedAt(t time.Time) *FcmTokenUpdateOne {
	ftuo.mutation.SetUpdatedAt(t)
	return ftuo
}

// SetToken sets the "token" field.
func (ftuo *FcmTokenUpdateOne) SetToken(s string) *FcmTokenUpdateOne {
	ftuo.mutation.SetToken(s)
	return ftuo
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (ftuo *FcmTokenUpdateOne) SetProfileID(id uuid.UUID) *FcmTokenUpdateOne {
	ftuo.mutation.SetProfileID(id)
	return ftuo
}

// SetProfile sets the "profile" edge to the Profile entity.
func (ftuo *FcmTokenUpdateOne) SetProfile(p *Profile) *FcmTokenUpdateOne {
	return ftuo.SetProfileID(p.ID)
}

// Mutation returns the FcmTokenMutation object of the builder.
func (ftuo *FcmTokenUpdateOne) Mutation() *FcmTokenMutation {
	return ftuo.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (ftuo *FcmTokenUpdateOne) ClearProfile() *FcmTokenUpdateOne {
	ftuo.mutation.ClearProfile()
	return ftuo
}

// Where appends a list predicates to the FcmTokenUpdate builder.
func (ftuo *FcmTokenUpdateOne) Where(ps ...predicate.FcmToken) *FcmTokenUpdateOne {
	ftuo.mutation.Where(ps...)
	return ftuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ftuo *FcmTokenUpdateOne) Select(field string, fields ...string) *FcmTokenUpdateOne {
	ftuo.fields = append([]string{field}, fields...)
	return ftuo
}

// Save executes the query and returns the updated FcmToken entity.
func (ftuo *FcmTokenUpdateOne) Save(ctx context.Context) (*FcmToken, error) {
	ftuo.defaults()
	return withHooks(ctx, ftuo.sqlSave, ftuo.mutation, ftuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ftuo *FcmTokenUpdateOne) SaveX(ctx context.Context) *FcmToken {
	node, err := ftuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ftuo *FcmTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := ftuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftuo *FcmTokenUpdateOne) ExecX(ctx context.Context) {
	if err := ftuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ftuo *FcmTokenUpdateOne) defaults() {
	if _, ok := ftuo.mutation.UpdatedAt(); !ok {
		v := fcmtoken.UpdateDefaultUpdatedAt()
		ftuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftuo *FcmTokenUpdateOne) check() error {
	if _, ok := ftuo.mutation.ProfileID(); ftuo.mutation.ProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FcmToken.profile"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ftuo *FcmTokenUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FcmTokenUpdateOne {
	ftuo.modifiers = append(ftuo.modifiers, modifiers...)
	return ftuo
}

func (ftuo *FcmTokenUpdateOne) sqlSave(ctx context.Context) (_node *FcmToken, err error) {
	if err := ftuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fcmtoken.Table, fcmtoken.Columns, sqlgraph.NewFieldSpec(fcmtoken.FieldID, field.TypeUUID))
	id, ok := ftuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FcmToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ftuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fcmtoken.FieldID)
		for _, f := range fields {
			if !fcmtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fcmtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ftuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ftuo.mutation.UpdatedAt(); ok {
		_spec.SetField(fcmtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ftuo.mutation.Token(); ok {
		_spec.SetField(fcmtoken.FieldToken, field.TypeString, value)
	}
	if ftuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fcmtoken.ProfileTable,
			Columns: []string{fcmtoken.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fcmtoken.ProfileTable,
			Columns: []string{fcmtoken.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ftuo.modifiers...)
	_node = &FcmToken{config: ftuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ftuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fcmtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ftuo.mutation.done = true
	return _node, nil
}
