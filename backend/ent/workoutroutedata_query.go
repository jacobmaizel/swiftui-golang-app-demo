// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/predicate"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workout"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutdata"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutroutedata"
)

// WorkoutRouteDataQuery is the builder for querying WorkoutRouteData entities.
type WorkoutRouteDataQuery struct {
	config
	ctx             *QueryContext
	order           []workoutroutedata.OrderOption
	inters          []Interceptor
	predicates      []predicate.WorkoutRouteData
	withWorkout     *WorkoutQuery
	withWorkoutData *WorkoutDataQuery
	withFKs         bool
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkoutRouteDataQuery builder.
func (wrdq *WorkoutRouteDataQuery) Where(ps ...predicate.WorkoutRouteData) *WorkoutRouteDataQuery {
	wrdq.predicates = append(wrdq.predicates, ps...)
	return wrdq
}

// Limit the number of records to be returned by this query.
func (wrdq *WorkoutRouteDataQuery) Limit(limit int) *WorkoutRouteDataQuery {
	wrdq.ctx.Limit = &limit
	return wrdq
}

// Offset to start from.
func (wrdq *WorkoutRouteDataQuery) Offset(offset int) *WorkoutRouteDataQuery {
	wrdq.ctx.Offset = &offset
	return wrdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wrdq *WorkoutRouteDataQuery) Unique(unique bool) *WorkoutRouteDataQuery {
	wrdq.ctx.Unique = &unique
	return wrdq
}

// Order specifies how the records should be ordered.
func (wrdq *WorkoutRouteDataQuery) Order(o ...workoutroutedata.OrderOption) *WorkoutRouteDataQuery {
	wrdq.order = append(wrdq.order, o...)
	return wrdq
}

// QueryWorkout chains the current query on the "workout" edge.
func (wrdq *WorkoutRouteDataQuery) QueryWorkout() *WorkoutQuery {
	query := (&WorkoutClient{config: wrdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wrdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wrdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workoutroutedata.Table, workoutroutedata.FieldID, selector),
			sqlgraph.To(workout.Table, workout.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workoutroutedata.WorkoutTable, workoutroutedata.WorkoutColumn),
		)
		fromU = sqlgraph.SetNeighbors(wrdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkoutData chains the current query on the "workout_data" edge.
func (wrdq *WorkoutRouteDataQuery) QueryWorkoutData() *WorkoutDataQuery {
	query := (&WorkoutDataClient{config: wrdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wrdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wrdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workoutroutedata.Table, workoutroutedata.FieldID, selector),
			sqlgraph.To(workoutdata.Table, workoutdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, workoutroutedata.WorkoutDataTable, workoutroutedata.WorkoutDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(wrdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkoutRouteData entity from the query.
// Returns a *NotFoundError when no WorkoutRouteData was found.
func (wrdq *WorkoutRouteDataQuery) First(ctx context.Context) (*WorkoutRouteData, error) {
	nodes, err := wrdq.Limit(1).All(setContextOp(ctx, wrdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workoutroutedata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wrdq *WorkoutRouteDataQuery) FirstX(ctx context.Context) *WorkoutRouteData {
	node, err := wrdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkoutRouteData ID from the query.
// Returns a *NotFoundError when no WorkoutRouteData ID was found.
func (wrdq *WorkoutRouteDataQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wrdq.Limit(1).IDs(setContextOp(ctx, wrdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workoutroutedata.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wrdq *WorkoutRouteDataQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := wrdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkoutRouteData entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkoutRouteData entity is found.
// Returns a *NotFoundError when no WorkoutRouteData entities are found.
func (wrdq *WorkoutRouteDataQuery) Only(ctx context.Context) (*WorkoutRouteData, error) {
	nodes, err := wrdq.Limit(2).All(setContextOp(ctx, wrdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workoutroutedata.Label}
	default:
		return nil, &NotSingularError{workoutroutedata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wrdq *WorkoutRouteDataQuery) OnlyX(ctx context.Context) *WorkoutRouteData {
	node, err := wrdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkoutRouteData ID in the query.
// Returns a *NotSingularError when more than one WorkoutRouteData ID is found.
// Returns a *NotFoundError when no entities are found.
func (wrdq *WorkoutRouteDataQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wrdq.Limit(2).IDs(setContextOp(ctx, wrdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workoutroutedata.Label}
	default:
		err = &NotSingularError{workoutroutedata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wrdq *WorkoutRouteDataQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := wrdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkoutRouteDataSlice.
func (wrdq *WorkoutRouteDataQuery) All(ctx context.Context) ([]*WorkoutRouteData, error) {
	ctx = setContextOp(ctx, wrdq.ctx, "All")
	if err := wrdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WorkoutRouteData, *WorkoutRouteDataQuery]()
	return withInterceptors[[]*WorkoutRouteData](ctx, wrdq, qr, wrdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wrdq *WorkoutRouteDataQuery) AllX(ctx context.Context) []*WorkoutRouteData {
	nodes, err := wrdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkoutRouteData IDs.
func (wrdq *WorkoutRouteDataQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if wrdq.ctx.Unique == nil && wrdq.path != nil {
		wrdq.Unique(true)
	}
	ctx = setContextOp(ctx, wrdq.ctx, "IDs")
	if err = wrdq.Select(workoutroutedata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wrdq *WorkoutRouteDataQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := wrdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wrdq *WorkoutRouteDataQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wrdq.ctx, "Count")
	if err := wrdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wrdq, querierCount[*WorkoutRouteDataQuery](), wrdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wrdq *WorkoutRouteDataQuery) CountX(ctx context.Context) int {
	count, err := wrdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wrdq *WorkoutRouteDataQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wrdq.ctx, "Exist")
	switch _, err := wrdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wrdq *WorkoutRouteDataQuery) ExistX(ctx context.Context) bool {
	exist, err := wrdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkoutRouteDataQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wrdq *WorkoutRouteDataQuery) Clone() *WorkoutRouteDataQuery {
	if wrdq == nil {
		return nil
	}
	return &WorkoutRouteDataQuery{
		config:          wrdq.config,
		ctx:             wrdq.ctx.Clone(),
		order:           append([]workoutroutedata.OrderOption{}, wrdq.order...),
		inters:          append([]Interceptor{}, wrdq.inters...),
		predicates:      append([]predicate.WorkoutRouteData{}, wrdq.predicates...),
		withWorkout:     wrdq.withWorkout.Clone(),
		withWorkoutData: wrdq.withWorkoutData.Clone(),
		// clone intermediate query.
		sql:  wrdq.sql.Clone(),
		path: wrdq.path,
	}
}

// WithWorkout tells the query-builder to eager-load the nodes that are connected to
// the "workout" edge. The optional arguments are used to configure the query builder of the edge.
func (wrdq *WorkoutRouteDataQuery) WithWorkout(opts ...func(*WorkoutQuery)) *WorkoutRouteDataQuery {
	query := (&WorkoutClient{config: wrdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wrdq.withWorkout = query
	return wrdq
}

// WithWorkoutData tells the query-builder to eager-load the nodes that are connected to
// the "workout_data" edge. The optional arguments are used to configure the query builder of the edge.
func (wrdq *WorkoutRouteDataQuery) WithWorkoutData(opts ...func(*WorkoutDataQuery)) *WorkoutRouteDataQuery {
	query := (&WorkoutDataClient{config: wrdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wrdq.withWorkoutData = query
	return wrdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkoutRouteData.Query().
//		GroupBy(workoutroutedata.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wrdq *WorkoutRouteDataQuery) GroupBy(field string, fields ...string) *WorkoutRouteDataGroupBy {
	wrdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkoutRouteDataGroupBy{build: wrdq}
	grbuild.flds = &wrdq.ctx.Fields
	grbuild.label = workoutroutedata.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.WorkoutRouteData.Query().
//		Select(workoutroutedata.FieldCreatedAt).
//		Scan(ctx, &v)
func (wrdq *WorkoutRouteDataQuery) Select(fields ...string) *WorkoutRouteDataSelect {
	wrdq.ctx.Fields = append(wrdq.ctx.Fields, fields...)
	sbuild := &WorkoutRouteDataSelect{WorkoutRouteDataQuery: wrdq}
	sbuild.label = workoutroutedata.Label
	sbuild.flds, sbuild.scan = &wrdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkoutRouteDataSelect configured with the given aggregations.
func (wrdq *WorkoutRouteDataQuery) Aggregate(fns ...AggregateFunc) *WorkoutRouteDataSelect {
	return wrdq.Select().Aggregate(fns...)
}

func (wrdq *WorkoutRouteDataQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wrdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wrdq); err != nil {
				return err
			}
		}
	}
	for _, f := range wrdq.ctx.Fields {
		if !workoutroutedata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wrdq.path != nil {
		prev, err := wrdq.path(ctx)
		if err != nil {
			return err
		}
		wrdq.sql = prev
	}
	return nil
}

func (wrdq *WorkoutRouteDataQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WorkoutRouteData, error) {
	var (
		nodes       = []*WorkoutRouteData{}
		withFKs     = wrdq.withFKs
		_spec       = wrdq.querySpec()
		loadedTypes = [2]bool{
			wrdq.withWorkout != nil,
			wrdq.withWorkoutData != nil,
		}
	)
	if wrdq.withWorkout != nil || wrdq.withWorkoutData != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, workoutroutedata.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WorkoutRouteData).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WorkoutRouteData{config: wrdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(wrdq.modifiers) > 0 {
		_spec.Modifiers = wrdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wrdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wrdq.withWorkout; query != nil {
		if err := wrdq.loadWorkout(ctx, query, nodes, nil,
			func(n *WorkoutRouteData, e *Workout) { n.Edges.Workout = e }); err != nil {
			return nil, err
		}
	}
	if query := wrdq.withWorkoutData; query != nil {
		if err := wrdq.loadWorkoutData(ctx, query, nodes, nil,
			func(n *WorkoutRouteData, e *WorkoutData) { n.Edges.WorkoutData = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wrdq *WorkoutRouteDataQuery) loadWorkout(ctx context.Context, query *WorkoutQuery, nodes []*WorkoutRouteData, init func(*WorkoutRouteData), assign func(*WorkoutRouteData, *Workout)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*WorkoutRouteData)
	for i := range nodes {
		if nodes[i].workout_route_data_workout == nil {
			continue
		}
		fk := *nodes[i].workout_route_data_workout
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workout.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workout_route_data_workout" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wrdq *WorkoutRouteDataQuery) loadWorkoutData(ctx context.Context, query *WorkoutDataQuery, nodes []*WorkoutRouteData, init func(*WorkoutRouteData), assign func(*WorkoutRouteData, *WorkoutData)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*WorkoutRouteData)
	for i := range nodes {
		if nodes[i].workout_data_workout_route_data == nil {
			continue
		}
		fk := *nodes[i].workout_data_workout_route_data
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workoutdata.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workout_data_workout_route_data" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (wrdq *WorkoutRouteDataQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wrdq.querySpec()
	if len(wrdq.modifiers) > 0 {
		_spec.Modifiers = wrdq.modifiers
	}
	_spec.Node.Columns = wrdq.ctx.Fields
	if len(wrdq.ctx.Fields) > 0 {
		_spec.Unique = wrdq.ctx.Unique != nil && *wrdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wrdq.driver, _spec)
}

func (wrdq *WorkoutRouteDataQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workoutroutedata.Table, workoutroutedata.Columns, sqlgraph.NewFieldSpec(workoutroutedata.FieldID, field.TypeUUID))
	_spec.From = wrdq.sql
	if unique := wrdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wrdq.path != nil {
		_spec.Unique = true
	}
	if fields := wrdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workoutroutedata.FieldID)
		for i := range fields {
			if fields[i] != workoutroutedata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := wrdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wrdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wrdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wrdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wrdq *WorkoutRouteDataQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wrdq.driver.Dialect())
	t1 := builder.Table(workoutroutedata.Table)
	columns := wrdq.ctx.Fields
	if len(columns) == 0 {
		columns = workoutroutedata.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wrdq.sql != nil {
		selector = wrdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wrdq.ctx.Unique != nil && *wrdq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range wrdq.modifiers {
		m(selector)
	}
	for _, p := range wrdq.predicates {
		p(selector)
	}
	for _, p := range wrdq.order {
		p(selector)
	}
	if offset := wrdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wrdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (wrdq *WorkoutRouteDataQuery) Modify(modifiers ...func(s *sql.Selector)) *WorkoutRouteDataSelect {
	wrdq.modifiers = append(wrdq.modifiers, modifiers...)
	return wrdq.Select()
}

// WorkoutRouteDataGroupBy is the group-by builder for WorkoutRouteData entities.
type WorkoutRouteDataGroupBy struct {
	selector
	build *WorkoutRouteDataQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wrdgb *WorkoutRouteDataGroupBy) Aggregate(fns ...AggregateFunc) *WorkoutRouteDataGroupBy {
	wrdgb.fns = append(wrdgb.fns, fns...)
	return wrdgb
}

// Scan applies the selector query and scans the result into the given value.
func (wrdgb *WorkoutRouteDataGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wrdgb.build.ctx, "GroupBy")
	if err := wrdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkoutRouteDataQuery, *WorkoutRouteDataGroupBy](ctx, wrdgb.build, wrdgb, wrdgb.build.inters, v)
}

func (wrdgb *WorkoutRouteDataGroupBy) sqlScan(ctx context.Context, root *WorkoutRouteDataQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wrdgb.fns))
	for _, fn := range wrdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wrdgb.flds)+len(wrdgb.fns))
		for _, f := range *wrdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wrdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wrdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkoutRouteDataSelect is the builder for selecting fields of WorkoutRouteData entities.
type WorkoutRouteDataSelect struct {
	*WorkoutRouteDataQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wrds *WorkoutRouteDataSelect) Aggregate(fns ...AggregateFunc) *WorkoutRouteDataSelect {
	wrds.fns = append(wrds.fns, fns...)
	return wrds
}

// Scan applies the selector query and scans the result into the given value.
func (wrds *WorkoutRouteDataSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wrds.ctx, "Select")
	if err := wrds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkoutRouteDataQuery, *WorkoutRouteDataSelect](ctx, wrds.WorkoutRouteDataQuery, wrds, wrds.inters, v)
}

func (wrds *WorkoutRouteDataSelect) sqlScan(ctx context.Context, root *WorkoutRouteDataQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wrds.fns))
	for _, fn := range wrds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wrds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wrds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (wrds *WorkoutRouteDataSelect) Modify(modifiers ...func(s *sql.Selector)) *WorkoutRouteDataSelect {
	wrds.modifiers = append(wrds.modifiers, modifiers...)
	return wrds
}
