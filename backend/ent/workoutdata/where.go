// Code generated by ent, DO NOT EDIT.

package workoutdata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldUpdatedAt, v))
}

// HealthkitWorkoutID applies equality check predicate on the "healthkit_workout_id" field. It's identical to HealthkitWorkoutIDEQ.
func HealthkitWorkoutID(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldHealthkitWorkoutID, v))
}

// HealthkitWorkoutStartDate applies equality check predicate on the "healthkit_workout_start_date" field. It's identical to HealthkitWorkoutStartDateEQ.
func HealthkitWorkoutStartDate(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldHealthkitWorkoutStartDate, v))
}

// HealthkitWorkoutEndDate applies equality check predicate on the "healthkit_workout_end_date" field. It's identical to HealthkitWorkoutEndDateEQ.
func HealthkitWorkoutEndDate(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldHealthkitWorkoutEndDate, v))
}

// Distance applies equality check predicate on the "distance" field. It's identical to DistanceEQ.
func Distance(v float64) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldDistance, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldDuration, v))
}

// EnergyBurned applies equality check predicate on the "energy_burned" field. It's identical to EnergyBurnedEQ.
func EnergyBurned(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldEnergyBurned, v))
}

// AverageHeartRate applies equality check predicate on the "average_heart_rate" field. It's identical to AverageHeartRateEQ.
func AverageHeartRate(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldAverageHeartRate, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldSource, v))
}

// LocationType applies equality check predicate on the "location_type" field. It's identical to LocationTypeEQ.
func LocationType(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldLocationType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLTE(FieldUpdatedAt, v))
}

// HealthkitWorkoutIDEQ applies the EQ predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDEQ(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldHealthkitWorkoutID, v))
}

// HealthkitWorkoutIDNEQ applies the NEQ predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDNEQ(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNEQ(FieldHealthkitWorkoutID, v))
}

// HealthkitWorkoutIDIn applies the In predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDIn(vs ...string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIn(FieldHealthkitWorkoutID, vs...))
}

// HealthkitWorkoutIDNotIn applies the NotIn predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDNotIn(vs ...string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotIn(FieldHealthkitWorkoutID, vs...))
}

// HealthkitWorkoutIDGT applies the GT predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDGT(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGT(FieldHealthkitWorkoutID, v))
}

// HealthkitWorkoutIDGTE applies the GTE predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDGTE(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGTE(FieldHealthkitWorkoutID, v))
}

// HealthkitWorkoutIDLT applies the LT predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDLT(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLT(FieldHealthkitWorkoutID, v))
}

// HealthkitWorkoutIDLTE applies the LTE predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDLTE(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLTE(FieldHealthkitWorkoutID, v))
}

// HealthkitWorkoutIDContains applies the Contains predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDContains(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldContains(FieldHealthkitWorkoutID, v))
}

// HealthkitWorkoutIDHasPrefix applies the HasPrefix predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDHasPrefix(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldHasPrefix(FieldHealthkitWorkoutID, v))
}

// HealthkitWorkoutIDHasSuffix applies the HasSuffix predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDHasSuffix(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldHasSuffix(FieldHealthkitWorkoutID, v))
}

// HealthkitWorkoutIDIsNil applies the IsNil predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDIsNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIsNull(FieldHealthkitWorkoutID))
}

// HealthkitWorkoutIDNotNil applies the NotNil predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDNotNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotNull(FieldHealthkitWorkoutID))
}

// HealthkitWorkoutIDEqualFold applies the EqualFold predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDEqualFold(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEqualFold(FieldHealthkitWorkoutID, v))
}

// HealthkitWorkoutIDContainsFold applies the ContainsFold predicate on the "healthkit_workout_id" field.
func HealthkitWorkoutIDContainsFold(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldContainsFold(FieldHealthkitWorkoutID, v))
}

// HealthkitWorkoutStartDateEQ applies the EQ predicate on the "healthkit_workout_start_date" field.
func HealthkitWorkoutStartDateEQ(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldHealthkitWorkoutStartDate, v))
}

// HealthkitWorkoutStartDateNEQ applies the NEQ predicate on the "healthkit_workout_start_date" field.
func HealthkitWorkoutStartDateNEQ(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNEQ(FieldHealthkitWorkoutStartDate, v))
}

// HealthkitWorkoutStartDateIn applies the In predicate on the "healthkit_workout_start_date" field.
func HealthkitWorkoutStartDateIn(vs ...time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIn(FieldHealthkitWorkoutStartDate, vs...))
}

// HealthkitWorkoutStartDateNotIn applies the NotIn predicate on the "healthkit_workout_start_date" field.
func HealthkitWorkoutStartDateNotIn(vs ...time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotIn(FieldHealthkitWorkoutStartDate, vs...))
}

// HealthkitWorkoutStartDateGT applies the GT predicate on the "healthkit_workout_start_date" field.
func HealthkitWorkoutStartDateGT(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGT(FieldHealthkitWorkoutStartDate, v))
}

// HealthkitWorkoutStartDateGTE applies the GTE predicate on the "healthkit_workout_start_date" field.
func HealthkitWorkoutStartDateGTE(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGTE(FieldHealthkitWorkoutStartDate, v))
}

// HealthkitWorkoutStartDateLT applies the LT predicate on the "healthkit_workout_start_date" field.
func HealthkitWorkoutStartDateLT(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLT(FieldHealthkitWorkoutStartDate, v))
}

// HealthkitWorkoutStartDateLTE applies the LTE predicate on the "healthkit_workout_start_date" field.
func HealthkitWorkoutStartDateLTE(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLTE(FieldHealthkitWorkoutStartDate, v))
}

// HealthkitWorkoutStartDateIsNil applies the IsNil predicate on the "healthkit_workout_start_date" field.
func HealthkitWorkoutStartDateIsNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIsNull(FieldHealthkitWorkoutStartDate))
}

// HealthkitWorkoutStartDateNotNil applies the NotNil predicate on the "healthkit_workout_start_date" field.
func HealthkitWorkoutStartDateNotNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotNull(FieldHealthkitWorkoutStartDate))
}

// HealthkitWorkoutEndDateEQ applies the EQ predicate on the "healthkit_workout_end_date" field.
func HealthkitWorkoutEndDateEQ(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldHealthkitWorkoutEndDate, v))
}

// HealthkitWorkoutEndDateNEQ applies the NEQ predicate on the "healthkit_workout_end_date" field.
func HealthkitWorkoutEndDateNEQ(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNEQ(FieldHealthkitWorkoutEndDate, v))
}

// HealthkitWorkoutEndDateIn applies the In predicate on the "healthkit_workout_end_date" field.
func HealthkitWorkoutEndDateIn(vs ...time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIn(FieldHealthkitWorkoutEndDate, vs...))
}

// HealthkitWorkoutEndDateNotIn applies the NotIn predicate on the "healthkit_workout_end_date" field.
func HealthkitWorkoutEndDateNotIn(vs ...time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotIn(FieldHealthkitWorkoutEndDate, vs...))
}

// HealthkitWorkoutEndDateGT applies the GT predicate on the "healthkit_workout_end_date" field.
func HealthkitWorkoutEndDateGT(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGT(FieldHealthkitWorkoutEndDate, v))
}

// HealthkitWorkoutEndDateGTE applies the GTE predicate on the "healthkit_workout_end_date" field.
func HealthkitWorkoutEndDateGTE(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGTE(FieldHealthkitWorkoutEndDate, v))
}

// HealthkitWorkoutEndDateLT applies the LT predicate on the "healthkit_workout_end_date" field.
func HealthkitWorkoutEndDateLT(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLT(FieldHealthkitWorkoutEndDate, v))
}

// HealthkitWorkoutEndDateLTE applies the LTE predicate on the "healthkit_workout_end_date" field.
func HealthkitWorkoutEndDateLTE(v time.Time) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLTE(FieldHealthkitWorkoutEndDate, v))
}

// HealthkitWorkoutEndDateIsNil applies the IsNil predicate on the "healthkit_workout_end_date" field.
func HealthkitWorkoutEndDateIsNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIsNull(FieldHealthkitWorkoutEndDate))
}

// HealthkitWorkoutEndDateNotNil applies the NotNil predicate on the "healthkit_workout_end_date" field.
func HealthkitWorkoutEndDateNotNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotNull(FieldHealthkitWorkoutEndDate))
}

// DistanceEQ applies the EQ predicate on the "distance" field.
func DistanceEQ(v float64) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldDistance, v))
}

// DistanceNEQ applies the NEQ predicate on the "distance" field.
func DistanceNEQ(v float64) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNEQ(FieldDistance, v))
}

// DistanceIn applies the In predicate on the "distance" field.
func DistanceIn(vs ...float64) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIn(FieldDistance, vs...))
}

// DistanceNotIn applies the NotIn predicate on the "distance" field.
func DistanceNotIn(vs ...float64) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotIn(FieldDistance, vs...))
}

// DistanceGT applies the GT predicate on the "distance" field.
func DistanceGT(v float64) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGT(FieldDistance, v))
}

// DistanceGTE applies the GTE predicate on the "distance" field.
func DistanceGTE(v float64) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGTE(FieldDistance, v))
}

// DistanceLT applies the LT predicate on the "distance" field.
func DistanceLT(v float64) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLT(FieldDistance, v))
}

// DistanceLTE applies the LTE predicate on the "distance" field.
func DistanceLTE(v float64) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLTE(FieldDistance, v))
}

// DistanceIsNil applies the IsNil predicate on the "distance" field.
func DistanceIsNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIsNull(FieldDistance))
}

// DistanceNotNil applies the NotNil predicate on the "distance" field.
func DistanceNotNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotNull(FieldDistance))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLTE(FieldDuration, v))
}

// DurationContains applies the Contains predicate on the "duration" field.
func DurationContains(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldContains(FieldDuration, v))
}

// DurationHasPrefix applies the HasPrefix predicate on the "duration" field.
func DurationHasPrefix(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldHasPrefix(FieldDuration, v))
}

// DurationHasSuffix applies the HasSuffix predicate on the "duration" field.
func DurationHasSuffix(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldHasSuffix(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotNull(FieldDuration))
}

// DurationEqualFold applies the EqualFold predicate on the "duration" field.
func DurationEqualFold(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEqualFold(FieldDuration, v))
}

// DurationContainsFold applies the ContainsFold predicate on the "duration" field.
func DurationContainsFold(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldContainsFold(FieldDuration, v))
}

// EnergyBurnedEQ applies the EQ predicate on the "energy_burned" field.
func EnergyBurnedEQ(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldEnergyBurned, v))
}

// EnergyBurnedNEQ applies the NEQ predicate on the "energy_burned" field.
func EnergyBurnedNEQ(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNEQ(FieldEnergyBurned, v))
}

// EnergyBurnedIn applies the In predicate on the "energy_burned" field.
func EnergyBurnedIn(vs ...string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIn(FieldEnergyBurned, vs...))
}

// EnergyBurnedNotIn applies the NotIn predicate on the "energy_burned" field.
func EnergyBurnedNotIn(vs ...string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotIn(FieldEnergyBurned, vs...))
}

// EnergyBurnedGT applies the GT predicate on the "energy_burned" field.
func EnergyBurnedGT(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGT(FieldEnergyBurned, v))
}

// EnergyBurnedGTE applies the GTE predicate on the "energy_burned" field.
func EnergyBurnedGTE(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGTE(FieldEnergyBurned, v))
}

// EnergyBurnedLT applies the LT predicate on the "energy_burned" field.
func EnergyBurnedLT(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLT(FieldEnergyBurned, v))
}

// EnergyBurnedLTE applies the LTE predicate on the "energy_burned" field.
func EnergyBurnedLTE(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLTE(FieldEnergyBurned, v))
}

// EnergyBurnedContains applies the Contains predicate on the "energy_burned" field.
func EnergyBurnedContains(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldContains(FieldEnergyBurned, v))
}

// EnergyBurnedHasPrefix applies the HasPrefix predicate on the "energy_burned" field.
func EnergyBurnedHasPrefix(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldHasPrefix(FieldEnergyBurned, v))
}

// EnergyBurnedHasSuffix applies the HasSuffix predicate on the "energy_burned" field.
func EnergyBurnedHasSuffix(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldHasSuffix(FieldEnergyBurned, v))
}

// EnergyBurnedIsNil applies the IsNil predicate on the "energy_burned" field.
func EnergyBurnedIsNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIsNull(FieldEnergyBurned))
}

// EnergyBurnedNotNil applies the NotNil predicate on the "energy_burned" field.
func EnergyBurnedNotNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotNull(FieldEnergyBurned))
}

// EnergyBurnedEqualFold applies the EqualFold predicate on the "energy_burned" field.
func EnergyBurnedEqualFold(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEqualFold(FieldEnergyBurned, v))
}

// EnergyBurnedContainsFold applies the ContainsFold predicate on the "energy_burned" field.
func EnergyBurnedContainsFold(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldContainsFold(FieldEnergyBurned, v))
}

// AverageHeartRateEQ applies the EQ predicate on the "average_heart_rate" field.
func AverageHeartRateEQ(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldAverageHeartRate, v))
}

// AverageHeartRateNEQ applies the NEQ predicate on the "average_heart_rate" field.
func AverageHeartRateNEQ(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNEQ(FieldAverageHeartRate, v))
}

// AverageHeartRateIn applies the In predicate on the "average_heart_rate" field.
func AverageHeartRateIn(vs ...string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIn(FieldAverageHeartRate, vs...))
}

// AverageHeartRateNotIn applies the NotIn predicate on the "average_heart_rate" field.
func AverageHeartRateNotIn(vs ...string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotIn(FieldAverageHeartRate, vs...))
}

// AverageHeartRateGT applies the GT predicate on the "average_heart_rate" field.
func AverageHeartRateGT(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGT(FieldAverageHeartRate, v))
}

// AverageHeartRateGTE applies the GTE predicate on the "average_heart_rate" field.
func AverageHeartRateGTE(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGTE(FieldAverageHeartRate, v))
}

// AverageHeartRateLT applies the LT predicate on the "average_heart_rate" field.
func AverageHeartRateLT(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLT(FieldAverageHeartRate, v))
}

// AverageHeartRateLTE applies the LTE predicate on the "average_heart_rate" field.
func AverageHeartRateLTE(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLTE(FieldAverageHeartRate, v))
}

// AverageHeartRateContains applies the Contains predicate on the "average_heart_rate" field.
func AverageHeartRateContains(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldContains(FieldAverageHeartRate, v))
}

// AverageHeartRateHasPrefix applies the HasPrefix predicate on the "average_heart_rate" field.
func AverageHeartRateHasPrefix(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldHasPrefix(FieldAverageHeartRate, v))
}

// AverageHeartRateHasSuffix applies the HasSuffix predicate on the "average_heart_rate" field.
func AverageHeartRateHasSuffix(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldHasSuffix(FieldAverageHeartRate, v))
}

// AverageHeartRateIsNil applies the IsNil predicate on the "average_heart_rate" field.
func AverageHeartRateIsNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIsNull(FieldAverageHeartRate))
}

// AverageHeartRateNotNil applies the NotNil predicate on the "average_heart_rate" field.
func AverageHeartRateNotNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotNull(FieldAverageHeartRate))
}

// AverageHeartRateEqualFold applies the EqualFold predicate on the "average_heart_rate" field.
func AverageHeartRateEqualFold(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEqualFold(FieldAverageHeartRate, v))
}

// AverageHeartRateContainsFold applies the ContainsFold predicate on the "average_heart_rate" field.
func AverageHeartRateContainsFold(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldContainsFold(FieldAverageHeartRate, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldHasSuffix(FieldSource, v))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldContainsFold(FieldSource, v))
}

// LocationTypeEQ applies the EQ predicate on the "location_type" field.
func LocationTypeEQ(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEQ(FieldLocationType, v))
}

// LocationTypeNEQ applies the NEQ predicate on the "location_type" field.
func LocationTypeNEQ(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNEQ(FieldLocationType, v))
}

// LocationTypeIn applies the In predicate on the "location_type" field.
func LocationTypeIn(vs ...string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIn(FieldLocationType, vs...))
}

// LocationTypeNotIn applies the NotIn predicate on the "location_type" field.
func LocationTypeNotIn(vs ...string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotIn(FieldLocationType, vs...))
}

// LocationTypeGT applies the GT predicate on the "location_type" field.
func LocationTypeGT(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGT(FieldLocationType, v))
}

// LocationTypeGTE applies the GTE predicate on the "location_type" field.
func LocationTypeGTE(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldGTE(FieldLocationType, v))
}

// LocationTypeLT applies the LT predicate on the "location_type" field.
func LocationTypeLT(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLT(FieldLocationType, v))
}

// LocationTypeLTE applies the LTE predicate on the "location_type" field.
func LocationTypeLTE(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldLTE(FieldLocationType, v))
}

// LocationTypeContains applies the Contains predicate on the "location_type" field.
func LocationTypeContains(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldContains(FieldLocationType, v))
}

// LocationTypeHasPrefix applies the HasPrefix predicate on the "location_type" field.
func LocationTypeHasPrefix(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldHasPrefix(FieldLocationType, v))
}

// LocationTypeHasSuffix applies the HasSuffix predicate on the "location_type" field.
func LocationTypeHasSuffix(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldHasSuffix(FieldLocationType, v))
}

// LocationTypeEqualFold applies the EqualFold predicate on the "location_type" field.
func LocationTypeEqualFold(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldEqualFold(FieldLocationType, v))
}

// LocationTypeContainsFold applies the ContainsFold predicate on the "location_type" field.
func LocationTypeContainsFold(v string) predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldContainsFold(FieldLocationType, v))
}

// WeatherIsNil applies the IsNil predicate on the "weather" field.
func WeatherIsNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldIsNull(FieldWeather))
}

// WeatherNotNil applies the NotNil predicate on the "weather" field.
func WeatherNotNil() predicate.WorkoutData {
	return predicate.WorkoutData(sql.FieldNotNull(FieldWeather))
}

// HasWorkout applies the HasEdge predicate on the "workout" edge.
func HasWorkout() predicate.WorkoutData {
	return predicate.WorkoutData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, WorkoutTable, WorkoutColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkoutWith applies the HasEdge predicate on the "workout" edge with a given conditions (other predicates).
func HasWorkoutWith(preds ...predicate.Workout) predicate.WorkoutData {
	return predicate.WorkoutData(func(s *sql.Selector) {
		step := newWorkoutStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.WorkoutData {
	return predicate.WorkoutData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.WorkoutData {
	return predicate.WorkoutData(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkoutRouteData applies the HasEdge predicate on the "workout_route_data" edge.
func HasWorkoutRouteData() predicate.WorkoutData {
	return predicate.WorkoutData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, WorkoutRouteDataTable, WorkoutRouteDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkoutRouteDataWith applies the HasEdge predicate on the "workout_route_data" edge with a given conditions (other predicates).
func HasWorkoutRouteDataWith(preds ...predicate.WorkoutRouteData) predicate.WorkoutData {
	return predicate.WorkoutData(func(s *sql.Selector) {
		step := newWorkoutRouteDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompetition applies the HasEdge predicate on the "competition" edge.
func HasCompetition() predicate.WorkoutData {
	return predicate.WorkoutData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CompetitionTable, CompetitionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompetitionWith applies the HasEdge predicate on the "competition" edge with a given conditions (other predicates).
func HasCompetitionWith(preds ...predicate.Competition) predicate.WorkoutData {
	return predicate.WorkoutData(func(s *sql.Selector) {
		step := newCompetitionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkoutData) predicate.WorkoutData {
	return predicate.WorkoutData(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkoutData) predicate.WorkoutData {
	return predicate.WorkoutData(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkoutData) predicate.WorkoutData {
	return predicate.WorkoutData(sql.NotPredicates(p))
}
