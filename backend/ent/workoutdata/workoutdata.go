// Code generated by ent, DO NOT EDIT.

package workoutdata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the workoutdata type in the database.
	Label = "workout_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldHealthkitWorkoutID holds the string denoting the healthkit_workout_id field in the database.
	FieldHealthkitWorkoutID = "healthkit_workout_id"
	// FieldHealthkitWorkoutStartDate holds the string denoting the healthkit_workout_start_date field in the database.
	FieldHealthkitWorkoutStartDate = "healthkit_workout_start_date"
	// FieldHealthkitWorkoutEndDate holds the string denoting the healthkit_workout_end_date field in the database.
	FieldHealthkitWorkoutEndDate = "healthkit_workout_end_date"
	// FieldDistance holds the string denoting the distance field in the database.
	FieldDistance = "distance"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldEnergyBurned holds the string denoting the energy_burned field in the database.
	FieldEnergyBurned = "energy_burned"
	// FieldAverageHeartRate holds the string denoting the average_heart_rate field in the database.
	FieldAverageHeartRate = "average_heart_rate"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldLocationType holds the string denoting the location_type field in the database.
	FieldLocationType = "location_type"
	// FieldWeather holds the string denoting the weather field in the database.
	FieldWeather = "weather"
	// EdgeWorkout holds the string denoting the workout edge name in mutations.
	EdgeWorkout = "workout"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// EdgeWorkoutRouteData holds the string denoting the workout_route_data edge name in mutations.
	EdgeWorkoutRouteData = "workout_route_data"
	// EdgeCompetition holds the string denoting the competition edge name in mutations.
	EdgeCompetition = "competition"
	// Table holds the table name of the workoutdata in the database.
	Table = "workout_data"
	// WorkoutTable is the table that holds the workout relation/edge.
	WorkoutTable = "workout_data"
	// WorkoutInverseTable is the table name for the Workout entity.
	// It exists in this package in order to avoid circular dependency with the "workout" package.
	WorkoutInverseTable = "workouts"
	// WorkoutColumn is the table column denoting the workout relation/edge.
	WorkoutColumn = "workout_data_workout"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "workout_data"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "workout_data_profile"
	// WorkoutRouteDataTable is the table that holds the workout_route_data relation/edge.
	WorkoutRouteDataTable = "workout_route_data"
	// WorkoutRouteDataInverseTable is the table name for the WorkoutRouteData entity.
	// It exists in this package in order to avoid circular dependency with the "workoutroutedata" package.
	WorkoutRouteDataInverseTable = "workout_route_data"
	// WorkoutRouteDataColumn is the table column denoting the workout_route_data relation/edge.
	WorkoutRouteDataColumn = "workout_data_workout_route_data"
	// CompetitionTable is the table that holds the competition relation/edge.
	CompetitionTable = "workout_data"
	// CompetitionInverseTable is the table name for the Competition entity.
	// It exists in this package in order to avoid circular dependency with the "competition" package.
	CompetitionInverseTable = "competitions"
	// CompetitionColumn is the table column denoting the competition relation/edge.
	CompetitionColumn = "workout_data_competition"
)

// Columns holds all SQL columns for workoutdata fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldHealthkitWorkoutID,
	FieldHealthkitWorkoutStartDate,
	FieldHealthkitWorkoutEndDate,
	FieldDistance,
	FieldDuration,
	FieldEnergyBurned,
	FieldAverageHeartRate,
	FieldSource,
	FieldLocationType,
	FieldWeather,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workout_data"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"workout_data_workout",
	"workout_data_profile",
	"workout_data_competition",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultHealthkitWorkoutStartDate holds the default value on creation for the "healthkit_workout_start_date" field.
	DefaultHealthkitWorkoutStartDate func() time.Time
	// DefaultHealthkitWorkoutEndDate holds the default value on creation for the "healthkit_workout_end_date" field.
	DefaultHealthkitWorkoutEndDate func() time.Time
	// DefaultSource holds the default value on creation for the "source" field.
	DefaultSource string
	// SourceValidator is a validator for the "source" field. It is called by the builders before save.
	SourceValidator func(string) error
	// DefaultLocationType holds the default value on creation for the "location_type" field.
	DefaultLocationType string
	// LocationTypeValidator is a validator for the "location_type" field. It is called by the builders before save.
	LocationTypeValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the WorkoutData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByHealthkitWorkoutID orders the results by the healthkit_workout_id field.
func ByHealthkitWorkoutID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHealthkitWorkoutID, opts...).ToFunc()
}

// ByHealthkitWorkoutStartDate orders the results by the healthkit_workout_start_date field.
func ByHealthkitWorkoutStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHealthkitWorkoutStartDate, opts...).ToFunc()
}

// ByHealthkitWorkoutEndDate orders the results by the healthkit_workout_end_date field.
func ByHealthkitWorkoutEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHealthkitWorkoutEndDate, opts...).ToFunc()
}

// ByDistance orders the results by the distance field.
func ByDistance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistance, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByEnergyBurned orders the results by the energy_burned field.
func ByEnergyBurned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnergyBurned, opts...).ToFunc()
}

// ByAverageHeartRate orders the results by the average_heart_rate field.
func ByAverageHeartRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAverageHeartRate, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByLocationType orders the results by the location_type field.
func ByLocationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocationType, opts...).ToFunc()
}

// ByWorkoutField orders the results by workout field.
func ByWorkoutField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkoutStep(), sql.OrderByField(field, opts...))
	}
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkoutRouteDataField orders the results by workout_route_data field.
func ByWorkoutRouteDataField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkoutRouteDataStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompetitionField orders the results by competition field.
func ByCompetitionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompetitionStep(), sql.OrderByField(field, opts...))
	}
}
func newWorkoutStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkoutInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, WorkoutTable, WorkoutColumn),
	)
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProfileTable, ProfileColumn),
	)
}
func newWorkoutRouteDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkoutRouteDataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, WorkoutRouteDataTable, WorkoutRouteDataColumn),
	)
}
func newCompetitionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompetitionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CompetitionTable, CompetitionColumn),
	)
}
