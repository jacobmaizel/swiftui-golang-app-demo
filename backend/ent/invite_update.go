// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competition"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/invite"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/predicate"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/squad"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workout"
)

// InviteUpdate is the builder for updating Invite entities.
type InviteUpdate struct {
	config
	hooks     []Hook
	mutation  *InviteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InviteUpdate builder.
func (iu *InviteUpdate) Where(ps ...predicate.Invite) *InviteUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InviteUpdate) SetUpdatedAt(t time.Time) *InviteUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetStatus sets the "status" field.
func (iu *InviteUpdate) SetStatus(s string) *InviteUpdate {
	iu.mutation.SetStatus(s)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *InviteUpdate) SetNillableStatus(s *string) *InviteUpdate {
	if s != nil {
		iu.SetStatus(*s)
	}
	return iu
}

// SetSenderID sets the "sender" edge to the Profile entity by ID.
func (iu *InviteUpdate) SetSenderID(id uuid.UUID) *InviteUpdate {
	iu.mutation.SetSenderID(id)
	return iu
}

// SetSender sets the "sender" edge to the Profile entity.
func (iu *InviteUpdate) SetSender(p *Profile) *InviteUpdate {
	return iu.SetSenderID(p.ID)
}

// SetReceiverID sets the "receiver" edge to the Profile entity by ID.
func (iu *InviteUpdate) SetReceiverID(id uuid.UUID) *InviteUpdate {
	iu.mutation.SetReceiverID(id)
	return iu
}

// SetReceiver sets the "receiver" edge to the Profile entity.
func (iu *InviteUpdate) SetReceiver(p *Profile) *InviteUpdate {
	return iu.SetReceiverID(p.ID)
}

// SetSquadID sets the "squad" edge to the Squad entity by ID.
func (iu *InviteUpdate) SetSquadID(id uuid.UUID) *InviteUpdate {
	iu.mutation.SetSquadID(id)
	return iu
}

// SetNillableSquadID sets the "squad" edge to the Squad entity by ID if the given value is not nil.
func (iu *InviteUpdate) SetNillableSquadID(id *uuid.UUID) *InviteUpdate {
	if id != nil {
		iu = iu.SetSquadID(*id)
	}
	return iu
}

// SetSquad sets the "squad" edge to the Squad entity.
func (iu *InviteUpdate) SetSquad(s *Squad) *InviteUpdate {
	return iu.SetSquadID(s.ID)
}

// SetCompetitionID sets the "competition" edge to the Competition entity by ID.
func (iu *InviteUpdate) SetCompetitionID(id uuid.UUID) *InviteUpdate {
	iu.mutation.SetCompetitionID(id)
	return iu
}

// SetNillableCompetitionID sets the "competition" edge to the Competition entity by ID if the given value is not nil.
func (iu *InviteUpdate) SetNillableCompetitionID(id *uuid.UUID) *InviteUpdate {
	if id != nil {
		iu = iu.SetCompetitionID(*id)
	}
	return iu
}

// SetCompetition sets the "competition" edge to the Competition entity.
func (iu *InviteUpdate) SetCompetition(c *Competition) *InviteUpdate {
	return iu.SetCompetitionID(c.ID)
}

// SetWorkoutID sets the "workout" edge to the Workout entity by ID.
func (iu *InviteUpdate) SetWorkoutID(id uuid.UUID) *InviteUpdate {
	iu.mutation.SetWorkoutID(id)
	return iu
}

// SetNillableWorkoutID sets the "workout" edge to the Workout entity by ID if the given value is not nil.
func (iu *InviteUpdate) SetNillableWorkoutID(id *uuid.UUID) *InviteUpdate {
	if id != nil {
		iu = iu.SetWorkoutID(*id)
	}
	return iu
}

// SetWorkout sets the "workout" edge to the Workout entity.
func (iu *InviteUpdate) SetWorkout(w *Workout) *InviteUpdate {
	return iu.SetWorkoutID(w.ID)
}

// Mutation returns the InviteMutation object of the builder.
func (iu *InviteUpdate) Mutation() *InviteMutation {
	return iu.mutation
}

// ClearSender clears the "sender" edge to the Profile entity.
func (iu *InviteUpdate) ClearSender() *InviteUpdate {
	iu.mutation.ClearSender()
	return iu
}

// ClearReceiver clears the "receiver" edge to the Profile entity.
func (iu *InviteUpdate) ClearReceiver() *InviteUpdate {
	iu.mutation.ClearReceiver()
	return iu
}

// ClearSquad clears the "squad" edge to the Squad entity.
func (iu *InviteUpdate) ClearSquad() *InviteUpdate {
	iu.mutation.ClearSquad()
	return iu
}

// ClearCompetition clears the "competition" edge to the Competition entity.
func (iu *InviteUpdate) ClearCompetition() *InviteUpdate {
	iu.mutation.ClearCompetition()
	return iu
}

// ClearWorkout clears the "workout" edge to the Workout entity.
func (iu *InviteUpdate) ClearWorkout() *InviteUpdate {
	iu.mutation.ClearWorkout()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InviteUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InviteUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InviteUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InviteUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InviteUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := invite.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InviteUpdate) check() error {
	if _, ok := iu.mutation.SenderID(); iu.mutation.SenderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invite.sender"`)
	}
	if _, ok := iu.mutation.ReceiverID(); iu.mutation.ReceiverCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invite.receiver"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iu *InviteUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InviteUpdate {
	iu.modifiers = append(iu.modifiers, modifiers...)
	return iu
}

func (iu *InviteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invite.Table, invite.Columns, sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(invite.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(invite.FieldStatus, field.TypeString, value)
	}
	if iu.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.SenderTable,
			Columns: []string{invite.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.SenderTable,
			Columns: []string{invite.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.ReceiverTable,
			Columns: []string{invite.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.ReceiverTable,
			Columns: []string{invite.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.SquadTable,
			Columns: []string{invite.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.SquadTable,
			Columns: []string{invite.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.CompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.CompetitionTable,
			Columns: []string{invite.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.CompetitionTable,
			Columns: []string{invite.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.WorkoutCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.WorkoutTable,
			Columns: []string{invite.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.WorkoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.WorkoutTable,
			Columns: []string{invite.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InviteUpdateOne is the builder for updating a single Invite entity.
type InviteUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InviteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InviteUpdateOne) SetUpdatedAt(t time.Time) *InviteUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *InviteUpdateOne) SetStatus(s string) *InviteUpdateOne {
	iuo.mutation.SetStatus(s)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *InviteUpdateOne) SetNillableStatus(s *string) *InviteUpdateOne {
	if s != nil {
		iuo.SetStatus(*s)
	}
	return iuo
}

// SetSenderID sets the "sender" edge to the Profile entity by ID.
func (iuo *InviteUpdateOne) SetSenderID(id uuid.UUID) *InviteUpdateOne {
	iuo.mutation.SetSenderID(id)
	return iuo
}

// SetSender sets the "sender" edge to the Profile entity.
func (iuo *InviteUpdateOne) SetSender(p *Profile) *InviteUpdateOne {
	return iuo.SetSenderID(p.ID)
}

// SetReceiverID sets the "receiver" edge to the Profile entity by ID.
func (iuo *InviteUpdateOne) SetReceiverID(id uuid.UUID) *InviteUpdateOne {
	iuo.mutation.SetReceiverID(id)
	return iuo
}

// SetReceiver sets the "receiver" edge to the Profile entity.
func (iuo *InviteUpdateOne) SetReceiver(p *Profile) *InviteUpdateOne {
	return iuo.SetReceiverID(p.ID)
}

// SetSquadID sets the "squad" edge to the Squad entity by ID.
func (iuo *InviteUpdateOne) SetSquadID(id uuid.UUID) *InviteUpdateOne {
	iuo.mutation.SetSquadID(id)
	return iuo
}

// SetNillableSquadID sets the "squad" edge to the Squad entity by ID if the given value is not nil.
func (iuo *InviteUpdateOne) SetNillableSquadID(id *uuid.UUID) *InviteUpdateOne {
	if id != nil {
		iuo = iuo.SetSquadID(*id)
	}
	return iuo
}

// SetSquad sets the "squad" edge to the Squad entity.
func (iuo *InviteUpdateOne) SetSquad(s *Squad) *InviteUpdateOne {
	return iuo.SetSquadID(s.ID)
}

// SetCompetitionID sets the "competition" edge to the Competition entity by ID.
func (iuo *InviteUpdateOne) SetCompetitionID(id uuid.UUID) *InviteUpdateOne {
	iuo.mutation.SetCompetitionID(id)
	return iuo
}

// SetNillableCompetitionID sets the "competition" edge to the Competition entity by ID if the given value is not nil.
func (iuo *InviteUpdateOne) SetNillableCompetitionID(id *uuid.UUID) *InviteUpdateOne {
	if id != nil {
		iuo = iuo.SetCompetitionID(*id)
	}
	return iuo
}

// SetCompetition sets the "competition" edge to the Competition entity.
func (iuo *InviteUpdateOne) SetCompetition(c *Competition) *InviteUpdateOne {
	return iuo.SetCompetitionID(c.ID)
}

// SetWorkoutID sets the "workout" edge to the Workout entity by ID.
func (iuo *InviteUpdateOne) SetWorkoutID(id uuid.UUID) *InviteUpdateOne {
	iuo.mutation.SetWorkoutID(id)
	return iuo
}

// SetNillableWorkoutID sets the "workout" edge to the Workout entity by ID if the given value is not nil.
func (iuo *InviteUpdateOne) SetNillableWorkoutID(id *uuid.UUID) *InviteUpdateOne {
	if id != nil {
		iuo = iuo.SetWorkoutID(*id)
	}
	return iuo
}

// SetWorkout sets the "workout" edge to the Workout entity.
func (iuo *InviteUpdateOne) SetWorkout(w *Workout) *InviteUpdateOne {
	return iuo.SetWorkoutID(w.ID)
}

// Mutation returns the InviteMutation object of the builder.
func (iuo *InviteUpdateOne) Mutation() *InviteMutation {
	return iuo.mutation
}

// ClearSender clears the "sender" edge to the Profile entity.
func (iuo *InviteUpdateOne) ClearSender() *InviteUpdateOne {
	iuo.mutation.ClearSender()
	return iuo
}

// ClearReceiver clears the "receiver" edge to the Profile entity.
func (iuo *InviteUpdateOne) ClearReceiver() *InviteUpdateOne {
	iuo.mutation.ClearReceiver()
	return iuo
}

// ClearSquad clears the "squad" edge to the Squad entity.
func (iuo *InviteUpdateOne) ClearSquad() *InviteUpdateOne {
	iuo.mutation.ClearSquad()
	return iuo
}

// ClearCompetition clears the "competition" edge to the Competition entity.
func (iuo *InviteUpdateOne) ClearCompetition() *InviteUpdateOne {
	iuo.mutation.ClearCompetition()
	return iuo
}

// ClearWorkout clears the "workout" edge to the Workout entity.
func (iuo *InviteUpdateOne) ClearWorkout() *InviteUpdateOne {
	iuo.mutation.ClearWorkout()
	return iuo
}

// Where appends a list predicates to the InviteUpdate builder.
func (iuo *InviteUpdateOne) Where(ps ...predicate.Invite) *InviteUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InviteUpdateOne) Select(field string, fields ...string) *InviteUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Invite entity.
func (iuo *InviteUpdateOne) Save(ctx context.Context) (*Invite, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InviteUpdateOne) SaveX(ctx context.Context) *Invite {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InviteUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InviteUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InviteUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := invite.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InviteUpdateOne) check() error {
	if _, ok := iuo.mutation.SenderID(); iuo.mutation.SenderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invite.sender"`)
	}
	if _, ok := iuo.mutation.ReceiverID(); iuo.mutation.ReceiverCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invite.receiver"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iuo *InviteUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InviteUpdateOne {
	iuo.modifiers = append(iuo.modifiers, modifiers...)
	return iuo
}

func (iuo *InviteUpdateOne) sqlSave(ctx context.Context) (_node *Invite, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invite.Table, invite.Columns, sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invite.FieldID)
		for _, f := range fields {
			if !invite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(invite.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(invite.FieldStatus, field.TypeString, value)
	}
	if iuo.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.SenderTable,
			Columns: []string{invite.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.SenderTable,
			Columns: []string{invite.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.ReceiverTable,
			Columns: []string{invite.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.ReceiverTable,
			Columns: []string{invite.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.SquadTable,
			Columns: []string{invite.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.SquadTable,
			Columns: []string{invite.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.CompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.CompetitionTable,
			Columns: []string{invite.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.CompetitionTable,
			Columns: []string{invite.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.WorkoutCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.WorkoutTable,
			Columns: []string{invite.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.WorkoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invite.WorkoutTable,
			Columns: []string{invite.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iuo.modifiers...)
	_node = &Invite{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
