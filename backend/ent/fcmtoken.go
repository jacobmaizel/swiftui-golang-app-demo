// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/fcmtoken"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
)

// FcmToken is the model entity for the FcmToken schema.
type FcmToken struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FcmTokenQuery when eager-loading is set.
	Edges              FcmTokenEdges `json:"related"`
	profile_fcm_tokens *uuid.UUID
	selectValues       sql.SelectValues
}

// FcmTokenEdges holds the relations/edges for other nodes in the graph.
type FcmTokenEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FcmTokenEdges) ProfileOrErr() (*Profile, error) {
	if e.loadedTypes[0] {
		if e.Profile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FcmToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fcmtoken.FieldToken:
			values[i] = new(sql.NullString)
		case fcmtoken.FieldCreatedAt, fcmtoken.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case fcmtoken.FieldID:
			values[i] = new(uuid.UUID)
		case fcmtoken.ForeignKeys[0]: // profile_fcm_tokens
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FcmToken fields.
func (ft *FcmToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fcmtoken.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ft.ID = *value
			}
		case fcmtoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ft.CreatedAt = value.Time
			}
		case fcmtoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ft.UpdatedAt = value.Time
			}
		case fcmtoken.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				ft.Token = value.String
			}
		case fcmtoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field profile_fcm_tokens", values[i])
			} else if value.Valid {
				ft.profile_fcm_tokens = new(uuid.UUID)
				*ft.profile_fcm_tokens = *value.S.(*uuid.UUID)
			}
		default:
			ft.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FcmToken.
// This includes values selected through modifiers, order, etc.
func (ft *FcmToken) Value(name string) (ent.Value, error) {
	return ft.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the FcmToken entity.
func (ft *FcmToken) QueryProfile() *ProfileQuery {
	return NewFcmTokenClient(ft.config).QueryProfile(ft)
}

// Update returns a builder for updating this FcmToken.
// Note that you need to call FcmToken.Unwrap() before calling this method if this FcmToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (ft *FcmToken) Update() *FcmTokenUpdateOne {
	return NewFcmTokenClient(ft.config).UpdateOne(ft)
}

// Unwrap unwraps the FcmToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ft *FcmToken) Unwrap() *FcmToken {
	_tx, ok := ft.config.driver.(*txDriver)
	if !ok {
		panic("ent: FcmToken is not a transactional entity")
	}
	ft.config.driver = _tx.drv
	return ft
}

// String implements the fmt.Stringer.
func (ft *FcmToken) String() string {
	var builder strings.Builder
	builder.WriteString("FcmToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ft.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ft.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ft.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(ft.Token)
	builder.WriteByte(')')
	return builder.String()
}

// FcmTokens is a parsable slice of FcmToken.
type FcmTokens []*FcmToken
