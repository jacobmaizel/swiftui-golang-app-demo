// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/fcmtoken"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
)

// FcmTokenCreate is the builder for creating a FcmToken entity.
type FcmTokenCreate struct {
	config
	mutation *FcmTokenMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ftc *FcmTokenCreate) SetCreatedAt(t time.Time) *FcmTokenCreate {
	ftc.mutation.SetCreatedAt(t)
	return ftc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ftc *FcmTokenCreate) SetNillableCreatedAt(t *time.Time) *FcmTokenCreate {
	if t != nil {
		ftc.SetCreatedAt(*t)
	}
	return ftc
}

// SetUpdatedAt sets the "updated_at" field.
func (ftc *FcmTokenCreate) SetUpdatedAt(t time.Time) *FcmTokenCreate {
	ftc.mutation.SetUpdatedAt(t)
	return ftc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ftc *FcmTokenCreate) SetNillableUpdatedAt(t *time.Time) *FcmTokenCreate {
	if t != nil {
		ftc.SetUpdatedAt(*t)
	}
	return ftc
}

// SetToken sets the "token" field.
func (ftc *FcmTokenCreate) SetToken(s string) *FcmTokenCreate {
	ftc.mutation.SetToken(s)
	return ftc
}

// SetID sets the "id" field.
func (ftc *FcmTokenCreate) SetID(u uuid.UUID) *FcmTokenCreate {
	ftc.mutation.SetID(u)
	return ftc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ftc *FcmTokenCreate) SetNillableID(u *uuid.UUID) *FcmTokenCreate {
	if u != nil {
		ftc.SetID(*u)
	}
	return ftc
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (ftc *FcmTokenCreate) SetProfileID(id uuid.UUID) *FcmTokenCreate {
	ftc.mutation.SetProfileID(id)
	return ftc
}

// SetProfile sets the "profile" edge to the Profile entity.
func (ftc *FcmTokenCreate) SetProfile(p *Profile) *FcmTokenCreate {
	return ftc.SetProfileID(p.ID)
}

// Mutation returns the FcmTokenMutation object of the builder.
func (ftc *FcmTokenCreate) Mutation() *FcmTokenMutation {
	return ftc.mutation
}

// Save creates the FcmToken in the database.
func (ftc *FcmTokenCreate) Save(ctx context.Context) (*FcmToken, error) {
	ftc.defaults()
	return withHooks(ctx, ftc.sqlSave, ftc.mutation, ftc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ftc *FcmTokenCreate) SaveX(ctx context.Context) *FcmToken {
	v, err := ftc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ftc *FcmTokenCreate) Exec(ctx context.Context) error {
	_, err := ftc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftc *FcmTokenCreate) ExecX(ctx context.Context) {
	if err := ftc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ftc *FcmTokenCreate) defaults() {
	if _, ok := ftc.mutation.CreatedAt(); !ok {
		v := fcmtoken.DefaultCreatedAt()
		ftc.mutation.SetCreatedAt(v)
	}
	if _, ok := ftc.mutation.UpdatedAt(); !ok {
		v := fcmtoken.DefaultUpdatedAt()
		ftc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ftc.mutation.ID(); !ok {
		v := fcmtoken.DefaultID()
		ftc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftc *FcmTokenCreate) check() error {
	if _, ok := ftc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FcmToken.created_at"`)}
	}
	if _, ok := ftc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FcmToken.updated_at"`)}
	}
	if _, ok := ftc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "FcmToken.token"`)}
	}
	if _, ok := ftc.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "profile", err: errors.New(`ent: missing required edge "FcmToken.profile"`)}
	}
	return nil
}

func (ftc *FcmTokenCreate) sqlSave(ctx context.Context) (*FcmToken, error) {
	if err := ftc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ftc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ftc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ftc.mutation.id = &_node.ID
	ftc.mutation.done = true
	return _node, nil
}

func (ftc *FcmTokenCreate) createSpec() (*FcmToken, *sqlgraph.CreateSpec) {
	var (
		_node = &FcmToken{config: ftc.config}
		_spec = sqlgraph.NewCreateSpec(fcmtoken.Table, sqlgraph.NewFieldSpec(fcmtoken.FieldID, field.TypeUUID))
	)
	if id, ok := ftc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ftc.mutation.CreatedAt(); ok {
		_spec.SetField(fcmtoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ftc.mutation.UpdatedAt(); ok {
		_spec.SetField(fcmtoken.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ftc.mutation.Token(); ok {
		_spec.SetField(fcmtoken.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if nodes := ftc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fcmtoken.ProfileTable,
			Columns: []string{fcmtoken.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.profile_fcm_tokens = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FcmTokenCreateBulk is the builder for creating many FcmToken entities in bulk.
type FcmTokenCreateBulk struct {
	config
	builders []*FcmTokenCreate
}

// Save creates the FcmToken entities in the database.
func (ftcb *FcmTokenCreateBulk) Save(ctx context.Context) ([]*FcmToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ftcb.builders))
	nodes := make([]*FcmToken, len(ftcb.builders))
	mutators := make([]Mutator, len(ftcb.builders))
	for i := range ftcb.builders {
		func(i int, root context.Context) {
			builder := ftcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FcmTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ftcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ftcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ftcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ftcb *FcmTokenCreateBulk) SaveX(ctx context.Context) []*FcmToken {
	v, err := ftcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ftcb *FcmTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := ftcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftcb *FcmTokenCreateBulk) ExecX(ctx context.Context) {
	if err := ftcb.Exec(ctx); err != nil {
		panic(err)
	}
}
