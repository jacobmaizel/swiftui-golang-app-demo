// Code generated by ent, DO NOT EDIT.

package competition

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the competition type in the database.
	Label = "competition"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPublic holds the string denoting the public field in the database.
	FieldPublic = "public"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldEnd holds the string denoting the end field in the database.
	FieldEnd = "end"
	// FieldScheduled holds the string denoting the scheduled field in the database.
	FieldScheduled = "scheduled"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldParticipantTypes holds the string denoting the participant_types field in the database.
	FieldParticipantTypes = "participant_types"
	// FieldWorkoutTypes holds the string denoting the workout_types field in the database.
	FieldWorkoutTypes = "workout_types"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeParticipants holds the string denoting the participants edge name in mutations.
	EdgeParticipants = "participants"
	// EdgeWorkouts holds the string denoting the workouts edge name in mutations.
	EdgeWorkouts = "workouts"
	// EdgeWorkoutData holds the string denoting the workout_data edge name in mutations.
	EdgeWorkoutData = "workout_data"
	// EdgeResults holds the string denoting the results edge name in mutations.
	EdgeResults = "results"
	// Table holds the table name of the competition in the database.
	Table = "competitions"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "competitions"
	// OwnerInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	OwnerInverseTable = "profiles"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "competition_owner"
	// ParticipantsTable is the table that holds the participants relation/edge. The primary key declared below.
	ParticipantsTable = "competition_participants"
	// ParticipantsInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ParticipantsInverseTable = "profiles"
	// WorkoutsTable is the table that holds the workouts relation/edge.
	WorkoutsTable = "workouts"
	// WorkoutsInverseTable is the table name for the Workout entity.
	// It exists in this package in order to avoid circular dependency with the "workout" package.
	WorkoutsInverseTable = "workouts"
	// WorkoutsColumn is the table column denoting the workouts relation/edge.
	WorkoutsColumn = "workout_competition"
	// WorkoutDataTable is the table that holds the workout_data relation/edge.
	WorkoutDataTable = "workout_data"
	// WorkoutDataInverseTable is the table name for the WorkoutData entity.
	// It exists in this package in order to avoid circular dependency with the "workoutdata" package.
	WorkoutDataInverseTable = "workout_data"
	// WorkoutDataColumn is the table column denoting the workout_data relation/edge.
	WorkoutDataColumn = "workout_data_competition"
	// ResultsTable is the table that holds the results relation/edge.
	ResultsTable = "competition_results"
	// ResultsInverseTable is the table name for the CompetitionResult entity.
	// It exists in this package in order to avoid circular dependency with the "competitionresult" package.
	ResultsInverseTable = "competition_results"
	// ResultsColumn is the table column denoting the results relation/edge.
	ResultsColumn = "competition_result_competition"
)

// Columns holds all SQL columns for competition fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPublic,
	FieldTitle,
	FieldDescription,
	FieldStart,
	FieldEnd,
	FieldScheduled,
	FieldStatus,
	FieldParticipantTypes,
	FieldWorkoutTypes,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "competitions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"competition_owner",
}

var (
	// ParticipantsPrimaryKey and ParticipantsColumn2 are the table columns denoting the
	// primary key for the participants relation (M2M).
	ParticipantsPrimaryKey = []string{"competition_id", "profile_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/jacobmaizel/swiftui-golang-app-demo/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultPublic holds the default value on creation for the "public" field.
	DefaultPublic bool
	// DefaultScheduled holds the default value on creation for the "scheduled" field.
	DefaultScheduled bool
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Competition queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPublic orders the results by the public field.
func ByPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublic, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStart orders the results by the start field.
func ByStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStart, opts...).ToFunc()
}

// ByEnd orders the results by the end field.
func ByEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnd, opts...).ToFunc()
}

// ByScheduled orders the results by the scheduled field.
func ByScheduled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduled, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByParticipantsCount orders the results by participants count.
func ByParticipantsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParticipantsStep(), opts...)
	}
}

// ByParticipants orders the results by participants terms.
func ByParticipants(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParticipantsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkoutsCount orders the results by workouts count.
func ByWorkoutsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkoutsStep(), opts...)
	}
}

// ByWorkouts orders the results by workouts terms.
func ByWorkouts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkoutsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkoutDataCount orders the results by workout_data count.
func ByWorkoutDataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkoutDataStep(), opts...)
	}
}

// ByWorkoutData orders the results by workout_data terms.
func ByWorkoutData(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkoutDataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByResultsCount orders the results by results count.
func ByResultsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResultsStep(), opts...)
	}
}

// ByResults orders the results by results terms.
func ByResults(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResultsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OwnerTable, OwnerColumn),
	)
}
func newParticipantsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParticipantsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ParticipantsTable, ParticipantsPrimaryKey...),
	)
}
func newWorkoutsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkoutsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, WorkoutsTable, WorkoutsColumn),
	)
}
func newWorkoutDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkoutDataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, WorkoutDataTable, WorkoutDataColumn),
	)
}
func newResultsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResultsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ResultsTable, ResultsColumn),
	)
}
