// Code generated by ent, DO NOT EDIT.

package goal

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Goal {
	return predicate.Goal(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Goal {
	return predicate.Goal(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Goal {
	return predicate.Goal(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Goal {
	return predicate.Goal(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Goal {
	return predicate.Goal(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Goal {
	return predicate.Goal(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Goal {
	return predicate.Goal(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldUpdatedAt, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldType, v))
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldStart, v))
}

// End applies equality check predicate on the "end" field. It's identical to EndEQ.
func End(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldEnd, v))
}

// HealthkitWorkoutActivityType applies equality check predicate on the "healthkit_workout_activity_type" field. It's identical to HealthkitWorkoutActivityTypeEQ.
func HealthkitWorkoutActivityType(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldHealthkitWorkoutActivityType, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldAction, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldValue, v))
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldUnit, v))
}

// ValueAggregationType applies equality check predicate on the "value_aggregation_type" field. It's identical to ValueAggregationTypeEQ.
func ValueAggregationType(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldValueAggregationType, v))
}

// TimeInterval applies equality check predicate on the "time_interval" field. It's identical to TimeIntervalEQ.
func TimeInterval(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldTimeInterval, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldStatus, v))
}

// CurrentTotalValue applies equality check predicate on the "current_total_value" field. It's identical to CurrentTotalValueEQ.
func CurrentTotalValue(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldCurrentTotalValue, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldLTE(FieldUpdatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContainsFold(FieldType, v))
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldStart, v))
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldNEQ(FieldStart, v))
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldIn(FieldStart, vs...))
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldNotIn(FieldStart, vs...))
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldGT(FieldStart, v))
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldGTE(FieldStart, v))
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldLT(FieldStart, v))
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldLTE(FieldStart, v))
}

// EndEQ applies the EQ predicate on the "end" field.
func EndEQ(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldEnd, v))
}

// EndNEQ applies the NEQ predicate on the "end" field.
func EndNEQ(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldNEQ(FieldEnd, v))
}

// EndIn applies the In predicate on the "end" field.
func EndIn(vs ...time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldIn(FieldEnd, vs...))
}

// EndNotIn applies the NotIn predicate on the "end" field.
func EndNotIn(vs ...time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldNotIn(FieldEnd, vs...))
}

// EndGT applies the GT predicate on the "end" field.
func EndGT(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldGT(FieldEnd, v))
}

// EndGTE applies the GTE predicate on the "end" field.
func EndGTE(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldGTE(FieldEnd, v))
}

// EndLT applies the LT predicate on the "end" field.
func EndLT(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldLT(FieldEnd, v))
}

// EndLTE applies the LTE predicate on the "end" field.
func EndLTE(v time.Time) predicate.Goal {
	return predicate.Goal(sql.FieldLTE(FieldEnd, v))
}

// HealthkitWorkoutActivityTypeEQ applies the EQ predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldHealthkitWorkoutActivityType, v))
}

// HealthkitWorkoutActivityTypeNEQ applies the NEQ predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeNEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldNEQ(FieldHealthkitWorkoutActivityType, v))
}

// HealthkitWorkoutActivityTypeIn applies the In predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldIn(FieldHealthkitWorkoutActivityType, vs...))
}

// HealthkitWorkoutActivityTypeNotIn applies the NotIn predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeNotIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldNotIn(FieldHealthkitWorkoutActivityType, vs...))
}

// HealthkitWorkoutActivityTypeGT applies the GT predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeGT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGT(FieldHealthkitWorkoutActivityType, v))
}

// HealthkitWorkoutActivityTypeGTE applies the GTE predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeGTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGTE(FieldHealthkitWorkoutActivityType, v))
}

// HealthkitWorkoutActivityTypeLT applies the LT predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeLT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLT(FieldHealthkitWorkoutActivityType, v))
}

// HealthkitWorkoutActivityTypeLTE applies the LTE predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeLTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLTE(FieldHealthkitWorkoutActivityType, v))
}

// HealthkitWorkoutActivityTypeContains applies the Contains predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeContains(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContains(FieldHealthkitWorkoutActivityType, v))
}

// HealthkitWorkoutActivityTypeHasPrefix applies the HasPrefix predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeHasPrefix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasPrefix(FieldHealthkitWorkoutActivityType, v))
}

// HealthkitWorkoutActivityTypeHasSuffix applies the HasSuffix predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeHasSuffix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasSuffix(FieldHealthkitWorkoutActivityType, v))
}

// HealthkitWorkoutActivityTypeIsNil applies the IsNil predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeIsNil() predicate.Goal {
	return predicate.Goal(sql.FieldIsNull(FieldHealthkitWorkoutActivityType))
}

// HealthkitWorkoutActivityTypeNotNil applies the NotNil predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeNotNil() predicate.Goal {
	return predicate.Goal(sql.FieldNotNull(FieldHealthkitWorkoutActivityType))
}

// HealthkitWorkoutActivityTypeEqualFold applies the EqualFold predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeEqualFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEqualFold(FieldHealthkitWorkoutActivityType, v))
}

// HealthkitWorkoutActivityTypeContainsFold applies the ContainsFold predicate on the "healthkit_workout_activity_type" field.
func HealthkitWorkoutActivityTypeContainsFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContainsFold(FieldHealthkitWorkoutActivityType, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasSuffix(FieldAction, v))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContainsFold(FieldAction, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContainsFold(FieldValue, v))
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldUnit, v))
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldNEQ(FieldUnit, v))
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldIn(FieldUnit, vs...))
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldNotIn(FieldUnit, vs...))
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGT(FieldUnit, v))
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGTE(FieldUnit, v))
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLT(FieldUnit, v))
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLTE(FieldUnit, v))
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContains(FieldUnit, v))
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasPrefix(FieldUnit, v))
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasSuffix(FieldUnit, v))
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEqualFold(FieldUnit, v))
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContainsFold(FieldUnit, v))
}

// ValueAggregationTypeEQ applies the EQ predicate on the "value_aggregation_type" field.
func ValueAggregationTypeEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldValueAggregationType, v))
}

// ValueAggregationTypeNEQ applies the NEQ predicate on the "value_aggregation_type" field.
func ValueAggregationTypeNEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldNEQ(FieldValueAggregationType, v))
}

// ValueAggregationTypeIn applies the In predicate on the "value_aggregation_type" field.
func ValueAggregationTypeIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldIn(FieldValueAggregationType, vs...))
}

// ValueAggregationTypeNotIn applies the NotIn predicate on the "value_aggregation_type" field.
func ValueAggregationTypeNotIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldNotIn(FieldValueAggregationType, vs...))
}

// ValueAggregationTypeGT applies the GT predicate on the "value_aggregation_type" field.
func ValueAggregationTypeGT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGT(FieldValueAggregationType, v))
}

// ValueAggregationTypeGTE applies the GTE predicate on the "value_aggregation_type" field.
func ValueAggregationTypeGTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGTE(FieldValueAggregationType, v))
}

// ValueAggregationTypeLT applies the LT predicate on the "value_aggregation_type" field.
func ValueAggregationTypeLT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLT(FieldValueAggregationType, v))
}

// ValueAggregationTypeLTE applies the LTE predicate on the "value_aggregation_type" field.
func ValueAggregationTypeLTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLTE(FieldValueAggregationType, v))
}

// ValueAggregationTypeContains applies the Contains predicate on the "value_aggregation_type" field.
func ValueAggregationTypeContains(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContains(FieldValueAggregationType, v))
}

// ValueAggregationTypeHasPrefix applies the HasPrefix predicate on the "value_aggregation_type" field.
func ValueAggregationTypeHasPrefix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasPrefix(FieldValueAggregationType, v))
}

// ValueAggregationTypeHasSuffix applies the HasSuffix predicate on the "value_aggregation_type" field.
func ValueAggregationTypeHasSuffix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasSuffix(FieldValueAggregationType, v))
}

// ValueAggregationTypeEqualFold applies the EqualFold predicate on the "value_aggregation_type" field.
func ValueAggregationTypeEqualFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEqualFold(FieldValueAggregationType, v))
}

// ValueAggregationTypeContainsFold applies the ContainsFold predicate on the "value_aggregation_type" field.
func ValueAggregationTypeContainsFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContainsFold(FieldValueAggregationType, v))
}

// TimeIntervalEQ applies the EQ predicate on the "time_interval" field.
func TimeIntervalEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldTimeInterval, v))
}

// TimeIntervalNEQ applies the NEQ predicate on the "time_interval" field.
func TimeIntervalNEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldNEQ(FieldTimeInterval, v))
}

// TimeIntervalIn applies the In predicate on the "time_interval" field.
func TimeIntervalIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldIn(FieldTimeInterval, vs...))
}

// TimeIntervalNotIn applies the NotIn predicate on the "time_interval" field.
func TimeIntervalNotIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldNotIn(FieldTimeInterval, vs...))
}

// TimeIntervalGT applies the GT predicate on the "time_interval" field.
func TimeIntervalGT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGT(FieldTimeInterval, v))
}

// TimeIntervalGTE applies the GTE predicate on the "time_interval" field.
func TimeIntervalGTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGTE(FieldTimeInterval, v))
}

// TimeIntervalLT applies the LT predicate on the "time_interval" field.
func TimeIntervalLT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLT(FieldTimeInterval, v))
}

// TimeIntervalLTE applies the LTE predicate on the "time_interval" field.
func TimeIntervalLTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLTE(FieldTimeInterval, v))
}

// TimeIntervalContains applies the Contains predicate on the "time_interval" field.
func TimeIntervalContains(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContains(FieldTimeInterval, v))
}

// TimeIntervalHasPrefix applies the HasPrefix predicate on the "time_interval" field.
func TimeIntervalHasPrefix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasPrefix(FieldTimeInterval, v))
}

// TimeIntervalHasSuffix applies the HasSuffix predicate on the "time_interval" field.
func TimeIntervalHasSuffix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasSuffix(FieldTimeInterval, v))
}

// TimeIntervalEqualFold applies the EqualFold predicate on the "time_interval" field.
func TimeIntervalEqualFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEqualFold(FieldTimeInterval, v))
}

// TimeIntervalContainsFold applies the ContainsFold predicate on the "time_interval" field.
func TimeIntervalContainsFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContainsFold(FieldTimeInterval, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContainsFold(FieldStatus, v))
}

// CurrentTotalValueEQ applies the EQ predicate on the "current_total_value" field.
func CurrentTotalValueEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEQ(FieldCurrentTotalValue, v))
}

// CurrentTotalValueNEQ applies the NEQ predicate on the "current_total_value" field.
func CurrentTotalValueNEQ(v string) predicate.Goal {
	return predicate.Goal(sql.FieldNEQ(FieldCurrentTotalValue, v))
}

// CurrentTotalValueIn applies the In predicate on the "current_total_value" field.
func CurrentTotalValueIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldIn(FieldCurrentTotalValue, vs...))
}

// CurrentTotalValueNotIn applies the NotIn predicate on the "current_total_value" field.
func CurrentTotalValueNotIn(vs ...string) predicate.Goal {
	return predicate.Goal(sql.FieldNotIn(FieldCurrentTotalValue, vs...))
}

// CurrentTotalValueGT applies the GT predicate on the "current_total_value" field.
func CurrentTotalValueGT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGT(FieldCurrentTotalValue, v))
}

// CurrentTotalValueGTE applies the GTE predicate on the "current_total_value" field.
func CurrentTotalValueGTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldGTE(FieldCurrentTotalValue, v))
}

// CurrentTotalValueLT applies the LT predicate on the "current_total_value" field.
func CurrentTotalValueLT(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLT(FieldCurrentTotalValue, v))
}

// CurrentTotalValueLTE applies the LTE predicate on the "current_total_value" field.
func CurrentTotalValueLTE(v string) predicate.Goal {
	return predicate.Goal(sql.FieldLTE(FieldCurrentTotalValue, v))
}

// CurrentTotalValueContains applies the Contains predicate on the "current_total_value" field.
func CurrentTotalValueContains(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContains(FieldCurrentTotalValue, v))
}

// CurrentTotalValueHasPrefix applies the HasPrefix predicate on the "current_total_value" field.
func CurrentTotalValueHasPrefix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasPrefix(FieldCurrentTotalValue, v))
}

// CurrentTotalValueHasSuffix applies the HasSuffix predicate on the "current_total_value" field.
func CurrentTotalValueHasSuffix(v string) predicate.Goal {
	return predicate.Goal(sql.FieldHasSuffix(FieldCurrentTotalValue, v))
}

// CurrentTotalValueIsNil applies the IsNil predicate on the "current_total_value" field.
func CurrentTotalValueIsNil() predicate.Goal {
	return predicate.Goal(sql.FieldIsNull(FieldCurrentTotalValue))
}

// CurrentTotalValueNotNil applies the NotNil predicate on the "current_total_value" field.
func CurrentTotalValueNotNil() predicate.Goal {
	return predicate.Goal(sql.FieldNotNull(FieldCurrentTotalValue))
}

// CurrentTotalValueEqualFold applies the EqualFold predicate on the "current_total_value" field.
func CurrentTotalValueEqualFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldEqualFold(FieldCurrentTotalValue, v))
}

// CurrentTotalValueContainsFold applies the ContainsFold predicate on the "current_total_value" field.
func CurrentTotalValueContainsFold(v string) predicate.Goal {
	return predicate.Goal(sql.FieldContainsFold(FieldCurrentTotalValue, v))
}

// PerWorkoutDataIsNil applies the IsNil predicate on the "per_workout_data" field.
func PerWorkoutDataIsNil() predicate.Goal {
	return predicate.Goal(sql.FieldIsNull(FieldPerWorkoutData))
}

// PerWorkoutDataNotNil applies the NotNil predicate on the "per_workout_data" field.
func PerWorkoutDataNotNil() predicate.Goal {
	return predicate.Goal(sql.FieldNotNull(FieldPerWorkoutData))
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.Goal {
	return predicate.Goal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.Goal {
	return predicate.Goal(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompetition applies the HasEdge predicate on the "competition" edge.
func HasCompetition() predicate.Goal {
	return predicate.Goal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CompetitionTable, CompetitionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompetitionWith applies the HasEdge predicate on the "competition" edge with a given conditions (other predicates).
func HasCompetitionWith(preds ...predicate.Competition) predicate.Goal {
	return predicate.Goal(func(s *sql.Selector) {
		step := newCompetitionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSquad applies the HasEdge predicate on the "squad" edge.
func HasSquad() predicate.Goal {
	return predicate.Goal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SquadTable, SquadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSquadWith applies the HasEdge predicate on the "squad" edge with a given conditions (other predicates).
func HasSquadWith(preds ...predicate.Squad) predicate.Goal {
	return predicate.Goal(func(s *sql.Selector) {
		step := newSquadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Goal) predicate.Goal {
	return predicate.Goal(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Goal) predicate.Goal {
	return predicate.Goal(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Goal) predicate.Goal {
	return predicate.Goal(sql.NotPredicates(p))
}
