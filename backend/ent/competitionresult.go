// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competition"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competitionresult"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/squad"
)

// CompetitionResult is the model entity for the CompetitionResult schema.
type CompetitionResult struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Place holds the value of the "place" field.
	Place string `json:"place,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompetitionResultQuery when eager-loading is set.
	Edges                          CompetitionResultEdges `json:"related"`
	competition_result_competition *uuid.UUID
	competition_result_profile     *uuid.UUID
	competition_result_squad       *uuid.UUID
	selectValues                   sql.SelectValues
}

// CompetitionResultEdges holds the relations/edges for other nodes in the graph.
type CompetitionResultEdges struct {
	// Competition holds the value of the competition edge.
	Competition *Competition `json:"competition,omitempty"`
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// Squad holds the value of the squad edge.
	Squad *Squad `json:"squad,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CompetitionOrErr returns the Competition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompetitionResultEdges) CompetitionOrErr() (*Competition, error) {
	if e.loadedTypes[0] {
		if e.Competition == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: competition.Label}
		}
		return e.Competition, nil
	}
	return nil, &NotLoadedError{edge: "competition"}
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompetitionResultEdges) ProfileOrErr() (*Profile, error) {
	if e.loadedTypes[1] {
		if e.Profile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// SquadOrErr returns the Squad value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompetitionResultEdges) SquadOrErr() (*Squad, error) {
	if e.loadedTypes[2] {
		if e.Squad == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: squad.Label}
		}
		return e.Squad, nil
	}
	return nil, &NotLoadedError{edge: "squad"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CompetitionResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case competitionresult.FieldPlace:
			values[i] = new(sql.NullString)
		case competitionresult.FieldCreatedAt, competitionresult.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case competitionresult.FieldID:
			values[i] = new(uuid.UUID)
		case competitionresult.ForeignKeys[0]: // competition_result_competition
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case competitionresult.ForeignKeys[1]: // competition_result_profile
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case competitionresult.ForeignKeys[2]: // competition_result_squad
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CompetitionResult fields.
func (cr *CompetitionResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case competitionresult.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cr.ID = *value
			}
		case competitionresult.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cr.CreatedAt = value.Time
			}
		case competitionresult.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cr.UpdatedAt = value.Time
			}
		case competitionresult.FieldPlace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field place", values[i])
			} else if value.Valid {
				cr.Place = value.String
			}
		case competitionresult.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field competition_result_competition", values[i])
			} else if value.Valid {
				cr.competition_result_competition = new(uuid.UUID)
				*cr.competition_result_competition = *value.S.(*uuid.UUID)
			}
		case competitionresult.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field competition_result_profile", values[i])
			} else if value.Valid {
				cr.competition_result_profile = new(uuid.UUID)
				*cr.competition_result_profile = *value.S.(*uuid.UUID)
			}
		case competitionresult.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field competition_result_squad", values[i])
			} else if value.Valid {
				cr.competition_result_squad = new(uuid.UUID)
				*cr.competition_result_squad = *value.S.(*uuid.UUID)
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CompetitionResult.
// This includes values selected through modifiers, order, etc.
func (cr *CompetitionResult) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// QueryCompetition queries the "competition" edge of the CompetitionResult entity.
func (cr *CompetitionResult) QueryCompetition() *CompetitionQuery {
	return NewCompetitionResultClient(cr.config).QueryCompetition(cr)
}

// QueryProfile queries the "profile" edge of the CompetitionResult entity.
func (cr *CompetitionResult) QueryProfile() *ProfileQuery {
	return NewCompetitionResultClient(cr.config).QueryProfile(cr)
}

// QuerySquad queries the "squad" edge of the CompetitionResult entity.
func (cr *CompetitionResult) QuerySquad() *SquadQuery {
	return NewCompetitionResultClient(cr.config).QuerySquad(cr)
}

// Update returns a builder for updating this CompetitionResult.
// Note that you need to call CompetitionResult.Unwrap() before calling this method if this CompetitionResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CompetitionResult) Update() *CompetitionResultUpdateOne {
	return NewCompetitionResultClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the CompetitionResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CompetitionResult) Unwrap() *CompetitionResult {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CompetitionResult is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CompetitionResult) String() string {
	var builder strings.Builder
	builder.WriteString("CompetitionResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("place=")
	builder.WriteString(cr.Place)
	builder.WriteByte(')')
	return builder.String()
}

// CompetitionResults is a parsable slice of CompetitionResult.
type CompetitionResults []*CompetitionResult
