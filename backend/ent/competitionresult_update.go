// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competition"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competitionresult"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/predicate"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/squad"
)

// CompetitionResultUpdate is the builder for updating CompetitionResult entities.
type CompetitionResultUpdate struct {
	config
	hooks     []Hook
	mutation  *CompetitionResultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CompetitionResultUpdate builder.
func (cru *CompetitionResultUpdate) Where(ps ...predicate.CompetitionResult) *CompetitionResultUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetUpdatedAt sets the "updated_at" field.
func (cru *CompetitionResultUpdate) SetUpdatedAt(t time.Time) *CompetitionResultUpdate {
	cru.mutation.SetUpdatedAt(t)
	return cru
}

// SetPlace sets the "place" field.
func (cru *CompetitionResultUpdate) SetPlace(s string) *CompetitionResultUpdate {
	cru.mutation.SetPlace(s)
	return cru
}

// SetCompetitionID sets the "competition" edge to the Competition entity by ID.
func (cru *CompetitionResultUpdate) SetCompetitionID(id uuid.UUID) *CompetitionResultUpdate {
	cru.mutation.SetCompetitionID(id)
	return cru
}

// SetCompetition sets the "competition" edge to the Competition entity.
func (cru *CompetitionResultUpdate) SetCompetition(c *Competition) *CompetitionResultUpdate {
	return cru.SetCompetitionID(c.ID)
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (cru *CompetitionResultUpdate) SetProfileID(id uuid.UUID) *CompetitionResultUpdate {
	cru.mutation.SetProfileID(id)
	return cru
}

// SetNillableProfileID sets the "profile" edge to the Profile entity by ID if the given value is not nil.
func (cru *CompetitionResultUpdate) SetNillableProfileID(id *uuid.UUID) *CompetitionResultUpdate {
	if id != nil {
		cru = cru.SetProfileID(*id)
	}
	return cru
}

// SetProfile sets the "profile" edge to the Profile entity.
func (cru *CompetitionResultUpdate) SetProfile(p *Profile) *CompetitionResultUpdate {
	return cru.SetProfileID(p.ID)
}

// SetSquadID sets the "squad" edge to the Squad entity by ID.
func (cru *CompetitionResultUpdate) SetSquadID(id uuid.UUID) *CompetitionResultUpdate {
	cru.mutation.SetSquadID(id)
	return cru
}

// SetNillableSquadID sets the "squad" edge to the Squad entity by ID if the given value is not nil.
func (cru *CompetitionResultUpdate) SetNillableSquadID(id *uuid.UUID) *CompetitionResultUpdate {
	if id != nil {
		cru = cru.SetSquadID(*id)
	}
	return cru
}

// SetSquad sets the "squad" edge to the Squad entity.
func (cru *CompetitionResultUpdate) SetSquad(s *Squad) *CompetitionResultUpdate {
	return cru.SetSquadID(s.ID)
}

// Mutation returns the CompetitionResultMutation object of the builder.
func (cru *CompetitionResultUpdate) Mutation() *CompetitionResultMutation {
	return cru.mutation
}

// ClearCompetition clears the "competition" edge to the Competition entity.
func (cru *CompetitionResultUpdate) ClearCompetition() *CompetitionResultUpdate {
	cru.mutation.ClearCompetition()
	return cru
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (cru *CompetitionResultUpdate) ClearProfile() *CompetitionResultUpdate {
	cru.mutation.ClearProfile()
	return cru
}

// ClearSquad clears the "squad" edge to the Squad entity.
func (cru *CompetitionResultUpdate) ClearSquad() *CompetitionResultUpdate {
	cru.mutation.ClearSquad()
	return cru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *CompetitionResultUpdate) Save(ctx context.Context) (int, error) {
	cru.defaults()
	return withHooks(ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *CompetitionResultUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *CompetitionResultUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *CompetitionResultUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cru *CompetitionResultUpdate) defaults() {
	if _, ok := cru.mutation.UpdatedAt(); !ok {
		v := competitionresult.UpdateDefaultUpdatedAt()
		cru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cru *CompetitionResultUpdate) check() error {
	if _, ok := cru.mutation.CompetitionID(); cru.mutation.CompetitionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CompetitionResult.competition"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cru *CompetitionResultUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CompetitionResultUpdate {
	cru.modifiers = append(cru.modifiers, modifiers...)
	return cru
}

func (cru *CompetitionResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(competitionresult.Table, competitionresult.Columns, sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID))
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.UpdatedAt(); ok {
		_spec.SetField(competitionresult.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cru.mutation.Place(); ok {
		_spec.SetField(competitionresult.FieldPlace, field.TypeString, value)
	}
	if cru.mutation.CompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competitionresult.CompetitionTable,
			Columns: []string{competitionresult.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competitionresult.CompetitionTable,
			Columns: []string{competitionresult.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competitionresult.ProfileTable,
			Columns: []string{competitionresult.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competitionresult.ProfileTable,
			Columns: []string{competitionresult.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competitionresult.SquadTable,
			Columns: []string{competitionresult.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competitionresult.SquadTable,
			Columns: []string{competitionresult.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{competitionresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// CompetitionResultUpdateOne is the builder for updating a single CompetitionResult entity.
type CompetitionResultUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CompetitionResultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cruo *CompetitionResultUpdateOne) SetUpdatedAt(t time.Time) *CompetitionResultUpdateOne {
	cruo.mutation.SetUpdatedAt(t)
	return cruo
}

// SetPlace sets the "place" field.
func (cruo *CompetitionResultUpdateOne) SetPlace(s string) *CompetitionResultUpdateOne {
	cruo.mutation.SetPlace(s)
	return cruo
}

// SetCompetitionID sets the "competition" edge to the Competition entity by ID.
func (cruo *CompetitionResultUpdateOne) SetCompetitionID(id uuid.UUID) *CompetitionResultUpdateOne {
	cruo.mutation.SetCompetitionID(id)
	return cruo
}

// SetCompetition sets the "competition" edge to the Competition entity.
func (cruo *CompetitionResultUpdateOne) SetCompetition(c *Competition) *CompetitionResultUpdateOne {
	return cruo.SetCompetitionID(c.ID)
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (cruo *CompetitionResultUpdateOne) SetProfileID(id uuid.UUID) *CompetitionResultUpdateOne {
	cruo.mutation.SetProfileID(id)
	return cruo
}

// SetNillableProfileID sets the "profile" edge to the Profile entity by ID if the given value is not nil.
func (cruo *CompetitionResultUpdateOne) SetNillableProfileID(id *uuid.UUID) *CompetitionResultUpdateOne {
	if id != nil {
		cruo = cruo.SetProfileID(*id)
	}
	return cruo
}

// SetProfile sets the "profile" edge to the Profile entity.
func (cruo *CompetitionResultUpdateOne) SetProfile(p *Profile) *CompetitionResultUpdateOne {
	return cruo.SetProfileID(p.ID)
}

// SetSquadID sets the "squad" edge to the Squad entity by ID.
func (cruo *CompetitionResultUpdateOne) SetSquadID(id uuid.UUID) *CompetitionResultUpdateOne {
	cruo.mutation.SetSquadID(id)
	return cruo
}

// SetNillableSquadID sets the "squad" edge to the Squad entity by ID if the given value is not nil.
func (cruo *CompetitionResultUpdateOne) SetNillableSquadID(id *uuid.UUID) *CompetitionResultUpdateOne {
	if id != nil {
		cruo = cruo.SetSquadID(*id)
	}
	return cruo
}

// SetSquad sets the "squad" edge to the Squad entity.
func (cruo *CompetitionResultUpdateOne) SetSquad(s *Squad) *CompetitionResultUpdateOne {
	return cruo.SetSquadID(s.ID)
}

// Mutation returns the CompetitionResultMutation object of the builder.
func (cruo *CompetitionResultUpdateOne) Mutation() *CompetitionResultMutation {
	return cruo.mutation
}

// ClearCompetition clears the "competition" edge to the Competition entity.
func (cruo *CompetitionResultUpdateOne) ClearCompetition() *CompetitionResultUpdateOne {
	cruo.mutation.ClearCompetition()
	return cruo
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (cruo *CompetitionResultUpdateOne) ClearProfile() *CompetitionResultUpdateOne {
	cruo.mutation.ClearProfile()
	return cruo
}

// ClearSquad clears the "squad" edge to the Squad entity.
func (cruo *CompetitionResultUpdateOne) ClearSquad() *CompetitionResultUpdateOne {
	cruo.mutation.ClearSquad()
	return cruo
}

// Where appends a list predicates to the CompetitionResultUpdate builder.
func (cruo *CompetitionResultUpdateOne) Where(ps ...predicate.CompetitionResult) *CompetitionResultUpdateOne {
	cruo.mutation.Where(ps...)
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *CompetitionResultUpdateOne) Select(field string, fields ...string) *CompetitionResultUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated CompetitionResult entity.
func (cruo *CompetitionResultUpdateOne) Save(ctx context.Context) (*CompetitionResult, error) {
	cruo.defaults()
	return withHooks(ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *CompetitionResultUpdateOne) SaveX(ctx context.Context) *CompetitionResult {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *CompetitionResultUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CompetitionResultUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cruo *CompetitionResultUpdateOne) defaults() {
	if _, ok := cruo.mutation.UpdatedAt(); !ok {
		v := competitionresult.UpdateDefaultUpdatedAt()
		cruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cruo *CompetitionResultUpdateOne) check() error {
	if _, ok := cruo.mutation.CompetitionID(); cruo.mutation.CompetitionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CompetitionResult.competition"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cruo *CompetitionResultUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CompetitionResultUpdateOne {
	cruo.modifiers = append(cruo.modifiers, modifiers...)
	return cruo
}

func (cruo *CompetitionResultUpdateOne) sqlSave(ctx context.Context) (_node *CompetitionResult, err error) {
	if err := cruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(competitionresult.Table, competitionresult.Columns, sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID))
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CompetitionResult.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, competitionresult.FieldID)
		for _, f := range fields {
			if !competitionresult.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != competitionresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.UpdatedAt(); ok {
		_spec.SetField(competitionresult.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cruo.mutation.Place(); ok {
		_spec.SetField(competitionresult.FieldPlace, field.TypeString, value)
	}
	if cruo.mutation.CompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competitionresult.CompetitionTable,
			Columns: []string{competitionresult.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competitionresult.CompetitionTable,
			Columns: []string{competitionresult.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competitionresult.ProfileTable,
			Columns: []string{competitionresult.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competitionresult.ProfileTable,
			Columns: []string{competitionresult.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.SquadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competitionresult.SquadTable,
			Columns: []string{competitionresult.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.SquadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   competitionresult.SquadTable,
			Columns: []string{competitionresult.SquadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cruo.modifiers...)
	_node = &CompetitionResult{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{competitionresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
