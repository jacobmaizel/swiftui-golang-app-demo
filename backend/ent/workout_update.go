// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competition"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/invite"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/predicate"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workout"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutdata"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutroutedata"
)

// WorkoutUpdate is the builder for updating Workout entities.
type WorkoutUpdate struct {
	config
	hooks     []Hook
	mutation  *WorkoutMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WorkoutUpdate builder.
func (wu *WorkoutUpdate) Where(ps ...predicate.Workout) *WorkoutUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WorkoutUpdate) SetUpdatedAt(t time.Time) *WorkoutUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetHealthkitWorkoutActivityType sets the "healthkit_workout_activity_type" field.
func (wu *WorkoutUpdate) SetHealthkitWorkoutActivityType(s string) *WorkoutUpdate {
	wu.mutation.SetHealthkitWorkoutActivityType(s)
	return wu
}

// AddInviteIDs adds the "invite" edge to the Invite entity by IDs.
func (wu *WorkoutUpdate) AddInviteIDs(ids ...uuid.UUID) *WorkoutUpdate {
	wu.mutation.AddInviteIDs(ids...)
	return wu
}

// AddInvite adds the "invite" edges to the Invite entity.
func (wu *WorkoutUpdate) AddInvite(i ...*Invite) *WorkoutUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wu.AddInviteIDs(ids...)
}

// SetLeaderID sets the "leader" edge to the Profile entity by ID.
func (wu *WorkoutUpdate) SetLeaderID(id uuid.UUID) *WorkoutUpdate {
	wu.mutation.SetLeaderID(id)
	return wu
}

// SetNillableLeaderID sets the "leader" edge to the Profile entity by ID if the given value is not nil.
func (wu *WorkoutUpdate) SetNillableLeaderID(id *uuid.UUID) *WorkoutUpdate {
	if id != nil {
		wu = wu.SetLeaderID(*id)
	}
	return wu
}

// SetLeader sets the "leader" edge to the Profile entity.
func (wu *WorkoutUpdate) SetLeader(p *Profile) *WorkoutUpdate {
	return wu.SetLeaderID(p.ID)
}

// SetCompetitionID sets the "competition" edge to the Competition entity by ID.
func (wu *WorkoutUpdate) SetCompetitionID(id uuid.UUID) *WorkoutUpdate {
	wu.mutation.SetCompetitionID(id)
	return wu
}

// SetNillableCompetitionID sets the "competition" edge to the Competition entity by ID if the given value is not nil.
func (wu *WorkoutUpdate) SetNillableCompetitionID(id *uuid.UUID) *WorkoutUpdate {
	if id != nil {
		wu = wu.SetCompetitionID(*id)
	}
	return wu
}

// SetCompetition sets the "competition" edge to the Competition entity.
func (wu *WorkoutUpdate) SetCompetition(c *Competition) *WorkoutUpdate {
	return wu.SetCompetitionID(c.ID)
}

// AddWorkoutDatumIDs adds the "workout_data" edge to the WorkoutData entity by IDs.
func (wu *WorkoutUpdate) AddWorkoutDatumIDs(ids ...uuid.UUID) *WorkoutUpdate {
	wu.mutation.AddWorkoutDatumIDs(ids...)
	return wu
}

// AddWorkoutData adds the "workout_data" edges to the WorkoutData entity.
func (wu *WorkoutUpdate) AddWorkoutData(w ...*WorkoutData) *WorkoutUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddWorkoutDatumIDs(ids...)
}

// AddWorkoutRouteDatumIDs adds the "workout_route_data" edge to the WorkoutRouteData entity by IDs.
func (wu *WorkoutUpdate) AddWorkoutRouteDatumIDs(ids ...uuid.UUID) *WorkoutUpdate {
	wu.mutation.AddWorkoutRouteDatumIDs(ids...)
	return wu
}

// AddWorkoutRouteData adds the "workout_route_data" edges to the WorkoutRouteData entity.
func (wu *WorkoutUpdate) AddWorkoutRouteData(w ...*WorkoutRouteData) *WorkoutUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddWorkoutRouteDatumIDs(ids...)
}

// Mutation returns the WorkoutMutation object of the builder.
func (wu *WorkoutUpdate) Mutation() *WorkoutMutation {
	return wu.mutation
}

// ClearInvite clears all "invite" edges to the Invite entity.
func (wu *WorkoutUpdate) ClearInvite() *WorkoutUpdate {
	wu.mutation.ClearInvite()
	return wu
}

// RemoveInviteIDs removes the "invite" edge to Invite entities by IDs.
func (wu *WorkoutUpdate) RemoveInviteIDs(ids ...uuid.UUID) *WorkoutUpdate {
	wu.mutation.RemoveInviteIDs(ids...)
	return wu
}

// RemoveInvite removes "invite" edges to Invite entities.
func (wu *WorkoutUpdate) RemoveInvite(i ...*Invite) *WorkoutUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wu.RemoveInviteIDs(ids...)
}

// ClearLeader clears the "leader" edge to the Profile entity.
func (wu *WorkoutUpdate) ClearLeader() *WorkoutUpdate {
	wu.mutation.ClearLeader()
	return wu
}

// ClearCompetition clears the "competition" edge to the Competition entity.
func (wu *WorkoutUpdate) ClearCompetition() *WorkoutUpdate {
	wu.mutation.ClearCompetition()
	return wu
}

// ClearWorkoutData clears all "workout_data" edges to the WorkoutData entity.
func (wu *WorkoutUpdate) ClearWorkoutData() *WorkoutUpdate {
	wu.mutation.ClearWorkoutData()
	return wu
}

// RemoveWorkoutDatumIDs removes the "workout_data" edge to WorkoutData entities by IDs.
func (wu *WorkoutUpdate) RemoveWorkoutDatumIDs(ids ...uuid.UUID) *WorkoutUpdate {
	wu.mutation.RemoveWorkoutDatumIDs(ids...)
	return wu
}

// RemoveWorkoutData removes "workout_data" edges to WorkoutData entities.
func (wu *WorkoutUpdate) RemoveWorkoutData(w ...*WorkoutData) *WorkoutUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveWorkoutDatumIDs(ids...)
}

// ClearWorkoutRouteData clears all "workout_route_data" edges to the WorkoutRouteData entity.
func (wu *WorkoutUpdate) ClearWorkoutRouteData() *WorkoutUpdate {
	wu.mutation.ClearWorkoutRouteData()
	return wu
}

// RemoveWorkoutRouteDatumIDs removes the "workout_route_data" edge to WorkoutRouteData entities by IDs.
func (wu *WorkoutUpdate) RemoveWorkoutRouteDatumIDs(ids ...uuid.UUID) *WorkoutUpdate {
	wu.mutation.RemoveWorkoutRouteDatumIDs(ids...)
	return wu
}

// RemoveWorkoutRouteData removes "workout_route_data" edges to WorkoutRouteData entities.
func (wu *WorkoutUpdate) RemoveWorkoutRouteData(w ...*WorkoutRouteData) *WorkoutUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveWorkoutRouteDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkoutUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkoutUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkoutUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkoutUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WorkoutUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := workout.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WorkoutUpdate) check() error {
	if v, ok := wu.mutation.HealthkitWorkoutActivityType(); ok {
		if err := workout.HealthkitWorkoutActivityTypeValidator(v); err != nil {
			return &ValidationError{Name: "healthkit_workout_activity_type", err: fmt.Errorf(`ent: validator failed for field "Workout.healthkit_workout_activity_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wu *WorkoutUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkoutUpdate {
	wu.modifiers = append(wu.modifiers, modifiers...)
	return wu
}

func (wu *WorkoutUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workout.Table, workout.Columns, sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(workout.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.HealthkitWorkoutActivityType(); ok {
		_spec.SetField(workout.FieldHealthkitWorkoutActivityType, field.TypeString, value)
	}
	if wu.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.InviteTable,
			Columns: []string{workout.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedInviteIDs(); len(nodes) > 0 && !wu.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.InviteTable,
			Columns: []string{workout.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.InviteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.InviteTable,
			Columns: []string{workout.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.LeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workout.LeaderTable,
			Columns: []string{workout.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.LeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workout.LeaderTable,
			Columns: []string{workout.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.CompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workout.CompetitionTable,
			Columns: []string{workout.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workout.CompetitionTable,
			Columns: []string{workout.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.WorkoutDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.WorkoutDataTable,
			Columns: []string{workout.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedWorkoutDataIDs(); len(nodes) > 0 && !wu.mutation.WorkoutDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.WorkoutDataTable,
			Columns: []string{workout.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WorkoutDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.WorkoutDataTable,
			Columns: []string{workout.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.WorkoutRouteDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.WorkoutRouteDataTable,
			Columns: []string{workout.WorkoutRouteDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutroutedata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedWorkoutRouteDataIDs(); len(nodes) > 0 && !wu.mutation.WorkoutRouteDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.WorkoutRouteDataTable,
			Columns: []string{workout.WorkoutRouteDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutroutedata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WorkoutRouteDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.WorkoutRouteDataTable,
			Columns: []string{workout.WorkoutRouteDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutroutedata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WorkoutUpdateOne is the builder for updating a single Workout entity.
type WorkoutUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WorkoutMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WorkoutUpdateOne) SetUpdatedAt(t time.Time) *WorkoutUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetHealthkitWorkoutActivityType sets the "healthkit_workout_activity_type" field.
func (wuo *WorkoutUpdateOne) SetHealthkitWorkoutActivityType(s string) *WorkoutUpdateOne {
	wuo.mutation.SetHealthkitWorkoutActivityType(s)
	return wuo
}

// AddInviteIDs adds the "invite" edge to the Invite entity by IDs.
func (wuo *WorkoutUpdateOne) AddInviteIDs(ids ...uuid.UUID) *WorkoutUpdateOne {
	wuo.mutation.AddInviteIDs(ids...)
	return wuo
}

// AddInvite adds the "invite" edges to the Invite entity.
func (wuo *WorkoutUpdateOne) AddInvite(i ...*Invite) *WorkoutUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wuo.AddInviteIDs(ids...)
}

// SetLeaderID sets the "leader" edge to the Profile entity by ID.
func (wuo *WorkoutUpdateOne) SetLeaderID(id uuid.UUID) *WorkoutUpdateOne {
	wuo.mutation.SetLeaderID(id)
	return wuo
}

// SetNillableLeaderID sets the "leader" edge to the Profile entity by ID if the given value is not nil.
func (wuo *WorkoutUpdateOne) SetNillableLeaderID(id *uuid.UUID) *WorkoutUpdateOne {
	if id != nil {
		wuo = wuo.SetLeaderID(*id)
	}
	return wuo
}

// SetLeader sets the "leader" edge to the Profile entity.
func (wuo *WorkoutUpdateOne) SetLeader(p *Profile) *WorkoutUpdateOne {
	return wuo.SetLeaderID(p.ID)
}

// SetCompetitionID sets the "competition" edge to the Competition entity by ID.
func (wuo *WorkoutUpdateOne) SetCompetitionID(id uuid.UUID) *WorkoutUpdateOne {
	wuo.mutation.SetCompetitionID(id)
	return wuo
}

// SetNillableCompetitionID sets the "competition" edge to the Competition entity by ID if the given value is not nil.
func (wuo *WorkoutUpdateOne) SetNillableCompetitionID(id *uuid.UUID) *WorkoutUpdateOne {
	if id != nil {
		wuo = wuo.SetCompetitionID(*id)
	}
	return wuo
}

// SetCompetition sets the "competition" edge to the Competition entity.
func (wuo *WorkoutUpdateOne) SetCompetition(c *Competition) *WorkoutUpdateOne {
	return wuo.SetCompetitionID(c.ID)
}

// AddWorkoutDatumIDs adds the "workout_data" edge to the WorkoutData entity by IDs.
func (wuo *WorkoutUpdateOne) AddWorkoutDatumIDs(ids ...uuid.UUID) *WorkoutUpdateOne {
	wuo.mutation.AddWorkoutDatumIDs(ids...)
	return wuo
}

// AddWorkoutData adds the "workout_data" edges to the WorkoutData entity.
func (wuo *WorkoutUpdateOne) AddWorkoutData(w ...*WorkoutData) *WorkoutUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddWorkoutDatumIDs(ids...)
}

// AddWorkoutRouteDatumIDs adds the "workout_route_data" edge to the WorkoutRouteData entity by IDs.
func (wuo *WorkoutUpdateOne) AddWorkoutRouteDatumIDs(ids ...uuid.UUID) *WorkoutUpdateOne {
	wuo.mutation.AddWorkoutRouteDatumIDs(ids...)
	return wuo
}

// AddWorkoutRouteData adds the "workout_route_data" edges to the WorkoutRouteData entity.
func (wuo *WorkoutUpdateOne) AddWorkoutRouteData(w ...*WorkoutRouteData) *WorkoutUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddWorkoutRouteDatumIDs(ids...)
}

// Mutation returns the WorkoutMutation object of the builder.
func (wuo *WorkoutUpdateOne) Mutation() *WorkoutMutation {
	return wuo.mutation
}

// ClearInvite clears all "invite" edges to the Invite entity.
func (wuo *WorkoutUpdateOne) ClearInvite() *WorkoutUpdateOne {
	wuo.mutation.ClearInvite()
	return wuo
}

// RemoveInviteIDs removes the "invite" edge to Invite entities by IDs.
func (wuo *WorkoutUpdateOne) RemoveInviteIDs(ids ...uuid.UUID) *WorkoutUpdateOne {
	wuo.mutation.RemoveInviteIDs(ids...)
	return wuo
}

// RemoveInvite removes "invite" edges to Invite entities.
func (wuo *WorkoutUpdateOne) RemoveInvite(i ...*Invite) *WorkoutUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wuo.RemoveInviteIDs(ids...)
}

// ClearLeader clears the "leader" edge to the Profile entity.
func (wuo *WorkoutUpdateOne) ClearLeader() *WorkoutUpdateOne {
	wuo.mutation.ClearLeader()
	return wuo
}

// ClearCompetition clears the "competition" edge to the Competition entity.
func (wuo *WorkoutUpdateOne) ClearCompetition() *WorkoutUpdateOne {
	wuo.mutation.ClearCompetition()
	return wuo
}

// ClearWorkoutData clears all "workout_data" edges to the WorkoutData entity.
func (wuo *WorkoutUpdateOne) ClearWorkoutData() *WorkoutUpdateOne {
	wuo.mutation.ClearWorkoutData()
	return wuo
}

// RemoveWorkoutDatumIDs removes the "workout_data" edge to WorkoutData entities by IDs.
func (wuo *WorkoutUpdateOne) RemoveWorkoutDatumIDs(ids ...uuid.UUID) *WorkoutUpdateOne {
	wuo.mutation.RemoveWorkoutDatumIDs(ids...)
	return wuo
}

// RemoveWorkoutData removes "workout_data" edges to WorkoutData entities.
func (wuo *WorkoutUpdateOne) RemoveWorkoutData(w ...*WorkoutData) *WorkoutUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveWorkoutDatumIDs(ids...)
}

// ClearWorkoutRouteData clears all "workout_route_data" edges to the WorkoutRouteData entity.
func (wuo *WorkoutUpdateOne) ClearWorkoutRouteData() *WorkoutUpdateOne {
	wuo.mutation.ClearWorkoutRouteData()
	return wuo
}

// RemoveWorkoutRouteDatumIDs removes the "workout_route_data" edge to WorkoutRouteData entities by IDs.
func (wuo *WorkoutUpdateOne) RemoveWorkoutRouteDatumIDs(ids ...uuid.UUID) *WorkoutUpdateOne {
	wuo.mutation.RemoveWorkoutRouteDatumIDs(ids...)
	return wuo
}

// RemoveWorkoutRouteData removes "workout_route_data" edges to WorkoutRouteData entities.
func (wuo *WorkoutUpdateOne) RemoveWorkoutRouteData(w ...*WorkoutRouteData) *WorkoutUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveWorkoutRouteDatumIDs(ids...)
}

// Where appends a list predicates to the WorkoutUpdate builder.
func (wuo *WorkoutUpdateOne) Where(ps ...predicate.Workout) *WorkoutUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkoutUpdateOne) Select(field string, fields ...string) *WorkoutUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Workout entity.
func (wuo *WorkoutUpdateOne) Save(ctx context.Context) (*Workout, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkoutUpdateOne) SaveX(ctx context.Context) *Workout {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkoutUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkoutUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WorkoutUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := workout.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WorkoutUpdateOne) check() error {
	if v, ok := wuo.mutation.HealthkitWorkoutActivityType(); ok {
		if err := workout.HealthkitWorkoutActivityTypeValidator(v); err != nil {
			return &ValidationError{Name: "healthkit_workout_activity_type", err: fmt.Errorf(`ent: validator failed for field "Workout.healthkit_workout_activity_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wuo *WorkoutUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkoutUpdateOne {
	wuo.modifiers = append(wuo.modifiers, modifiers...)
	return wuo
}

func (wuo *WorkoutUpdateOne) sqlSave(ctx context.Context) (_node *Workout, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workout.Table, workout.Columns, sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Workout.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workout.FieldID)
		for _, f := range fields {
			if !workout.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workout.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workout.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.HealthkitWorkoutActivityType(); ok {
		_spec.SetField(workout.FieldHealthkitWorkoutActivityType, field.TypeString, value)
	}
	if wuo.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.InviteTable,
			Columns: []string{workout.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedInviteIDs(); len(nodes) > 0 && !wuo.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.InviteTable,
			Columns: []string{workout.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.InviteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.InviteTable,
			Columns: []string{workout.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.LeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workout.LeaderTable,
			Columns: []string{workout.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.LeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workout.LeaderTable,
			Columns: []string{workout.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.CompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workout.CompetitionTable,
			Columns: []string{workout.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workout.CompetitionTable,
			Columns: []string{workout.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.WorkoutDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.WorkoutDataTable,
			Columns: []string{workout.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedWorkoutDataIDs(); len(nodes) > 0 && !wuo.mutation.WorkoutDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.WorkoutDataTable,
			Columns: []string{workout.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WorkoutDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.WorkoutDataTable,
			Columns: []string{workout.WorkoutDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutdata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.WorkoutRouteDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.WorkoutRouteDataTable,
			Columns: []string{workout.WorkoutRouteDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutroutedata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedWorkoutRouteDataIDs(); len(nodes) > 0 && !wuo.mutation.WorkoutRouteDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.WorkoutRouteDataTable,
			Columns: []string{workout.WorkoutRouteDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutroutedata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WorkoutRouteDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workout.WorkoutRouteDataTable,
			Columns: []string{workout.WorkoutRouteDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutroutedata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wuo.modifiers...)
	_node = &Workout{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
