// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competitionresult"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/invite"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/squad"
)

// SquadCreate is the builder for creating a Squad entity.
type SquadCreate struct {
	config
	mutation *SquadMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *SquadCreate) SetCreatedAt(t time.Time) *SquadCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SquadCreate) SetNillableCreatedAt(t *time.Time) *SquadCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SquadCreate) SetUpdatedAt(t time.Time) *SquadCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SquadCreate) SetNillableUpdatedAt(t *time.Time) *SquadCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetPublic sets the "public" field.
func (sc *SquadCreate) SetPublic(b bool) *SquadCreate {
	sc.mutation.SetPublic(b)
	return sc
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (sc *SquadCreate) SetNillablePublic(b *bool) *SquadCreate {
	if b != nil {
		sc.SetPublic(*b)
	}
	return sc
}

// SetTitle sets the "title" field.
func (sc *SquadCreate) SetTitle(s string) *SquadCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetID sets the "id" field.
func (sc *SquadCreate) SetID(u uuid.UUID) *SquadCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SquadCreate) SetNillableID(u *uuid.UUID) *SquadCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// AddMemberIDs adds the "members" edge to the Profile entity by IDs.
func (sc *SquadCreate) AddMemberIDs(ids ...uuid.UUID) *SquadCreate {
	sc.mutation.AddMemberIDs(ids...)
	return sc
}

// AddMembers adds the "members" edges to the Profile entity.
func (sc *SquadCreate) AddMembers(p ...*Profile) *SquadCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddMemberIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (sc *SquadCreate) AddInviteIDs(ids ...uuid.UUID) *SquadCreate {
	sc.mutation.AddInviteIDs(ids...)
	return sc
}

// AddInvites adds the "invites" edges to the Invite entity.
func (sc *SquadCreate) AddInvites(i ...*Invite) *SquadCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sc.AddInviteIDs(ids...)
}

// AddCompetitionResultIDs adds the "competition_results" edge to the CompetitionResult entity by IDs.
func (sc *SquadCreate) AddCompetitionResultIDs(ids ...uuid.UUID) *SquadCreate {
	sc.mutation.AddCompetitionResultIDs(ids...)
	return sc
}

// AddCompetitionResults adds the "competition_results" edges to the CompetitionResult entity.
func (sc *SquadCreate) AddCompetitionResults(c ...*CompetitionResult) *SquadCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddCompetitionResultIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the Profile entity by ID.
func (sc *SquadCreate) SetOwnerID(id uuid.UUID) *SquadCreate {
	sc.mutation.SetOwnerID(id)
	return sc
}

// SetNillableOwnerID sets the "owner" edge to the Profile entity by ID if the given value is not nil.
func (sc *SquadCreate) SetNillableOwnerID(id *uuid.UUID) *SquadCreate {
	if id != nil {
		sc = sc.SetOwnerID(*id)
	}
	return sc
}

// SetOwner sets the "owner" edge to the Profile entity.
func (sc *SquadCreate) SetOwner(p *Profile) *SquadCreate {
	return sc.SetOwnerID(p.ID)
}

// Mutation returns the SquadMutation object of the builder.
func (sc *SquadCreate) Mutation() *SquadMutation {
	return sc.mutation
}

// Save creates the Squad in the database.
func (sc *SquadCreate) Save(ctx context.Context) (*Squad, error) {
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SquadCreate) SaveX(ctx context.Context) *Squad {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SquadCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SquadCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SquadCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if squad.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized squad.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := squad.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if squad.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized squad.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := squad.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Public(); !ok {
		v := squad.DefaultPublic
		sc.mutation.SetPublic(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		if squad.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized squad.DefaultID (forgotten import ent/runtime?)")
		}
		v := squad.DefaultID()
		sc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *SquadCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Squad.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Squad.updated_at"`)}
	}
	if _, ok := sc.mutation.Public(); !ok {
		return &ValidationError{Name: "public", err: errors.New(`ent: missing required field "Squad.public"`)}
	}
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Squad.title"`)}
	}
	return nil
}

func (sc *SquadCreate) sqlSave(ctx context.Context) (*Squad, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SquadCreate) createSpec() (*Squad, *sqlgraph.CreateSpec) {
	var (
		_node = &Squad{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(squad.Table, sqlgraph.NewFieldSpec(squad.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(squad.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(squad.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Public(); ok {
		_spec.SetField(squad.FieldPublic, field.TypeBool, value)
		_node.Public = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(squad.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if nodes := sc.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   squad.MembersTable,
			Columns: squad.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   squad.InvitesTable,
			Columns: []string{squad.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CompetitionResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   squad.CompetitionResultsTable,
			Columns: []string{squad.CompetitionResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitionresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   squad.OwnerTable,
			Columns: []string{squad.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.squad_owner = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SquadCreateBulk is the builder for creating many Squad entities in bulk.
type SquadCreateBulk struct {
	config
	builders []*SquadCreate
}

// Save creates the Squad entities in the database.
func (scb *SquadCreateBulk) Save(ctx context.Context) ([]*Squad, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Squad, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SquadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SquadCreateBulk) SaveX(ctx context.Context) []*Squad {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SquadCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SquadCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
