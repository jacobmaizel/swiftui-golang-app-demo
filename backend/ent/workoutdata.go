// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/competition"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/profile"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workout"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutdata"
	"github.com/jacobmaizel/swiftui-golang-app-demo/ent/workoutroutedata"
	"github.com/jacobmaizel/swiftui-golang-app-demo/shared"
)

// WorkoutData is the model entity for the WorkoutData schema.
type WorkoutData struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// HealthkitWorkoutID holds the value of the "healthkit_workout_id" field.
	HealthkitWorkoutID string `json:"healthkit_workout_id,omitempty"`
	// HealthkitWorkoutStartDate holds the value of the "healthkit_workout_start_date" field.
	HealthkitWorkoutStartDate time.Time `json:"healthkit_workout_start_date,omitempty"`
	// HealthkitWorkoutEndDate holds the value of the "healthkit_workout_end_date" field.
	HealthkitWorkoutEndDate time.Time `json:"healthkit_workout_end_date,omitempty"`
	// Distance holds the value of the "distance" field.
	Distance float64 `json:"distance,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration string `json:"duration,omitempty"`
	// EnergyBurned holds the value of the "energy_burned" field.
	EnergyBurned string `json:"energy_burned,omitempty"`
	// AverageHeartRate holds the value of the "average_heart_rate" field.
	AverageHeartRate string `json:"average_heart_rate,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// LocationType holds the value of the "location_type" field.
	LocationType string `json:"location_type,omitempty"`
	// Weather holds the value of the "weather" field.
	Weather *shared.WorkoutDataWeather `json:"weather,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkoutDataQuery when eager-loading is set.
	Edges                    WorkoutDataEdges `json:"related"`
	workout_data_workout     *uuid.UUID
	workout_data_profile     *uuid.UUID
	workout_data_competition *uuid.UUID
	selectValues             sql.SelectValues
}

// WorkoutDataEdges holds the relations/edges for other nodes in the graph.
type WorkoutDataEdges struct {
	// Workout holds the value of the workout edge.
	Workout *Workout `json:"workout,omitempty"`
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// WorkoutRouteData holds the value of the workout_route_data edge.
	WorkoutRouteData *WorkoutRouteData `json:"workout_route_data,omitempty"`
	// Competition holds the value of the competition edge.
	Competition *Competition `json:"competition,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// WorkoutOrErr returns the Workout value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutDataEdges) WorkoutOrErr() (*Workout, error) {
	if e.loadedTypes[0] {
		if e.Workout == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: workout.Label}
		}
		return e.Workout, nil
	}
	return nil, &NotLoadedError{edge: "workout"}
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutDataEdges) ProfileOrErr() (*Profile, error) {
	if e.loadedTypes[1] {
		if e.Profile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// WorkoutRouteDataOrErr returns the WorkoutRouteData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutDataEdges) WorkoutRouteDataOrErr() (*WorkoutRouteData, error) {
	if e.loadedTypes[2] {
		if e.WorkoutRouteData == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: workoutroutedata.Label}
		}
		return e.WorkoutRouteData, nil
	}
	return nil, &NotLoadedError{edge: "workout_route_data"}
}

// CompetitionOrErr returns the Competition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutDataEdges) CompetitionOrErr() (*Competition, error) {
	if e.loadedTypes[3] {
		if e.Competition == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: competition.Label}
		}
		return e.Competition, nil
	}
	return nil, &NotLoadedError{edge: "competition"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkoutData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workoutdata.FieldWeather:
			values[i] = new([]byte)
		case workoutdata.FieldDistance:
			values[i] = new(sql.NullFloat64)
		case workoutdata.FieldHealthkitWorkoutID, workoutdata.FieldDuration, workoutdata.FieldEnergyBurned, workoutdata.FieldAverageHeartRate, workoutdata.FieldSource, workoutdata.FieldLocationType:
			values[i] = new(sql.NullString)
		case workoutdata.FieldCreatedAt, workoutdata.FieldUpdatedAt, workoutdata.FieldHealthkitWorkoutStartDate, workoutdata.FieldHealthkitWorkoutEndDate:
			values[i] = new(sql.NullTime)
		case workoutdata.FieldID:
			values[i] = new(uuid.UUID)
		case workoutdata.ForeignKeys[0]: // workout_data_workout
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case workoutdata.ForeignKeys[1]: // workout_data_profile
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case workoutdata.ForeignKeys[2]: // workout_data_competition
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkoutData fields.
func (wd *WorkoutData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workoutdata.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wd.ID = *value
			}
		case workoutdata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wd.CreatedAt = value.Time
			}
		case workoutdata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wd.UpdatedAt = value.Time
			}
		case workoutdata.FieldHealthkitWorkoutID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field healthkit_workout_id", values[i])
			} else if value.Valid {
				wd.HealthkitWorkoutID = value.String
			}
		case workoutdata.FieldHealthkitWorkoutStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field healthkit_workout_start_date", values[i])
			} else if value.Valid {
				wd.HealthkitWorkoutStartDate = value.Time
			}
		case workoutdata.FieldHealthkitWorkoutEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field healthkit_workout_end_date", values[i])
			} else if value.Valid {
				wd.HealthkitWorkoutEndDate = value.Time
			}
		case workoutdata.FieldDistance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field distance", values[i])
			} else if value.Valid {
				wd.Distance = value.Float64
			}
		case workoutdata.FieldDuration:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				wd.Duration = value.String
			}
		case workoutdata.FieldEnergyBurned:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field energy_burned", values[i])
			} else if value.Valid {
				wd.EnergyBurned = value.String
			}
		case workoutdata.FieldAverageHeartRate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field average_heart_rate", values[i])
			} else if value.Valid {
				wd.AverageHeartRate = value.String
			}
		case workoutdata.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				wd.Source = value.String
			}
		case workoutdata.FieldLocationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location_type", values[i])
			} else if value.Valid {
				wd.LocationType = value.String
			}
		case workoutdata.FieldWeather:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field weather", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &wd.Weather); err != nil {
					return fmt.Errorf("unmarshal field weather: %w", err)
				}
			}
		case workoutdata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workout_data_workout", values[i])
			} else if value.Valid {
				wd.workout_data_workout = new(uuid.UUID)
				*wd.workout_data_workout = *value.S.(*uuid.UUID)
			}
		case workoutdata.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workout_data_profile", values[i])
			} else if value.Valid {
				wd.workout_data_profile = new(uuid.UUID)
				*wd.workout_data_profile = *value.S.(*uuid.UUID)
			}
		case workoutdata.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workout_data_competition", values[i])
			} else if value.Valid {
				wd.workout_data_competition = new(uuid.UUID)
				*wd.workout_data_competition = *value.S.(*uuid.UUID)
			}
		default:
			wd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkoutData.
// This includes values selected through modifiers, order, etc.
func (wd *WorkoutData) Value(name string) (ent.Value, error) {
	return wd.selectValues.Get(name)
}

// QueryWorkout queries the "workout" edge of the WorkoutData entity.
func (wd *WorkoutData) QueryWorkout() *WorkoutQuery {
	return NewWorkoutDataClient(wd.config).QueryWorkout(wd)
}

// QueryProfile queries the "profile" edge of the WorkoutData entity.
func (wd *WorkoutData) QueryProfile() *ProfileQuery {
	return NewWorkoutDataClient(wd.config).QueryProfile(wd)
}

// QueryWorkoutRouteData queries the "workout_route_data" edge of the WorkoutData entity.
func (wd *WorkoutData) QueryWorkoutRouteData() *WorkoutRouteDataQuery {
	return NewWorkoutDataClient(wd.config).QueryWorkoutRouteData(wd)
}

// QueryCompetition queries the "competition" edge of the WorkoutData entity.
func (wd *WorkoutData) QueryCompetition() *CompetitionQuery {
	return NewWorkoutDataClient(wd.config).QueryCompetition(wd)
}

// Update returns a builder for updating this WorkoutData.
// Note that you need to call WorkoutData.Unwrap() before calling this method if this WorkoutData
// was returned from a transaction, and the transaction was committed or rolled back.
func (wd *WorkoutData) Update() *WorkoutDataUpdateOne {
	return NewWorkoutDataClient(wd.config).UpdateOne(wd)
}

// Unwrap unwraps the WorkoutData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wd *WorkoutData) Unwrap() *WorkoutData {
	_tx, ok := wd.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkoutData is not a transactional entity")
	}
	wd.config.driver = _tx.drv
	return wd
}

// String implements the fmt.Stringer.
func (wd *WorkoutData) String() string {
	var builder strings.Builder
	builder.WriteString("WorkoutData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wd.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("healthkit_workout_id=")
	builder.WriteString(wd.HealthkitWorkoutID)
	builder.WriteString(", ")
	builder.WriteString("healthkit_workout_start_date=")
	builder.WriteString(wd.HealthkitWorkoutStartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("healthkit_workout_end_date=")
	builder.WriteString(wd.HealthkitWorkoutEndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("distance=")
	builder.WriteString(fmt.Sprintf("%v", wd.Distance))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(wd.Duration)
	builder.WriteString(", ")
	builder.WriteString("energy_burned=")
	builder.WriteString(wd.EnergyBurned)
	builder.WriteString(", ")
	builder.WriteString("average_heart_rate=")
	builder.WriteString(wd.AverageHeartRate)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(wd.Source)
	builder.WriteString(", ")
	builder.WriteString("location_type=")
	builder.WriteString(wd.LocationType)
	builder.WriteString(", ")
	builder.WriteString("weather=")
	builder.WriteString(fmt.Sprintf("%v", wd.Weather))
	builder.WriteByte(')')
	return builder.String()
}

// WorkoutDataSlice is a parsable slice of WorkoutData.
type WorkoutDataSlice []*WorkoutData
